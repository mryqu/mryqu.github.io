<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Db/Nosql on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/categories/db-nosql/</link>
    <description>Recent content in Db/Nosql on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 01 Apr 2017 06:17:43 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/categories/db-nosql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[MySQL] 将空返回值转换成NULL</title>
      <link>https://mryqu.github.io/post/mysql_%E5%B0%86%E7%A9%BA%E8%BF%94%E5%9B%9E%E5%80%BC%E8%BD%AC%E6%8D%A2%E6%88%90null/</link>
      <pubDate>Sat, 01 Apr 2017 06:17:43 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/mysql_%E5%B0%86%E7%A9%BA%E8%BF%94%E5%9B%9E%E5%80%BC%E8%BD%AC%E6%8D%A2%E6%88%90null/</guid>
      <description>当MySQL没有搜索到任何匹配行时，会返回空返回值，如何转换成NULL呢？
方法一 select (original_select_statement) as Alias  这种方法仅对一个单值有效，即： * 原语句返回单值，该值将被返回 * 原语句返回单列零行，将返回NULL * 原语句返回多列或多行，查询失败
方法二 使用IFNULL或COALESCE函数。</description>
    </item>
    
    <item>
      <title>了解混合持久化（Polyglot Persistence）</title>
      <link>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3%E6%B7%B7%E5%90%88%E6%8C%81%E4%B9%85%E5%8C%96polyglot_persistence/</link>
      <pubDate>Mon, 27 Apr 2015 05:58:13 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3%E6%B7%B7%E5%90%88%E6%8C%81%E4%B9%85%E5%8C%96polyglot_persistence/</guid>
      <description>开发web程序的最早期时间，最被广泛使用的企业程序架构是将程序的服务器端组件打包为单个单元。很多企业Java应用程序由单个WAR或EAR文件组成。其它语言（比如Ruby，甚至C++）编写的应用程序也大抵如此。这种单体架构模式(monolithicapplication architecturepattern)往往通过一个数据访问层与单一类型的数据库相连接，所有不同用途的数据存储都存储在该数据库内。 数据库环境在过去的十多年里增长巨大。每个新出现的数据库相较于其它数据库，都在某些方面有着优势，但同时它们也做了各种各样的折衷。事实上，根据CAP定理不可能拥有完美的数据库，我们需要根据应用程序来选择哪种折衷是可接受的。带有这些约束的工作场景符合Martin Fowler推广的混合持久化思路。混合持久化的思路是指，你应该根据工作的不同需求选择相应合适的数据库，这样我们就能两者兼得了。 混合持久化的优点显而易见：一个复杂的企业应用程序会使用很多类型的数据，对每种数据采用最适合的存储技术，可以带来性能的提升。随着微服务架构模式（Microservicearchitecturepattern）越来越受欢迎，复杂的企业应用程序将会被分解成很多的微服务，每个微服务内将对所操作的数据采用最适合的存储技术。
混合持久化的缺点也同样鲜明：以增加复杂性为代价。每种数据存储机制都有其学习成本，选择正确的数据存储也有决策成本。需要了解每种数据存储的性能瓶颈并不断迎接挑战。
Martin Fowler建议对战略性的项目采用混合持久化，这样才能通过新技术获得足够收益。
参考 Polyglot Persistence
The featuer is: Polyglot Persistence
NoSQL精粹 第13章混合持久化
[](http://sww.sas.com/saspedia/Polyglot_persistence)</description>
    </item>
    
    <item>
      <title>[JPA] 重温CascadeType</title>
      <link>https://mryqu.github.io/post/jpa_%E9%87%8D%E6%B8%A9cascadetype/</link>
      <pubDate>Sat, 18 Apr 2015 00:18:50 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/jpa_%E9%87%8D%E6%B8%A9cascadetype/</guid>
      <description>今天看了一篇帖子A beginner’s guide to JPA and Hibernate Cascade Types，对JPA/Hibernate中OneToOne、OneToMany、Many-To-Many关系下CascadeType的使用讲的很详尽，有代码示例也有SQL输出。作者VladMihalcea，著有High-Performance Java Persistence一书，应该淘一本学习学习。</description>
    </item>
    
    <item>
      <title>了解Apache Accumulo</title>
      <link>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3apache_accumulo/</link>
      <pubDate>Tue, 10 Mar 2015 20:12:08 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3apache_accumulo/</guid>
      <description> Apache Accumulo是一个可靠的、可伸缩的、高性能的排序分布式的Key-Value存储解决方案，提供了基于单元的访问控制以及可在数据处理过程中多个控制点修改键值对的服务器端编程机制。使用GoogleBigTable设计思路，基于ApacheHadoop、Zookeeper和Thrift构建。 Accumulo由美国国家安全局（NSA）于2008年开始研发，2011年捐赠给Apache基金会。Accumulo现已成为Apache基金会的顶级项目，并被评过第三大最受欢迎的NoSQL数据库引擎。 目前，Accumulo技术已经得到美国政府层面的全面认可，NSA已将该技术作为内部组织架构运行的核心部分，在对来源于各方面的庞大海量数据进行分析处理时，所应用的运算程序基本都运行在Accumulo技术上，即NSA“大多数监控和分析应用程序的后台都是Accumulo技术”。基于Hadoop的Accumulo技术已在实质上被视为美国国家安全战略的关键。 据2014年9月份的文章介绍，已经有几十家不同类型的美国企业安装了Accumulo技术系统，其中，美国20强企业中已有3家安装，50强企业中有5家安装，还有不少企业已表示对此有兴趣。 我一碰到KV存储方案，总想跟我用过的GemFire和MongoDB做个比较。vsChart.com - The Comparision Wiki上已经有现成的比较(见参考3和4)，值得学习。
参考  Apache Accumulo官网
 Accumulo: Why The World Needs Another NoSQL Database
 Apache Accumulo vs. GemFire
 Apache Accumulo vs. MongoDB
 NOSQL中文网：Apache Accumulo用户手册
  </description>
    </item>
    
    <item>
      <title>MongoDB 3.0新特性、提升与兼容性改变</title>
      <link>https://mryqu.github.io/post/mongodb_3.0%E6%96%B0%E7%89%B9%E6%80%A7%E6%8F%90%E5%8D%87%E4%B8%8E%E5%85%BC%E5%AE%B9%E6%80%A7%E6%94%B9%E5%8F%98/</link>
      <pubDate>Sat, 07 Mar 2015 22:01:45 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/mongodb_3.0%E6%96%B0%E7%89%B9%E6%80%A7%E6%8F%90%E5%8D%87%E4%B8%8E%E5%85%BC%E5%AE%B9%E6%80%A7%E6%94%B9%E5%8F%98/</guid>
      <description>MONGODB 3.0
WHAT’S NEW IN MONGODB 3.0
Release Notes for MongoDB 3.0
Compatibility Changes in MongoDB 3.0
MongoDB3.0发布&amp;ndash;新特性</description>
    </item>
    
    <item>
      <title>创建MySQL表失败，“show tables”命令显示表存在却无法删除</title>
      <link>https://mryqu.github.io/post/%E5%88%9B%E5%BB%BAmysql%E8%A1%A8%E5%A4%B1%E8%B4%A5show_tables%E5%91%BD%E4%BB%A4%E6%98%BE%E7%A4%BA%E8%A1%A8%E5%AD%98%E5%9C%A8%E5%8D%B4%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4/</link>
      <pubDate>Sun, 19 Oct 2014 07:41:26 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%88%9B%E5%BB%BAmysql%E8%A1%A8%E5%A4%B1%E8%B4%A5show_tables%E5%91%BD%E4%BB%A4%E6%98%BE%E7%A4%BA%E8%A1%A8%E5%AD%98%E5%9C%A8%E5%8D%B4%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4/</guid>
      <description>在MySQL表中创建一个表table_c失败了，返回错误ERROR 1146(42S02)；结果发现MySQL显示有这个表，却无法查询和删除。```
mysql&amp;gt; create table table_c (&amp;hellip;&amp;hellip;&amp;hellip;); ERROR 1146 (42S02): Table &amp;lsquo;yqutesting.table_c&amp;rsquo; doesn&amp;rsquo;t exist mysql&amp;gt; show tables; +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+ | Tables_in_yqutesting | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+ | table_a | | table_b | | table_c | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+ 3 rows in set (0.00 sec)
mysql&amp;gt; select * from table_c; ERROR 1146 (42S02): Table &amp;lsquo;yqutesting.table_c&amp;rsquo; doesn&amp;rsquo;t exist mysql&amp;gt; drop table table_c; ERROR 1051 (42S02): Unknown table &amp;lsquo;table_c&amp;rsquo;
``` 结果还是drop掉yqutesting数据库，修正了table_c的定义重新创建数据库和所有表完事。 参考：MySQL Create Table Error - Table Doesn&amp;rsquo;t ExistMySQL &amp;gt; Table doesn&amp;rsquo;t exist.</description>
    </item>
    
    <item>
      <title>MySQL Workbench的安全更新模式</title>
      <link>https://mryqu.github.io/post/mysql_workbench%E7%9A%84%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 16 Jul 2014 21:08:37 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/mysql_workbench%E7%9A%84%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E6%A8%A1%E5%BC%8F/</guid>
      <description>最近在MySQLWorkbench上使用&amp;rdquo;DELETE FROM TABLE_E;&amp;ldquo;清空一个表时返回错误： Error Code: 1175. You are using safe update mode and you triedto update a table without a WHERE that uses a KEY column To disablesafe mode, toggle the option in Preferences -&amp;gt; SQL Queries andreconnect.
结果在MySQL命令行上却一切正常。
这是由于MySQL Workbench打开了安全更新模式，其有助于初学者使用DELETE FROM tbl_name 语句但是忘记了WHERE子句造成不必要的麻烦。解决方法就是关闭安全更新模式。
解决方法1：
SET SQL_SAFE_UPDATES = 0; DELETE FROM TABLE_E; SET SQL_SAFE_UPDATES = 1;  解决方法2：
参考： mysql delete under safe mode
mysql Tips</description>
    </item>
    
    <item>
      <title>玩一下SQLite3命令</title>
      <link>https://mryqu.github.io/post/%E7%8E%A9%E4%B8%80%E4%B8%8Bsqlite3%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 10 Jul 2014 20:29:31 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%8E%A9%E4%B8%80%E4%B8%8Bsqlite3%E5%91%BD%E4%BB%A4/</guid>
      <description>SQLite介绍 SQLite是实现自包含、无需服务器、零配置和事务SQL数据库引擎的软件库。它占用资源非常低，既可以用于Windows/Linux/Unix等主流的操作系统，也广泛用于嵌入式产品中。它能够跟很多程序语言相结合，比如Tcl、C#、PHP、Java等，还有ODBC接口。 不像常见的客户-服务器范例，SQLite引擎不是个程序与之通信的独立进程，而是连接到程序中成为它的一个主要部分。所以主要的通信协议是在编程语言内的直接API调用。这在消耗总量、延迟时间和整体简单性上有积极的作用。整个数据库(定义、表、索引和数据本身)都在宿主主机上存储在一个单一的文件中。它的简单的设计是通过在开始一个事务的时候锁定整个数据文件而完成的。
SQLITE常用命令使用 SQLite命令行解释器除了支持SQL语句（大小写不敏感），还支持以.开头、大小写敏感的专有命令。SQLite网站有个帖子Command Line Shell For SQLite介绍了支持的所有命令，这里挑一些常用的玩一下。 - .help命令：给出所有命令的帮助介绍
 sqlite&amp;gt; .help   .prompt：更换提示符  sqlite&amp;gt; .prompt &amp;gt;&amp;gt; &amp;gt;&amp;gt; &amp;gt;&amp;gt;.prompt sqlite&amp;gt; sqlite&amp;gt;  .show：显示当前设置  sqlite&amp;gt;.show echo: off eqp: off explain: off headers: off mode: list nullvalue: &amp;quot;&amp;quot; output: stdout separator: &amp;quot;|&amp;quot; stats: off width:  .database：显示数据库信息  sqlite&amp;gt;.database seq name file --- --------------- ---------------------------------------------------------- 0 main E:\gitws\datasci_course_materials\assignment2\reuters.db 1 temp  .tables：显示表信息  sqlite&amp;gt;.tables Frequency  .</description>
    </item>
    
    <item>
      <title>SQL中的（稀疏）矩阵运算</title>
      <link>https://mryqu.github.io/post/sql%E4%B8%AD%E7%9A%84%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/</link>
      <pubDate>Mon, 07 Jul 2014 21:16:01 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/sql%E4%B8%AD%E7%9A%84%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/</guid>
      <description>前两天在一门课上看到SQL中（稀疏）矩阵的乘法，找到两篇相关帖子，介绍了SQL中的（稀疏）矩阵运算，包含矩阵相等判别、加法、乘法、转置。
Matrix Math in SQLMAD skills: new analysis practices for big data</description>
    </item>
    
    <item>
      <title>MongoDB副本集实践</title>
      <link>https://mryqu.github.io/post/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Sat, 05 Apr 2014 08:18:56 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E5%AE%9E%E8%B7%B5/</guid>
      <description>副本集（ReplicaSet）就是有自动故障恢复功能的主从集群。副本集和主从集群最为明显的区别就是副本集没有固定的“主节点”：整个集群会选取出一个“主节点”，当其不能工作时则变更到其他节点。然而，两者看上去非常相似：副本集总会有一个活跃节点（primary）和一个或多个备份节点（secondary）。副本集中可以有以下类型的节点： - 常规节点（standard）：存储一份完整的数据副本，参与选举投票，有可能成为活跃节点。 - 被动节点（passive）：存储完整的数据副本，参与投票，不能成为活跃节点。 - 仲裁节点（arbiter）：仅参与投票，不接受复制的数据，也不能成为活跃节点。
副本集对数据库管理员和开发者都是非常友好的。副本集的管理是自动化的，无需数据库管理员频繁监控和干预，可以自动提升备份节点成为活跃节点，以确保运转正常。对于开发者而言，仅需为副本集指定一下服务器，驱动程序就会自动找到副本集的节点集群。 每个参与节点（非仲裁节点）都有一个权重，权重值取值范围0-1000，默认值为1。权重为0的节点不能成为活跃节点。活跃节点选举根据高优先级优先、优先级相同时数据较新优先的原则进行比较。应用仅能向活跃节点进行写操作。默认情况下，应用会向活跃节点进行读操作也获取最新数据。如果无需获得最新数据时，可以为了提高读操作吞吐量或减少应用延迟而向备份节点进行读操作。读操作偏好模式如下： - primary - primaryPreferred - secondary - secondaryPreferred - nearestMongoDB命令行提供了下列关于副本集的指令：
&amp;gt; rs.help() rs.status() { replSetGetStatus : 1 } checks repl set status rs.initiate() { replSetInitiate : null } initiates set with default settings rs.initiate(cfg) { replSetInitiate : cfg } initiates set with configuration cfg rs.conf() get the current configuration object from local.system.replset rs.reconfig(cfg) updates the configuration of a running replica set with cfg (disconnects) rs.</description>
    </item>
    
    <item>
      <title>MongoDB主从复制实践</title>
      <link>https://mryqu.github.io/post/mongodb%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 03 Apr 2014 21:53:44 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/mongodb%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%9E%E8%B7%B5/</guid>
      <description>MongoDB主从复制（Master-slave replication）跟副本集（ReplicaSet）相比可以对主MongoDB节点设置多个从节点，并且可以将复制操作限制到特定数据库。但是MongoDB主从复制提供的冗余度更低而且无法自动故障切换，因此一般新的部署都倾向使用副本集而不是主从复制。
实验环境 两个节点中，MongoDB都安装在c:\mongodb目录下且MongoDB配置文件（c:\mongodb\etc\mongo.conf）均为：
systemLog: destination: file path: C:/mongodb/log/mongo.log logAppend: true storage: dbPath: C:/mongodb/data/db journal: enabled: false net: http: enabled: true RESTInterfaceEnabled: true  启动MongoDB 主节点启动命令：
c:\mongodb\bin\mongod.exe --config c:\mongodb\etc\mongo.conf --master --oplogSize=2048  从节点启动命令：
c:\mongodb\bin\mongod.exe --config c:\mongodb\etc\mongo.conf --slave --source 10.120.8.231 --slavedelay 10 --autoresync  主从复制测试 检查主节点 &amp;gt; show dbs; admin (empty) local 8.074GB test 0.078GB &amp;gt; db.isMaster() { &amp;quot;ismaster&amp;quot; : true, &amp;quot;maxBsonObjectSize&amp;quot; : 16777216, &amp;quot;maxMessageSizeBytes&amp;quot; : 48000000, &amp;quot;maxWriteBatchSize&amp;quot; : 1000, &amp;quot;localTime&amp;quot; : ISODate(&amp;quot;2014-04-03T01:47:49.</description>
    </item>
    
    <item>
      <title>使用YCSB测试MongoDB</title>
      <link>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8ycsb%E6%B5%8B%E8%AF%95mongodb/</link>
      <pubDate>Mon, 31 Mar 2014 20:29:01 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8ycsb%E6%B5%8B%E8%AF%95mongodb/</guid>
      <description>YCSB介绍 YCSB（Yahoo! Cloud Serving Benchmark）是雅虎开源的一款用于测试各类云服务/NoSQL/键值对存储的性能基准测试工具。覆盖的测试对象有： - PNUTS - BigTable - HBase - Hypertable - Azure - Cassandra - CouchDB - Voldemort - MongoDB - OrientDB - Infinispan - Dynomite - Redis - GemFire - GigaSpaces XAP - DynamoDB
YCSB项目的目标是提供一个标准的工具用来衡量不同键值对存储或云服务存储的性能。YCSB做了很多优化来提高客户端性能，例如在数据类型上用了最原始的比特数组以减少数据对象本身创建转换所需的时间等。YCSB的几大特性： - 支持常见的数据存储读写操作，如插入，修改，删除及读取 - 多线程支持。YCSB用Java实现，有很好的多线程支持。 - 灵活定义场景文件。可以通过参数灵活的指定测试场景，如100%插入， 50%读50%写等等 - 数据请求分布方式：支持随机，zipfian(只有小部分的数据得到大部分的访问请求）以及最新数据几种请求分布方式 - 可扩展性：可以通过扩展Workload的方式来修改或者扩展YCSB的功能
使用YCSB测试MongoDB 初试YCSB 下载https://github.com/downloads/brianfrankcooper/YCSB/ycsb-0.1.4.tar.gz 并解压缩。执行如下命令查看帮助：接下来开始使用YCSB测试MongoDB2.6，不过这其中遇到一些问题。期望YCSB的下一版本能够解决这些问题。
解决java.lang.ClassNotFoundException:com.yahoo.ycsb.Client问题 执行测试失败： C:\ycsb-0.1.4&amp;gt;python bin/ycsb load mongodb -s -P workloads/workloada java -cp C:\ycsb-0.1.4\core\lib\core-0.1.4.jar:C:\ycsb-0.1.4\gemfire-binding\conf:C:\ycsb-0.1.4\hbase-binding\conf:C:\ycsb-0.1.4\infinispan-binding\conf:C:\ycsb-0.1.4\jdbc-binding\conf:C:\ycsb-0.1.4\mongodb-binding\lib\mongodb-binding-0.1.4.jar:C:\ycsb-0.1.4\nosqldb-binding\conf:C:\ycsb-0.1.4\voldemort-binding\conf com.yahoo.ycsb.Client -db com.yahoo.ycsb.db.MongoDbClient -s -P workloads/workloada -load Exception in thread &amp;ldquo;main&amp;rdquo; java.</description>
    </item>
    
    <item>
      <title>Hello MongoDB Java Driver</title>
      <link>https://mryqu.github.io/post/hello_mongodb_java_driver/</link>
      <pubDate>Sun, 30 Mar 2014 13:50:33 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/hello_mongodb_java_driver/</guid>
      <description>首先需要下载MongoDB JavaDriver，我一开始以为mongo-java-driver-2.9.3.jar是最新版，后来才发现MongoDB JavaDriver下载页面版本排序是按照文件名而不是按照日期排序，其实mongo-java-driver-2.12.0.jar是最新版。因为从版本2.10.0开始提供新的类MongoClient而不是Mongo来连接数据库，所以需要注意所使用的MongoDB Java Driver版本。 Java代码如下：
package com.yqu.mongodb; import java.net.UnknownHostException; import java.util.List; import java.util.Set; import com.mongodb.BasicDBObject; import com.mongodb.DB; import com.mongodb.DBCollection; import com.mongodb.DBCursor; import com.mongodb.DBObject; import com.mongodb.MongoClient; import com.mongodb.MongoClientURI; import com.mongodb.MongoException; public class HelloMongoDB { public static void main(String[] args) { MongoClient mongoClient = null; try { // Since 2.10.0, uses MongoClient // mongoClient = new MongoClient(&amp;quot;localhost&amp;quot;, 27017); String host = &amp;quot;mongodb://localhost:27017&amp;quot;; mongoClient = new MongoClient(new MongoClientURI(host)); showdbs(mongoClient); // MongoDB will create it if database doesn&#39;t exists DB db = mongoClient.</description>
    </item>
    
    <item>
      <title>Windows下MongoDB安装与配置</title>
      <link>https://mryqu.github.io/post/windows%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 30 Mar 2014 07:57:15 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/windows%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid>
      <description>到官网http://www.mongodb.org/downloads下载MongoDB并安装在c:mongodb目录下，安装后需要进行配置才能启动MongoDB。首先创建如下目录： - md c:\mongodb\data - md c:\mongodb\db - md c:\mongodb\log - md c:\mongodb\etc 接着创建MongoDB配置文件：c:\mongodb\etc\mongo.conf
systemLog: destination: file path: C:/mongodb/log/mongo.log logAppend: true storage: dbPath: C:/mongodb/data/db journal: enabled: true net: http: enabled: true RESTInterfaceEnabled: true  通过如下命令启动MongoDB：
C:\mongodb\bin\mongod.exe --config C:\mongodb\etc\mongo.conf  可以通过以下三种方式验证MongoDB是否安装成功： - 访问MongoDB监听端口 http://localhost:27017/ ，确认出现类似信息。- 通过C:\mongodb\bin\mongo.exe登录Javascript shell并使用 - 访问HTTP接口 http://localhost:28017/ 并查看MongoDB服务器信息
在启动MongoDB的窗口通过Ctrl+ C停止MongoDB的运行。 最后通过如下命令将MongoDB配置成Windows服务：
C:\mongodb\bin\mongod.exe --config C:\mongodb\etc\mongo.conf--install  当然也可以通过如下命令手工配置Windows服务：
sc create MongoDB binPath= &amp;quot;C:\mongodb\bin\mongod.exe--config=C:\mongodb\etc\mongo.conf--service&amp;quot; start= demand DisplayName= &amp;quot;MongoDB&amp;quot;  参考 Install MongoDB on Windows</description>
    </item>
    
    <item>
      <title>MySQL:清空具有外键约束的表</title>
      <link>https://mryqu.github.io/post/mysql%E6%B8%85%E7%A9%BA%E5%85%B7%E6%9C%89%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E7%9A%84%E8%A1%A8/</link>
      <pubDate>Wed, 20 Nov 2013 20:30:18 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/mysql%E6%B8%85%E7%A9%BA%E5%85%B7%E6%9C%89%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E7%9A%84%E8%A1%A8/</guid>
      <description>最近在MySQL Workbench上使用&amp;rdquo;TRUNCATE TABLE TABLE_E;&amp;ldquo;清空一个表时返回错误：Error Code: 1701. Cannot truncate a table referenced in a foreignkey constraint (yqutesting.table_f, CONSTRAINT table_f_ibfk_4FOREIGN KEY (old_id) REFERENCES yqutesting.table_e(ID))解决方法1: - 删除约束 - 清空表 - 手工删除引用该表的记录 - 创建约束解决方法2:
 SET FOREIGN_KEY_CHECKS = 0; TRUNCATE TABLE TABLE_E; SET FOREIGN_KEY_CHECKS = 1;  参考:truncate foreign key constrained table</description>
    </item>
    
    <item>
      <title>[JPA] CascadeType.REMOVE与orphanRemoval的区别</title>
      <link>https://mryqu.github.io/post/jpa_cascadetype.remove%E4%B8%8Eorphanremoval%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 26 Oct 2013 13:15:59 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/jpa_cascadetype.remove%E4%B8%8Eorphanremoval%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>Cascading Remove 将引用字段标注为CascadeType.REMOVE（或包含REMOVE的CascadeType.ALL）表明删除操作将应该自动级联到由该字段引用的实体对象（多个实体对象可以由集合字段引用）:
@Entity class Employee { : @OneToOne(cascade=CascadeType.REMOVE) private Address address; : }  Orphan Removal JPA2额外支持一种更积极的删除级联模式，可以通过@OneToOne和@OneToMany注释的orphanRemoval元素设置:
@Entity class Employee { : @OneToOne(orphanRemoval=true) private Address address; : }  区别 两个设置的区别在于关系断开的响应。 例如，将地址字段设置为null或另一个Address对象时，不同设置的结果是不同。 - 如果指定了 orphanRemoval = true，则断开关系的的Address实例将被自动删除。这对于清除没有所有者对象（例如Employee）引用的、不该存在的依赖对象（例如Address）很有用。 - 如果仅指定 cascade = CascadeType.REMOVE，则不会执行上述自动删除操作，因为断开关系不是删除操作。
参考 Deleting JPA Entity Objects</description>
    </item>
    
    <item>
      <title>数据库非XA驱动和XA驱动列表</title>
      <link>https://mryqu.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%9Exa%E9%A9%B1%E5%8A%A8%E5%92%8Cxa%E9%A9%B1%E5%8A%A8%E5%88%97%E8%A1%A8/</link>
      <pubDate>Thu, 17 Oct 2013 19:44:55 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%9Exa%E9%A9%B1%E5%8A%A8%E5%92%8Cxa%E9%A9%B1%E5%8A%A8%E5%88%97%E8%A1%A8/</guid>
      <description>数据库非XA驱动XA驱动Postgresorg.postgresql.Driverorg.postgresql.xa.PGXADataSourceMySQLcom.mysql.jdbc.Drivercom.mysql.jdbc.jdbc2.optional.MysqlXADataSourceOracleoracle.jdbc.OracleDriveroracle.jdbc.xa.client.OracleXADataSourceDB2com.ibm.db2.jcc.DB2Drivercom.ibm.db2.jcc.DB2XADataSourceSQL Servercom.microsoft.sqlserver.jdbc.SQLServerDrivercom.microsoft.sqlserver.jdbc.SQLServerXADataSourceTeradatacom.teradata.jdbc.TeraDriver
 </description>
    </item>
    
    <item>
      <title>Ubuntu下安装部署MySQL数据库</title>
      <link>https://mryqu.github.io/post/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Fri, 11 Oct 2013 21:52:52 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>安装MySQL mysql-server是MySQL数据库服务器，必选安装。mysql-client是MySQL数据库客户端，提供对MySQL服务器的查询工具及备份/恢复数据工具；libmysqlclient-dev是MySQL的C语言开发接口，libmysql-java是MySQL的JDBC驱动，按需安装。
sudo apt-get update sudo apt-get install mysql-server sudo apt-get isntall mysql-client sudo apt-get install libmysqlclient-dev sudo apt-get install libmysql-java  查看是否安装成功:
sudo netstat -tap | grep mysql  查看上述软件包所提供的文件:
dpkg -L mysql-server dpkg -L mysql-client dpkg -L libmysqlclient-dev  通过上述命令检查之后，如果看到有MySQL的socket处于LISTEN状态则表示安装成功。
MySQL服务操作 查看状态 - 使用service查看状态：sudo service mysql status - 使用mysql脚本查看状态：/etc/inint.d/mysql status - 使用mysqladmin查看状态：mysqladmin -u root -p status
启动 - 使用service启动：sudo service mysql start - 使用mysql脚本启动：/etc/inint.d/mysql start - 使用mysqld_safe启动：mysqld_safe&amp;amp;</description>
    </item>
    
    <item>
      <title>PostgreSQL数据库分区的update操作</title>
      <link>https://mryqu.github.io/post/postgresql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA%E7%9A%84update%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 19 Jul 2013 23:23:36 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/postgresql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA%E7%9A%84update%E6%93%8D%E4%BD%9C/</guid>
      <description>CREATE TABLE measurement ( city_id int not null, unitsales int ); CREATE TABLE measurement_1 ( CHECK (unitsales &amp;lt; 100 ) ) INHERITS (measurement); CREATE TABLE measurement_2 ( CHECK (unitsales &amp;gt;= 100 ) ) INHERITS (measurement); CREATE OR REPLACE FUNCTIONmeasurement_insert_trigger() RETURNS TRIGGER AS $$ BEGIN IF (NEW.unitsales &amp;lt; 100) THEN INSERT INTO measurement_1 VALUES (NEW.*); ELSE INSERT INTO measurement_2 VALUES (NEW.*); END IF; RETURNNULL; END; $$ LANGUAGE plpgsql; CREATE TRIGGER insert_measurement_trigger BEFOREINSERT ON measurement FOR EACH ROWEXECUTE PROCEDURE measurement_insert_trigger(); INSERT INTO measurement VALUES (1, 1); INSERT INTO measurement VALUES (2, 2); INSERT INTO measurement VALUES (3, 300); INSERT INTO measurement VALUES (4, 400); mysdm=# select * from measurement_1; city_id | unitsales ---------+----------- 1| 1 2| 2 (2 rows) mysdm=# select * from measurement_2; city_id | unitsales ---------+----------- 3| 300 4| 400 (2 rows)  Postgres没有智能到在update时根据记录的新值变动分区，而是报错！</description>
    </item>
    
    <item>
      <title>PostgreSQL与MySQL数据库分区</title>
      <link>https://mryqu.github.io/post/postgresql%E4%B8%8Emysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA/</link>
      <pubDate>Tue, 16 Jul 2013 21:10:39 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/postgresql%E4%B8%8Emysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA/</guid>
      <description>数据库分区是逻辑数据库的分割。分区可以通过创建独立的较小数据库（每个有自己的表、索引和事物日志）或分割所选的元素（例如一个表）来实现。数据库分区通常是为了易管理性、性能和数据有效性。
分类 分区主要有两种形式：
水平分区 水平分区是将不同的行放入不同的表中。比如将邮编小于50000的客户放入“东部客户”表中，将邮编等于或大于50000的客户放入“西部客户”表中。该例中有两个分区表“东部客户”和“西部客户”，其合集视图就是所有客户的完整视图。 通过这样的方式不同分区里面的物理列分割的数据集得以组合，从而进行个体分割（单分区）或集体分割（1个或多个分区）。所有在表中定义的列在每个数据集中都能找到，所以表的特性依然得以保持。
垂直分区 垂直分区创建含有（主键加上）较少列的表并使用额外的表存储（主键加上）剩余的列，每个分区表中都含有其中列所对应的行。范式化是内在包含垂直分区的过程。 垂直分区被称为“行分割”，通常用于分割表中（查找很慢的）动态数据和（查找很快的、使用较动态数据更频繁的）静态数据。这样在保证数据相关性的同时，在诸如统计分析之类的查询中访问静态数据还能提高性能。 不同的物理存储也可以用于垂直分区，例如不频繁使用的列或者宽列被存入不同的设备。 其缺点是需要管理冗余列，查询所有数据需要join操作。
分区标准 当前高端关系数据库管理系统提供分割数据库的不同标准。这些标准使用分区键基于一定标准分配分区。常用的标准为：
基于范围的分区 通过判断分区键是否在一定范围内选择分区。例如所有邮编列在70000和79999之间的行可以是一个分区。
基于列表的分区 一个分区分配给一列数值。如果分区键为这些值之一，该分区被选中。例如所有国家列为冰岛、挪威、瑞典、芬兰或丹麦的行可以是一个北欧国家分区。
基于哈希的分区 哈希函数的返回值决定分区归属。假设有四个分区，哈希函数返回值为0到3。 组合分区允许上述分区方案的一定组合。例如先使用基于范围的分区，然后使用基于哈希的分区。
PostgreSQL数据库分区 PostgreSQL支持基本的数据库分区，本文以PostgreSQL 9.1为例介绍一下PostgreSQL数据库分区。
优点 分区具有下列优点： - 在某些情况下查询性能能显著提升，特别是表中频繁访问的行在一个单独分区或者少数量分区中。分区替代索引起始列会减少索引大小，使频繁使用的索引更有可能放入内存。 - 当查询或更新访问单个分区的大部分记录时，通过对分区的顺序扫描取代对全表的索引读或随机读，也会提升性能。 - 如果批量加载和删除需求付诸于分区设计，这些需求可以通过添加或删除分区来完成。ALTER TABLE NOINHERIT和DROP TABLE都比批量操作更快，而且完全可以避免批量删除导致的VACUUM负担。 - 很少使用的数据可被移往更便宜更慢的存储媒体。
这些优点仅在表非常大时是真正有价值的。对表采用分区的收益取决于应用程序，一般经验法则是表超过了数据库服务器的物理内存时使用分区。
表继承 PostgreSQL通过表继承支持分区，每个分区作为单个父表的子表创建。父表本身通常为空，仅用于代表整个数据集。
CREATE TABLE cities ( name text, population float, altitude int -- in feet ); CREATE TABLE capitals ( state char(2) ) INHERITS (cities);  父表的所有check约束和not-null约束自动被子表继承，其他类型的约束（unique、主键和外键约束）不会被继承。
SELECT name, altitude FROM cities WHERE altitude &amp;gt; 500; SELECT name, altitude FROM ONLY cities WHERE altitude &amp;gt; 500; -- 通过ONLY关键词，第二个查询仅作用于表cities而不会用于cities的子表。  支持的分区标准 PostgreSQL数据库支持基于范围的分区和基于列表的分区。</description>
    </item>
    
    <item>
      <title>MySQL、Postgres、Oracle、SQL server、DB2、Teradata、Netezza数据类型比较</title>
      <link>https://mryqu.github.io/post/mysqlpostgresoraclesql_serverdb2teradatanetezza%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/</link>
      <pubDate>Mon, 24 Jun 2013 20:49:03 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/mysqlpostgresoraclesql_serverdb2teradatanetezza%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/</guid>
      <description>mysqlpostgresoraclemssqldb2teredatanetezzabigint8bytes
-9223372036854775808~9223372036854775807
0~184467440737095516158bytes
-9223372036854775808~9223372036854775807Not support8bytes
-9223372036854775808~92233720368547758078bytes (precision of 19digits)
-9223372036854775808~92233720368547758078bytes
-9223372036854775808~92233720368547758078bytes
-9223372036854775808~9223372036854775807decimal(m,n)65digits
64: MySQL 5.0.3~5.0.5
8?: MySQL 5.0.3 beforeno limit?
1000digits?m:1 ~38
n:-84~127.m:1 ~38
n:0~m1~31digitsm:1~18m:1 ~38
n:0~mnumeric=decimalnumeric=decimalnumeric=decimalnumeric=decimalnumeric=decimalinteger4bytes
-2147483648~2147483647
0~42949672954bytes
-2147483648~2147483647INTEGER=NUMBER(38)
int
4bytes
-2147483648~21474836474bytes (precision of 10digits)
-2147483648~21474836474bytes
-2147483648~21474836474bytes
-2147483648~2147483647varchar(n)0~255characters : MySQLbefore
0~65,535characters : MySQL 5.0.3 and above
unlimited lengthvarchar2(n)
4000 bytes800032672bytes64000 bytes64000 characterschar(n)0~255characters?&amp;nbsp;unlimited length2000 bytes80001~25464000 bytes64000 characterstextTINYTEXT:255(2^8)bytes
TEXT:65535(2^16)bytes
MEDIUMTEXT:16777215 (2^24)bytes
LONGTEXT:4294967295 (2^32)bytesunlimited lengthCLOB: (4 gigabytes - 1) * (database block size).</description>
    </item>
    
    <item>
      <title>PostgreSQL JDBC setFetchSize</title>
      <link>https://mryqu.github.io/post/postgresql_jdbc_setfetchsize/</link>
      <pubDate>Fri, 14 Jun 2013 17:56:08 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/postgresql_jdbc_setfetchsize/</guid>
      <description>今天看到我们的Hiberante配置没有设hibernate.jdbc.fetch_size。 Fetch Size是设定JDBC的Statement读取数据的时候每次从数据库中取出的记录条数。例如一次查询1万条记录，对于Oracle的JDBC驱动来说，是不会1次性把1万条取出来的，而只会取出FetchSize条数，当纪录集遍历完了这些记录以后，再去数据库取Fetch Size条数据。因此大大节省了无谓的内存消耗。当然FetchSize设的越大，读数据库的次数越少，速度越快；FetchSize越小，读数据库的次数越多，速度越慢。这有点像平时我们写程序写硬盘文件一样，设立一个缓冲，每次写入缓冲，等缓冲满了以后，一次写入硬盘，道理相同。 看了一下Postgres，它的JDBC驱动却是一次将查询的所有结果都返回。相反使用游标、设置fetchsize倒是麻烦不少。 http://jdbc.postgresql.org/documentation/head/query.html</description>
    </item>
    
    <item>
      <title>数据库常用操作笔记</title>
      <link>https://mryqu.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 18 Aug 2012 07:10:28 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</guid>
      <description>GreenPlum/PostGreSQL操作  Create a new database: createdb medb Drop database: dropdb medb Access database: psql -h gpserver -d gpdatabase -U gpuser -W Get help: medb=# \h Quit: medb=# \q Read command from file: medb=# \i input.sql To dump a database: pg_dump medb &amp;gt; db.out To reload the database: psql -d database -f db.out Dump all database: pg_dumpall &amp;gt; /var/lib/pgsql/backups/dumpall.sql Restore database: psql -f /var/lib/pgsql/backups/dumpall.sql medb Show databases: psql -l medb=# \l; Show users: medb=# select * from &amp;quot;pg_user&amp;quot;; Show tables: medb=# select * from &amp;quot;pg_tables&amp;quot;; Set password: medb=# upadte pg_shadow set passwd = &#39;new_password&#39; where usename = &#39;username&#39;; Clean all databases (Should be done via a daily cron): vacuumdb --quiet --all check column of table medb=# select * from INFORMATION_SCHEMA.</description>
    </item>
    
    <item>
      <title>数据库catalog的定义</title>
      <link>https://mryqu.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93catalog%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Mon, 13 Aug 2012 22:16:37 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93catalog%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <description>The database catalog of a database instance consists ofmetadata in which definitions of database objects such as basetables, views (virtual tables), synonyms, value ranges, indexes,users, and user groups are stored.
The SQL standard specifies a uniform means to access thecatalog, called the INFORMATION_SCHEMA, but not all databasesfollow this, even if they implement other aspects of the SQLstandard. For an example of database-specific metadata accessmethods, see Oracle metadata.</description>
    </item>
    
    <item>
      <title>实践记录：将MDF MSSQL数据库内容导入MySQL</title>
      <link>https://mryqu.github.io/post/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95%E5%B0%86mdf_mssql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E5%AE%B9%E5%AF%BC%E5%85%A5mysql/</link>
      <pubDate>Thu, 24 Sep 2009 10:37:58 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95%E5%B0%86mdf_mssql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E5%AE%B9%E5%AF%BC%E5%85%A5mysql/</guid>
      <description>玩一个例程源码，它使用的是SQL server数据库，虽然我机子装了VS2005带的SQL server2005，我还是想用MySQL。 把自己的转换过程草草记录下来，也不算太无聊吧。
【环境】VS2005附带的SQL server 2005 &amp;amp; MySQL 5.1
1、下载并安装Microsoft SQL Server Management StudioExpress（SSMSE）http://www.microsoft.com/downloadS/details.aspx?familyid=C243A5AE-4BD1-4E3D-94B8-5A0F62BF7796&amp;amp;displaylang=en
2、 配置SQL2005
==SQL server configuration manager== SQL server service -&amp;gt; 选择SQL serverbrower属性，修改模式为手动，然后启动SQL server brower
==SQL Server Surface Area Configuration -&amp;gt;Surface Area Configuration for Services and Connections== SQLEXPRESS -&amp;gt; Database Engine -&amp;gt;Remote connection -&amp;gt; Local and remote connection&amp;amp; using both tcp/ip and named pipes
==SQL server configuration manager== SQL server 2005 network configuration -&amp;gt; protocolsfor SQLEXPRESS -&amp;gt; 选择TCP/TP属性中IPAddresses，删掉动态端口，设定端口为1433</description>
    </item>
    
    <item>
      <title>org.gjt.mm.mysql.Driver和com.mysql.jdbc.Driver的区别</title>
      <link>https://mryqu.github.io/post/org.gjt.mm.mysql.driver_%E5%92%8Ccom.mysql.jdbc.driver%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 05 Oct 2008 11:43:53 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/org.gjt.mm.mysql.driver_%E5%92%8Ccom.mysql.jdbc.driver%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>org.gjt.mm.mysql.Driver是早期的驱动名称，后来就改名为com.mysql.jdbc.Driver，现在一般都推荐使用com.mysql.jdbc.Driver。在最新版本的mysqljdbc驱动中，为了保持对老版本的兼容，仍然保留了org.gjt.mm.mysql.Driver，但是实际上org.gjt.mm.mysql.Driver中调用了com.mysql.jdbc.Driver，因此现在这两个驱动没有什么区别。
//org.gjt.mm.mysql.Driver的源代码 package org.gjt.mm.mysql; import java.sql.SQLException; public class Driver extends com.mysql.jdbc.Driver { // ~Constructors//----------------------------------------------------------- public Driver() throws SQLException {super();} }  由源代码可以看出，仅仅是为了兼容，才保留了该名字，所以建议直接使用com.mysql.jdbc.Driver</description>
    </item>
    
  </channel>
</rss>