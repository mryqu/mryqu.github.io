<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>分析 on Mryqu's Notes</title><link>https://mryqu.github.io/tags/%E5%88%86%E6%9E%90/</link><description>Recent content in 分析 on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 09 Aug 2016 05:25:47 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml"/><item><title>获取Facebook User Token</title><link>https://mryqu.github.io/post/facebook_user_token/</link><pubDate>Tue, 09 Aug 2016 05:25:47 +0000</pubDate><guid>https://mryqu.github.io/post/facebook_user_token/</guid><description>使用Facebook Graph API搜索主页数据，可以用App Token也可以用User Token。 获取Facebook App Token一贴中已经介绍了如何获取Facebook App Token，这里就介绍一下如何获取UserToken。
参考3 Facebook Login - Advance - Manually Build a Login Flow给出了如何构建一个signURL，RestFB的getLoginDialogUrl方法就实现了这样的功能。redirectUri一开始直接想用带外认证urn:ietf:wg:oauth:2.0:oob，可是Facebook不认呀。 Facebook Login - Advance - Manually Build a Login Flow已经提到了：对于桌面应用，redirectUri必须是https://www.facebook.com/connect/login_success.html 。
获取Facebook User Token步骤 生成signURL 生成signURL并进行Get请求：
curl &amp;#34;https://www.facebook.com/dialog/oauth?client_id={appId}&amp;amp;redirect_uri=https://www.facebook.com/connect/login_success.html&amp;amp;response_type=token&amp;amp;scope=public_profile&amp;#34; 可以从返回的页面中获取登录表单：
认证 使用自己的Facebook账户和密码填充上一表单，使用Post请求进行认证：
curl -X POST &amp;#34;{form-action}&amp;#34; -H &amp;#34;Content-Type: application/x-www-form-urlencoded&amp;#34; --data &amp;#34;lsd={lsd_value}&amp;amp;api_key={api_key_value}&amp;amp;cancel_url={cancel_rul_value}&amp;amp;isprivate={isprivate=_value}&amp;amp;legacy_return={legacy_return_value}&amp;amp;profile_selector_ids={profile_selector_ids_value}&amp;amp;return_session={return_session_value}&amp;amp;skip_api_login={skip_api_login_value}&amp;amp;signed_next={skip_api_login_value}&amp;amp;trynum={trynum_value}&amp;amp;timezone={timezone_value}&amp;amp;lgndim={lgndim_value}&amp;amp;lgnrnd={lgnrnd_value}&amp;amp;lgnjs={lgnjs_value}&amp;amp;email={your_facebook_account}&amp;amp;pass={your_facebook_password}&amp;amp;login={login_value}&amp;amp;persistent={persistent_value}&amp;amp;default_persistent={default_persistent_value}&amp;#34; 获取User Token Facebook通过认证后返回302响应，其Location头是下面这个样子的，很好获取（也可以参考一下RestFB的fromQueryString函数实现）。
https://www.facebook.com/connect/login_success.html#access_token={userToken}&amp;amp;expires_in={expire} 参考 Facebook Login - Access Tokens Facebook Login - Access Tokens - App Access Tokens Facebook Login - Advance - Manually Build a Login Flow RestFB： GET LOGIN DIALOG URL RestFB： EXTENDING AN ACCESS TOKEN Facebook Dialog OAuth Tutorial</description></item><item><title>粗览Activiti Explorer源代码</title><link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_explorer%E6%BA%90%E4%BB%A3%E7%A0%81/</link><pubDate>Thu, 12 Mar 2015 08:52:17 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_explorer%E6%BA%90%E4%BB%A3%E7%A0%81/</guid><description>ActivitiExplorer的应用程序为org.activiti.explorer.ExplorerApp，其界面配置文件为Activiti\modules\activiti-webapp-explorer2\src\main\resources\activiti-ui-context.xml。通过该配置文件创建主窗口org.activiti.explorer.ui.MainWindow类实例，并通过org.activiti.explorer.ViewManagerFactoryBean创建实现org.activiti.explorer.ViewManager接口的org.activiti.explorer.DefaultViewManager或org.activiti.explorer.ui.alfresco.AlfrescoViewManager类实例。 在Activiti演示中采用的是org.activiti.explorer.DefaultViewManager类实例，它对主窗口进行视图管理，完成视图切换、对应导航栏和功能菜单的设置。 主窗口org.activiti.explorer.ui.MainWindow类实例通过org.activiti.explorer.ui.mainlayout.MainLayout类进行界面布局。
下面列举了Activiti Explorer两级导航栏所对应的页面实现类。
Tasks Inboxorg.activiti.explorer.ui.task.InboxPage My Tasksorg.activiti.explorer.ui.task.TasksPage Queuedorg.activiti.explorer.ui.task.QueuedPage Involvedorg.activiti.explorer.ui.task.InvolvedPage Archivedorg.activiti.explorer.ui.task.ArchivedPage Processes My Instancesorg.activiti.explorer.ui.process.MyProcessInstancesPage Deployed process definitionsorg.activiti.explorer.ui.process.ProcessDefinitionPage Model workspaceorg.activiti.editor.ui.EditorProcessDefinitionPage Reports Generate reportsorg.activiti.explorer.ui.reports.RunReportsPage Saved reportsorg.activiti.explorer.ui.reports.SavedReportsPage Manage Databaseorg.activiti.explorer.ui.management.db.DatabasePage Deploymentsorg.activiti.explorer.ui.management.deployment.DeploymentPage Active Processesorg.activiti.explorer.ui.management.processdefinition.ActiveProcessDefinitionPage Suspend Processesorg.activiti.explorer.ui.management.processdefinition.SuspendedProcessDefinitionPage Jobsorg.activiti.explorer.ui.management.job.JobPage Usersorg.activiti.explorer.ui.management.identity.UserPage Groupsorg.activiti.explorer.ui.management.identity.GroupPage Administrationorg.activiti.explorer.ui.management.admin.AdministrationPage Crystalballorg.activiti.explorer.ui.management.crystalball.CrystalBallPage</description></item><item><title>粗览Activiti Modeler属性显示和设置代码</title><link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_modeler%E5%B1%9E%E6%80%A7%E6%98%BE%E7%A4%BA%E5%92%8C%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81/</link><pubDate>Fri, 06 Mar 2015 08:47:29 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_modeler%E5%B1%9E%E6%80%A7%E6%98%BE%E7%A4%BA%E5%92%8C%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81/</guid><description>我的博文粗览Activiti Modeler操作和源代码介绍了Activiti ModelEditor组件的常用操作和对应源代码分析，本文接着介绍一下ActivitiModeler里BPMN元素属性的显示和设置。 粗览Activiti Modeler操作和源代码里提到的stencilset.json除了含有每个BPMN元素应该使用什么图标，也定义了每个BPMN元素的所有属性。以UserTask元素为例，它含有以下的属性包：
&amp;ldquo;overrideidpackage&amp;rdquo; &amp;ldquo;namepackage&amp;rdquo; &amp;ldquo;documentationpackage&amp;rdquo; &amp;ldquo;asynchronousdefinitionpackage&amp;rdquo; &amp;ldquo;exclusivedefinitionpackage&amp;rdquo; &amp;ldquo;executionlistenerspackage&amp;rdquo; &amp;ldquo;multiinstance_typepackage&amp;rdquo; &amp;ldquo;multiinstance_cardinalitypackage&amp;rdquo; &amp;ldquo;multiinstance_collectionpackage&amp;rdquo; &amp;ldquo;multiinstance_variablepackage&amp;rdquo; &amp;ldquo;multiinstance_conditionpackage&amp;rdquo; &amp;ldquo;isforcompensationpackage&amp;rdquo; &amp;ldquo;usertaskassignmentpackage&amp;rdquo; &amp;ldquo;formkeydefinitionpackage&amp;rdquo; &amp;ldquo;duedatedefinitionpackage&amp;rdquo; &amp;ldquo;prioritydefinitionpackage&amp;rdquo; &amp;ldquo;formpropertiespackage&amp;rdquo; &amp;ldquo;tasklistenerspackage&amp;rdquo; [tomcat]\webapps\activiti-explorer\editor-app\configuration\properties.js里提供了对各类BPMNstencil的所需要包含的HTML页面。 [tomcat]\webapps\activiti-explorer\editor-app\stencil-controller.js中对ORYX.CONFIG.EVENT_SELECTION_CHANGED事件注册了匿名函数监听器。当某一BPMN元素被选中后，该监听器会设置$scope.selectedItem和$scope.selectedShape，其中包含BPMN元素的所有属性，每个属性都有对应的stencilreadModeTemplateUrl、writeModeTemplateUrl和templateUrl。 [tomcat]\webapps\activiti-explorer\editor-app\editor.html是ActivitiModelEditor组件的显示页面，其ID为propertiesHelpWrapper的DIV元素内对所选择的BPMN元素的每个属性放置templateUrl、readModeTemplateUrl或writeModeTemplateUrl对应的HTML子页面用于显示和设置stencil属性。 用于设置BPMNstencil属性的页面都位于[tomcat]\webapps\activiti-explorer\editor-app\configuration\properties\下。 这些页面和Anjugar.JS控制器为：</description></item><item><title>粗览Activiti Modeler操作和源代码</title><link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_modeler%E6%93%8D%E4%BD%9C%E5%92%8C%E6%BA%90%E4%BB%A3%E7%A0%81/</link><pubDate>Sun, 15 Feb 2015 20:24:21 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_modeler%E6%93%8D%E4%BD%9C%E5%92%8C%E6%BA%90%E4%BB%A3%E7%A0%81/</guid><description>Activiti Model Editor组件 我的了解Activiti Explorer及其Vaadin实现方式博文里提到ActivitiExplorer使用的是Vaadin架构，但是Activiti 模型编辑器组件却没用使用Vaadin架构，而是采用Angular.JS的MVC模式。Activiti模型编辑器组件的客户端代码位于Activiti\modules\activiti-webapp-explorer2\src\main\webapp\editor-app\。 该目录下的editor.html是Activiti Modeler Editor的主界面HTML代码 其中palette区是通过Angular.JS使用stencilsets\bpmn2.0\icons下多个子目录内的PNG图像形成的多组列表。其节点层次关系获取相关代码为：
stencil-controller.js Activiti\modules\activiti-modeler\src\main\java\org\activiti\rest\editor\main\StencilsetRestResource.java Activiti\modules\activiti-webapp-explorer2\src\main\resources\stencilset.json editor.html中的视图与两个控制器进行了绑定:
stencil-controller.js：处理对canvas中BPMN元素的操作，很多处理是通过editor目录下的QRYX库完成的 toolbar-controller.js：处理对工具栏的操作，很多处理由configuration\toolbar-default-actions.js完成 保存模型操作 保存模型操作，是通过toolbar-default-actions.js中的SaveModel方法完成的，它需要将三部分信息传给服务器：
模型的元数据：例如模型名称、分类、创建时间、最后一次更新时间等等 模型JSON数据：将canvas内的图像数据转换成JSON数据UTF8字符串 { &amp;#34;resourceId&amp;#34;: 53, &amp;#34;properties&amp;#34;: { &amp;#34;process_id&amp;#34;: &amp;#34;process&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;documentation&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;process_author&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;process_version&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;process_namespace&amp;#34;: &amp;#34;http://www.activiti.org/processdef&amp;#34;, &amp;#34;executionlisteners&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;eventlisteners&amp;#34;: &amp;#34;&amp;#34; }, &amp;#34;stencil&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;BPMNDiagram&amp;#34; }, &amp;#34;childShapes&amp;#34;: [ { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-4F7484B9-11EC-4FCE-8950-FEFFB723D88B&amp;#34;, &amp;#34;properties&amp;#34;: { &amp;#34;overrideid&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;documentation&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;executionlisteners&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;initiator&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;formkeydefinition&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;formproperties&amp;#34;: &amp;#34;&amp;#34; }, &amp;#34;stencil&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;StartNoneEvent&amp;#34; }, &amp;#34;childShapes&amp;#34;: [], &amp;#34;outgoing&amp;#34;: [ { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-B589A0D9-FA79-4C12-95B7-253E72480384&amp;#34; } ], &amp;#34;bounds&amp;#34;: { &amp;#34;lowerRight&amp;#34;: { &amp;#34;x&amp;#34;: 259, &amp;#34;y&amp;#34;: 139 }, &amp;#34;upperLeft&amp;#34;: { &amp;#34;x&amp;#34;: 229, &amp;#34;y&amp;#34;: 109 } }, &amp;#34;dockers&amp;#34;: [] }, { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-1A762474-62B9-4F3D-A81C-1ADD46AF7D2F&amp;#34;, &amp;#34;properties&amp;#34;: { &amp;#34;overrideid&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;documentation&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;asynchronousdefinition&amp;#34;: &amp;#34;false&amp;#34;, &amp;#34;exclusivedefinition&amp;#34;: &amp;#34;false&amp;#34;, &amp;#34;executionlisteners&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;multiinstance_type&amp;#34;: &amp;#34;None&amp;#34;, &amp;#34;multiinstance_cardinality&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;multiinstance_collection&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;multiinstance_variable&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;multiinstance_condition&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;isforcompensation&amp;#34;: &amp;#34;false&amp;#34;, &amp;#34;usertaskassignment&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;formkeydefinition&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;duedatedefinition&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;prioritydefinition&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;formproperties&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;tasklisteners&amp;#34;: &amp;#34;&amp;#34; }, &amp;#34;stencil&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;UserTask&amp;#34; }, &amp;#34;childShapes&amp;#34;: [], &amp;#34;outgoing&amp;#34;: [ { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-4134C10E-B589-42FF-AACC-463D35D52016&amp;#34; } ], &amp;#34;bounds&amp;#34;: { &amp;#34;lowerRight&amp;#34;: { &amp;#34;x&amp;#34;: 746, &amp;#34;y&amp;#34;: 172 }, &amp;#34;upperLeft&amp;#34;: { &amp;#34;x&amp;#34;: 646, &amp;#34;y&amp;#34;: 92 } }, &amp;#34;dockers&amp;#34;: [] }, { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-B22A5CAB-94D0-419E-BB1E-E8538C6A7283&amp;#34;, &amp;#34;properties&amp;#34;: { &amp;#34;overrideid&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;documentation&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;executionlisteners&amp;#34;: &amp;#34;&amp;#34; }, &amp;#34;stencil&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;EndNoneEvent&amp;#34; }, &amp;#34;childShapes&amp;#34;: [], &amp;#34;outgoing&amp;#34;: [], &amp;#34;bounds&amp;#34;: { &amp;#34;lowerRight&amp;#34;: { &amp;#34;x&amp;#34;: 1089, &amp;#34;y&amp;#34;: 138 }, &amp;#34;upperLeft&amp;#34;: { &amp;#34;x&amp;#34;: 1061, &amp;#34;y&amp;#34;: 110 } }, &amp;#34;dockers&amp;#34;: [] }, { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-B589A0D9-FA79-4C12-95B7-253E72480384&amp;#34;, &amp;#34;properties&amp;#34;: { &amp;#34;overrideid&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;documentation&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;conditionsequenceflow&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;executionlisteners&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;defaultflow&amp;#34;: &amp;#34;false&amp;#34; }, &amp;#34;stencil&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;SequenceFlow&amp;#34; }, &amp;#34;childShapes&amp;#34;: [], &amp;#34;outgoing&amp;#34;: [ { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-1A762474-62B9-4F3D-A81C-1ADD46AF7D2F&amp;#34; } ], &amp;#34;bounds&amp;#34;: { &amp;#34;lowerRight&amp;#34;: { &amp;#34;x&amp;#34;: 645.</description></item><item><title>用python分析FM代码和日志</title><link>https://mryqu.github.io/post/%E7%94%A8python%E5%88%86%E6%9E%90fm%E4%BB%A3%E7%A0%81%E5%92%8C%E6%97%A5%E5%BF%97/</link><pubDate>Thu, 07 Nov 2013 21:53:58 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%94%A8python%E5%88%86%E6%9E%90fm%E4%BB%A3%E7%A0%81%E5%92%8C%E6%97%A5%E5%BF%97/</guid><description>学python有一段时间了，学完不用，结果就是很快遗忘。这周分析一些FM代码和日志，终于弃Java转python，自己乐一下！
filterDV t6Found=False with open(&amp;#39;SASFinancialManagement5.4f.log&amp;#39;, &amp;#39;w&amp;#39;) as fdst: with open(&amp;#39;SASFinancialManagement5.4.log&amp;#39;, &amp;#39;r&amp;#39;) as fsrc: for line in fsrc: if t6Found: if &amp;#34;DataValidation&amp;#34; in line: fdst.write(line) else: if &amp;#34;formSetId=436,formId=,tableCode=NewTable6&amp;#34; in line: t6Found=True if not fsrc.closed: fsrc.close() if not fdst.closed: fdst.close() calcDVDuration import re totalTime=0 with open(&amp;#39;SASFinancialManagement5.4f.log&amp;#39;, &amp;#39;r&amp;#39;) as fsrc: for line in fsrc: if &amp;#34;begin data validation at formSubScope for&amp;#34; in line: m = re.search(&amp;#39;formSetId=.* ]&amp;#39;, line) target = m.group(0) m = re.</description></item></channel></rss>