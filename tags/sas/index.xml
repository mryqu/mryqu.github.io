<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sas on Mryqu's Notes</title><link>https://mryqu.github.io/tags/sas/</link><description>Recent content in sas on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 18 Aug 2016 05:47:19 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/sas/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello UnRAVL</title><link>https://mryqu.github.io/post/hello_unravl/</link><pubDate>Thu, 18 Aug 2016 05:47:19 +0000</pubDate><guid>https://mryqu.github.io/post/hello_unravl/</guid><description>UnRAVL介绍 UnRAVL（Uniform REST API ValidationLanguage）是用于验证REST应用编程接口的JSON领域特定语言。UnRAVL由SAS架构师DavidBiesack实现，并作为SAS开源软件在GitHub上发布。
UnRAVL脚本包含一个REST API调用的JSON描述:
HTTP方法（GET、POST、PUT、DELETE、HEAD、PATCH） URI (可选的)HTTP头 (可选的)请求消息体 (可选的)认证 对于每个API调用，一个UnRAVL脚本可以包含用于验证结果的一或多个断言。某些断言可以表达为前置条件，即在进行API调用之前必须为真。下列内容可以断言：
结果消息体匹配期望的JSON、文本或其他数据 存在带有特定值的特定头 HTTP状态码为特定值或在特定集合内 响应消息体匹配基准（benchmark） 通过Groovy表达式测试响应或环境变量中的元素为真 一个环境变量已赋值 UnRAVL也支持从RESTAPI调用结果中抽取数据、与环境变量进行数据绑定并用于之后的API调用验证。例如，将一个创建资源的POST 调用响应的Location 头进行保存，并将此URL用于后继GET 、PUT 、DELETE 调用。 模板功能提供了可重用的API验证构建能力。
UnRAVL示例 build.gradle buildscript { repositories { mavenCentral() } } apply plugin: &amp;#39;java&amp;#39; apply plugin: &amp;#39;eclipse&amp;#39; apply plugin: &amp;#39;idea&amp;#39; jar { baseName = &amp;#39;HelloUnRAVL&amp;#39; version = &amp;#39;0.1.0&amp;#39; } repositories { mavenCentral() } sourceCompatibility = 1.7 targetCompatibility = 1.7 ext { jacksonVersion = &amp;#34;2.5.+&amp;#34; groovyVersion = &amp;#34;2.</description></item><item><title>在Linux终端下启动SAS管理控制台</title><link>https://mryqu.github.io/post/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%B8%8B%E5%90%AF%E5%8A%A8sas%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0/</link><pubDate>Tue, 29 Mar 2016 21:50:15 +0000</pubDate><guid>https://mryqu.github.io/post/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%B8%8B%E5%90%AF%E5%8A%A8sas%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0/</guid><description>在Linux终端下没有X11显示系统的情况下，可以通过如下命令将X11转移到其他X视窗服务器以显示SMC界面：
$ export DISPLAY=[machine]:[port] $ pwd /local/install/SASServer/SASHome/SASManagementConsole/9.4 $ ./sasmc</description></item><item><title>[C++]获取Facebook帖子生成的SAS时间</title><link>https://mryqu.github.io/post/c++_%E8%8E%B7%E5%8F%96facebook%E5%B8%96%E5%AD%90%E7%94%9F%E6%88%90%E7%9A%84sas%E6%97%B6%E9%97%B4/</link><pubDate>Sat, 20 Feb 2016 06:13:22 +0000</pubDate><guid>https://mryqu.github.io/post/c++_%E8%8E%B7%E5%8F%96facebook%E5%B8%96%E5%AD%90%E7%94%9F%E6%88%90%E7%9A%84sas%E6%97%B6%E9%97%B4/</guid><description>写了一个小代码分析Facebook帖子生成时间字符串，将其解析成SAS时间。 简而言之，time_t存储的是距00:00:00, Jan 1, 1970 UTC的秒数（epoch），其中tm_year存储的是当前年数减去1900；而SAS时间起始点为00:00:00, Jan 1, 1960UTC；转换主要使用difftime获取两者的时间差。
代码如下：
参考 C++: time_t C++: time C++: gmtime</description></item><item><title>[C++]获取推文生成的SAS时间</title><link>https://mryqu.github.io/post/c++_%E8%8E%B7%E5%8F%96%E6%8E%A8%E6%96%87%E7%94%9F%E6%88%90%E7%9A%84sas%E6%97%B6%E9%97%B4/</link><pubDate>Fri, 19 Feb 2016 06:07:14 +0000</pubDate><guid>https://mryqu.github.io/post/c++_%E8%8E%B7%E5%8F%96%E6%8E%A8%E6%96%87%E7%94%9F%E6%88%90%E7%9A%84sas%E6%97%B6%E9%97%B4/</guid><description>写了一个小代码分析推文生成时间字符串，将其解析成SAS时间。 简而言之，time_t存储的是距00:00:00, Jan 1, 1970 UTC的秒数（epoch），其中tm_year存储的是当前年数减去1900；而SAS时间起始点为00:00:00, Jan 1, 1960UTC；转换主要使用difftime获取两者的时间差。 代码如下：
参考 C++: time_t C++: time C++: gmtime</description></item><item><title>了解HTML5 Data Adapter for SAS®（h54s）</title><link>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3html5_data_adapter_for_sash54s/</link><pubDate>Sat, 30 Jan 2016 06:20:15 +0000</pubDate><guid>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3html5_data_adapter_for_sash54s/</guid><description>今天在LinkedIn上看到一个消息，SAS的银牌合作伙伴Boemska开源了他们的HTML5 Data Adapter forSAS®（h54s）。 H54S是一个库，帮助和管理基于HTML5(JavaScript)的Web应用与部署在SAS企业BI平台上以SAS语言开发的后端数据服务之间的无缝双向通信。可以让Web程序员和SAS开发者协作以前所未有的速度和敏捷创建通用Web应用。 服务器端要求：
SAS® BI平台 (9.2及更高版本) SAS® 存储过程Web应用 (集成技术) 粗略扫了一下h54s.sas、h54s.js和method.js：编写一个引入h54s.sas的SAS存储过程，接收前端的JSON数据，经过该SAS存储过程处理后返回给前端JSON结果。
参考 HTML5 Data Adapter for SAS®（h54s） GitHub：boemska/h54s</description></item><item><title>SAS过程步支持的第三方编程语言</title><link>https://mryqu.github.io/post/sas%E8%BF%87%E7%A8%8B%E6%AD%A5%E6%94%AF%E6%8C%81%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><pubDate>Tue, 25 Aug 2015 05:58:04 +0000</pubDate><guid>https://mryqu.github.io/post/sas%E8%BF%87%E7%A8%8B%E6%AD%A5%E6%94%AF%E6%8C%81%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid><description> # ----------------------------------------------- # SAVING THE OUTPUT PARAMETER ESTIMATE TO LOCAL FILE # ----------------------------------------------- save(logiten, file=&amp;quot;c:/temp/outmodel.rda&amp;quot;) endsubmit; quit;
&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;</description></item><item><title>漫谈Lua</title><link>https://mryqu.github.io/post/%E6%BC%AB%E8%B0%88lua/</link><pubDate>Mon, 24 Aug 2015 05:49:45 +0000</pubDate><guid>https://mryqu.github.io/post/%E6%BC%AB%E8%B0%88lua/</guid><description>由于工作需要，最近用了有一段时间Lua了。对于脚本语言，研究生时用过Tcl/Tk做过网络仿真，后来在工作中学过Ruby，不同程度地用过UnixShell、Python、Javascript、Groovy、SAS和R。这里面UnixShell脚本是针对特定操作系统的脚本，SAS和R是用于特定业务领域（统计）的脚本，Javascript现在做Web富客户端是绕不过去的。用于通用领域的脚本中，Python容易上手、成熟、工具库多、资源丰富、文档等支持强大、几乎能做任何事：网络、图形界面、桌面程序、服务器、图形处理、算法等。可是我司将Lua而不是Python集成到SAS9.4中了。我使用它之前对其一无所知。很好奇Lua的历史及特长，是什么让我司对其青睐有加的？
何为Lua？ Lua是一门强大、快速、轻量级、可嵌入的脚本语言。Lua结合了简单的程序语法以及基于关联数组和扩展语义的强大数据描述结构。Lua是动态类型语言，通过在基于寄存器的虚拟机上解析字节码进行运行，具有自动内存管理和增量垃圾回收功能，极适于配置、脚本和快速原型开发。
Lua的历史 Lua在葡萄牙语中指的是“月亮”。Lua由PUC-Rio（巴西的里约热内卢天主教大学）的一个团队设计、实现和维护。Lua由Tecgraf（原先的计算机图形技术组）发明，并作为自由软件发行。现在由LabLua维护。Tecgraf和LabLua是PUC-Rio计算机科学系的两个实验室。 Lua发明者：Waldemar, Roberto, Luiz由Ernani d&amp;rsquo;Almeida拍摄(2011)
|Lua版本|发行时间|Lua版本|发行时间 |&amp;mdash;&amp;ndash; |1.0|未公开|3.1|1998/07/11 |1.1|1994/07/08|3.2|1999/07/08 |2.1|1995/02/07|4.0|2000/11/06 |2.2|1995/11/28|5.0|2003/04/11 |2.3|未公开|5.1|2006/02/21 |2.4|1996/03/14|5.2|2011/12/16 |2.5|1996/11/19|5.3|2015/01/12 |3.0|1997/07/01
Lua优点 经过验证的、健壮的语言：Lua已经被用于很多工业程序中(例如Adobe的PhotoshopLightroom)、嵌入式系统中(例如，用于巴西数字电视的Ginga中间件)和游戏中(例如魔兽和愤怒的小鸟)。Lua是游戏开发中主要的脚本语言。 速度快：许多Benchmark显示Lua是解释性脚本语言中最快的。例如Lua vs Python3 on X64 Ubuntu显示Lua比Python3要快很多。此外，LuaJIT项目提供在目标平台上的即时编译，可以让Lua有更优越的性能。 可移植：Lua以很小的包进行分发，在任何具有标准C编译器的系统上即可开箱即用地进行编译。Lua可在所有Unix发行版和Windows、移动设备、嵌入微处理器和IBM大型机等系统上运行。 可嵌入：Lua以很小的体积提供了一个快速语言引擎，所以易于嵌入到应用中。Lua具有简明、很好文档化的API，允许同其他语言紧密集成。非常易于通过其他语言库扩展Lua，同样其他语言程序也易于用Lua扩展。Lua不仅仅被用于扩展C和C++程序，还有Java、C#、Smalltalk、Fortran、Ada、Erlang、甚至注入Perl和Ruby之类的其他脚本语言。 功能强大（但简明）：Lua设计的一个基本概念是对所实现的功能提供元机制，而不是在语言中直接提供一堆功能。例如，Lua不是一个纯的面向对象语言，但它提供了用于实现类和集成的元机制。Lua的元机制带来概念的简明性并保持语言很小，同时允许语义以非传统的方式进行扩展。 体积小：Lua5.3.1的压缩包包含源代码和文档，体积仅276K，解压缩后为1.1M。源代码包含大约23000行C代码。在64位Linux下，使用所有标准Lua库的Lua解释器占242K，Lua库占414K。 免费：开源，使用非常自由的MIT许可证发布软件。 为什么SAS集成Lua？ 通过本文所附文章，基本可以判断SAS集成Lua是内部驱动的； 首先Lua有助SAS研发部门完成特定产品的开发工作（特别是新版本的SAS预报服务器）。Lua的优雅语法、现代设计和对数据结构的支持，可以让你以新的方式书写SAS程序，克服SAS宏语言的种种不足。SAS中的Lua生态系统有助于提升质量、一致性和重用性，从而以更低的代价获得更高的生产力。
参考 Lua官网
The History of Lua
Lua 为什么在游戏编程领域被广泛运用？
Lua简明教程
Driving SAS® with Lua
Using Lua within your SAS programs
The implementation of Lua 5.0
The LuaJIT Project</description></item></channel></rss>