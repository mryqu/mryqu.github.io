<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Inheritance on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/inheritance/</link>
    <description>Recent content in Inheritance on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 27 Aug 2014 20:41:17 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/inheritance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[JavaScript] 继承</title>
      <link>https://mryqu.github.io/post/javascript_%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Wed, 27 Aug 2014 20:41:17 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/javascript_%E7%BB%A7%E6%89%BF/</guid>
      <description>示例：
function BaseClass() {}; BaseClass.prototype.method1 = function() { console.log(&amp;quot;BaseClass#method1&amp;quot;) }; BaseClass.prototype.method2 = function() { console.log(&amp;quot;BaseClass#method2&amp;quot;) }; BaseClass.prototype.method3 = function() { return &amp;quot;BaseClass#method3&amp;quot;; }; ChildClass.prototype = new BaseClass(); function ChildClass() { //BaseClass.call(this); }; ChildClass.prototype.method2 = function() { console.log(&amp;quot;ChildClass#method2&amp;quot;) }; ChildClass.prototype.method3 = function() { console.log(BaseClass.prototype.method3.call(this)+&amp;quot; by ChildClass!&amp;quot;); }; ChildClass.prototype.method4 = function() { console.log(&amp;quot;ChildClass#method4&amp;quot;) }; var myobj = new ChildClass(); myobj.method1(); myobj.method2(); myobj.method3(); myobj.method4();  测试： 注解：
Javascript的继承要在原型链上进行，没有super()可以调用父类，覆盖父类函数时只能通过父类原型以call或apply函数的形式调用父类的方法。</description>
    </item>
    
  </channel>
</rss>