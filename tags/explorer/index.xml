<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>explorer on Mryqu's Notes</title><link>https://mryqu.github.io/tags/explorer/</link><description>Recent content in explorer on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 12 Mar 2015 08:52:17 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/explorer/index.xml" rel="self" type="application/rss+xml"/><item><title>粗览Activiti Explorer源代码</title><link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_explorer%E6%BA%90%E4%BB%A3%E7%A0%81/</link><pubDate>Thu, 12 Mar 2015 08:52:17 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_explorer%E6%BA%90%E4%BB%A3%E7%A0%81/</guid><description>ActivitiExplorer的应用程序为org.activiti.explorer.ExplorerApp，其界面配置文件为Activiti\modules\activiti-webapp-explorer2\src\main\resources\activiti-ui-context.xml。通过该配置文件创建主窗口org.activiti.explorer.ui.MainWindow类实例，并通过org.activiti.explorer.ViewManagerFactoryBean创建实现org.activiti.explorer.ViewManager接口的org.activiti.explorer.DefaultViewManager或org.activiti.explorer.ui.alfresco.AlfrescoViewManager类实例。 在Activiti演示中采用的是org.activiti.explorer.DefaultViewManager类实例，它对主窗口进行视图管理，完成视图切换、对应导航栏和功能菜单的设置。 主窗口org.activiti.explorer.ui.MainWindow类实例通过org.activiti.explorer.ui.mainlayout.MainLayout类进行界面布局。
下面列举了Activiti Explorer两级导航栏所对应的页面实现类。
Tasks Inboxorg.activiti.explorer.ui.task.InboxPage My Tasksorg.activiti.explorer.ui.task.TasksPage Queuedorg.activiti.explorer.ui.task.QueuedPage Involvedorg.activiti.explorer.ui.task.InvolvedPage Archivedorg.activiti.explorer.ui.task.ArchivedPage Processes My Instancesorg.activiti.explorer.ui.process.MyProcessInstancesPage Deployed process definitionsorg.activiti.explorer.ui.process.ProcessDefinitionPage Model workspaceorg.activiti.editor.ui.EditorProcessDefinitionPage Reports Generate reportsorg.activiti.explorer.ui.reports.RunReportsPage Saved reportsorg.activiti.explorer.ui.reports.SavedReportsPage Manage Databaseorg.activiti.explorer.ui.management.db.DatabasePage Deploymentsorg.activiti.explorer.ui.management.deployment.DeploymentPage Active Processesorg.activiti.explorer.ui.management.processdefinition.ActiveProcessDefinitionPage Suspend Processesorg.activiti.explorer.ui.management.processdefinition.SuspendedProcessDefinitionPage Jobsorg.activiti.explorer.ui.management.job.JobPage Usersorg.activiti.explorer.ui.management.identity.UserPage Groupsorg.activiti.explorer.ui.management.identity.GroupPage Administrationorg.activiti.explorer.ui.management.admin.AdministrationPage Crystalballorg.activiti.explorer.ui.management.crystalball.CrystalBallPage</description></item><item><title>了解Activiti Explorer及其Vaadin实现方式</title><link>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3activiti_explorer%E5%8F%8A%E5%85%B6vaadin%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</link><pubDate>Tue, 10 Feb 2015 16:04:06 +0000</pubDate><guid>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3activiti_explorer%E5%8F%8A%E5%85%B6vaadin%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</guid><description>通过ActivitiModeler架构图可知，Activiti Explorer采用的是Vaadin框架。 Vaadin 是一种 Java Web 应用程序的开发框架, 其设计目标是便利地创建和维护高质量的 Web UI 应用程序.Vaadin 支持两种不同的开发模式: 服务器端开发和客户端开发. 服务器端开发方式是这二者中更为强大的一种. 它能帮助开发者忘记Web 程序的各种实现细节, 使得 Web 应用程序的开发变得就象过去使用便利的Java开发工具(如AWT, Swing,SWT)来开发桌面应用程序一样, 甚至更简单。 Vaadin 应用程序中基本上所有的逻辑都是运行在服务器端的 Java Servlet API 上的，如下图中Vaadin的运行时结构图所示，Vaadin运行时结构主要由服务器端框架和客户端引擎两部分构成。服务器端框架包含了用来与客户端引擎通讯的服务器端集成层以及一系列的 server端 UI 组件。客户端引擎则由 Google Web toolkit(GWT) 页面渲染模块和客户端集成层两部分组成。 ActivitiExplorer的代码位于Activiti\modules\activiti-explorer下： 参考资料 vaadin官方网站 book of vaadin 中文版 Vaadin - 来自北欧的 Web 应用开发利器，第 1 部分: Vaadin 的基本概况和基础开发 Vaadin - 来自北欧的 Web 应用开发利器，第 2 部分: Vaadin 的体系结构和功能扩展</description></item></channel></rss>