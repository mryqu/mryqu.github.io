<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compose on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/compose/</link>
    <description>Recent content in Compose on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 15 Jun 2015 06:15:31 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/compose/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vagrant运行Docker的几种方法</title>
      <link>https://mryqu.github.io/post/vagrant%E8%BF%90%E8%A1%8Cdocker%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 15 Jun 2015 06:15:31 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/vagrant%E8%BF%90%E8%A1%8Cdocker%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>Vagrant的docker provisioner能够自动安装Docker、下载Docker容器、随着vagrant up命令自动运行容器。 Vagrantfile Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.provision &amp;quot;docker&amp;quot; do |d| d.pull_images &amp;quot;consul&amp;quot; d.run &amp;quot;consul&amp;quot; d.pull_images &amp;quot;rabbitmq&amp;quot; d.run &amp;quot;rabbitmq&amp;quot; end end  仅使用Vagrant的docker provisioner安装Docker，使用脚本下载并运行Docker容器 Vagrantfile # Install Docker config.vm.provision &amp;quot;docker&amp;quot; # Download Docker images, create and start containers config.vm.provision :shell, :path =&amp;gt; &amp;quot;runMyDockers.sh&amp;quot;  runMyDockers.sh #!/bin/bash docker rm -f consul 2&amp;gt;/dev/null docker create --hostname consul --name consul -v /data/consul1:/data --dns 127.0.0.1 --restart always -p 8500:8500 --env CONSUL_OPTIONS=-bootstrap consul:dev docker start consul docker rm -f rabbitmq 2&amp;gt;/dev/null docker create --name rabbitmq --hostname rabbitmq -p 5672:5672 -v /data/rabbitmq:/data --dns 127.</description>
    </item>
    
    <item>
      <title>Docker Compose笔记</title>
      <link>https://mryqu.github.io/post/docker_compose%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 06 Jun 2015 05:33:22 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/docker_compose%E7%AC%94%E8%AE%B0/</guid>
      <description>Docker Compose概述 DockerCompose
前身 Fig
 Compose是用于在Docker内定义和运行多容器应用程序的工具。使用Compose，可以在一个文件内定义多容器应用程序，然后使用一个命令运行应用。 Compose对开发环境、交付准备服务器（stagingservers）和持续集成（CI）很有帮助，不建议用于生产环境。 使用Compose基本上是三步流程： - 通过一个Dockerfile定义应用环境，以便在其他地方复制； - 在docker-compose.yml中定义组成应用的服务，因此他们可以在一个隔离的环境一起运行； - 最后，运行docker-compose up，Compose将启动并运行整个应用。
docker-compose.yml大概是这个样子的:
web: build: . ports: - &amp;quot;5000:5000&amp;quot; volumes: - .:/code links: - redis redis: image: redis  Compose包含管理应用整个生命周期的命令: - 启动、停止和重建服务 - 查看运行的服务状态 - 对运行的服务的日志输出生成数据流 - 对一个服务运行一次性命令
Docker Compose安装 curl -L https://github.com/docker/compose/releases/download/VERSION_NUM/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose $ chmod +x /usr/local/bin/docker-compose  Docker Compose命令 更新整个应用 mryqu$ docker-compose stop # stop the containers mryqu$ docker-compose pull # download updated images mryqu# docker-compose up -d # creates new containers and starts them  更新单个服务 mryqu$ docker-compose stop foo # stop the foo service mryqu$ docker-compose pull foo # download foo service mryqu$ docker-compose up -d foo # start the new foo service  参考 Overview of Docker Compose</description>
    </item>
    
  </channel>
</rss>