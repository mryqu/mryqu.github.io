<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>modeler on Mryqu's Notes</title><link>https://mryqu.github.io/tags/modeler/</link><description>Recent content in modeler on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 06 Mar 2015 08:47:29 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/modeler/index.xml" rel="self" type="application/rss+xml"/><item><title>粗览Activiti Modeler属性显示和设置代码</title><link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_modeler%E5%B1%9E%E6%80%A7%E6%98%BE%E7%A4%BA%E5%92%8C%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81/</link><pubDate>Fri, 06 Mar 2015 08:47:29 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_modeler%E5%B1%9E%E6%80%A7%E6%98%BE%E7%A4%BA%E5%92%8C%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81/</guid><description>我的博文粗览Activiti Modeler操作和源代码介绍了Activiti ModelEditor组件的常用操作和对应源代码分析，本文接着介绍一下ActivitiModeler里BPMN元素属性的显示和设置。 粗览Activiti Modeler操作和源代码里提到的stencilset.json除了含有每个BPMN元素应该使用什么图标，也定义了每个BPMN元素的所有属性。以UserTask元素为例，它含有以下的属性包：
&amp;ldquo;overrideidpackage&amp;rdquo; &amp;ldquo;namepackage&amp;rdquo; &amp;ldquo;documentationpackage&amp;rdquo; &amp;ldquo;asynchronousdefinitionpackage&amp;rdquo; &amp;ldquo;exclusivedefinitionpackage&amp;rdquo; &amp;ldquo;executionlistenerspackage&amp;rdquo; &amp;ldquo;multiinstance_typepackage&amp;rdquo; &amp;ldquo;multiinstance_cardinalitypackage&amp;rdquo; &amp;ldquo;multiinstance_collectionpackage&amp;rdquo; &amp;ldquo;multiinstance_variablepackage&amp;rdquo; &amp;ldquo;multiinstance_conditionpackage&amp;rdquo; &amp;ldquo;isforcompensationpackage&amp;rdquo; &amp;ldquo;usertaskassignmentpackage&amp;rdquo; &amp;ldquo;formkeydefinitionpackage&amp;rdquo; &amp;ldquo;duedatedefinitionpackage&amp;rdquo; &amp;ldquo;prioritydefinitionpackage&amp;rdquo; &amp;ldquo;formpropertiespackage&amp;rdquo; &amp;ldquo;tasklistenerspackage&amp;rdquo; [tomcat]\webapps\activiti-explorer\editor-app\configuration\properties.js里提供了对各类BPMNstencil的所需要包含的HTML页面。 [tomcat]\webapps\activiti-explorer\editor-app\stencil-controller.js中对ORYX.CONFIG.EVENT_SELECTION_CHANGED事件注册了匿名函数监听器。当某一BPMN元素被选中后，该监听器会设置$scope.selectedItem和$scope.selectedShape，其中包含BPMN元素的所有属性，每个属性都有对应的stencilreadModeTemplateUrl、writeModeTemplateUrl和templateUrl。 [tomcat]\webapps\activiti-explorer\editor-app\editor.html是ActivitiModelEditor组件的显示页面，其ID为propertiesHelpWrapper的DIV元素内对所选择的BPMN元素的每个属性放置templateUrl、readModeTemplateUrl或writeModeTemplateUrl对应的HTML子页面用于显示和设置stencil属性。 用于设置BPMNstencil属性的页面都位于[tomcat]\webapps\activiti-explorer\editor-app\configuration\properties\下。 这些页面和Anjugar.JS控制器为：</description></item><item><title>Activiti Modeler中sid生成机制</title><link>https://mryqu.github.io/post/activiti_modeler%E4%B8%ADsid%E7%94%9F%E6%88%90%E6%9C%BA%E5%88%B6/</link><pubDate>Sat, 28 Feb 2015 19:28:15 +0000</pubDate><guid>https://mryqu.github.io/post/activiti_modeler%E4%B8%ADsid%E7%94%9F%E6%88%90%E6%9C%BA%E5%88%B6/</guid><description>昨天跟同事说Activiti Modeler中的sid比GoJS中的元素ID讲究，估计是由时戳和随机数混合生成的。 今天看了一下，发现原来就是一个纯随机数。
[tomcat]\webapps\activiti-explorer\editor-app\editor.html里对类为stencil-item的HTML元素设置的拖拽处理函数在[tomcat]\webapps\activiti-explorer\editor-app\stencil-controller.js中定义。 sid生成方法在[tomcat]\webapps\activiti-explorer\editor-app\editor\oryx.debug.js中定义。
ORYX.Editor.provideId = function() { var res=[], hex=&amp;#39;0123456789ABCDEF&amp;#39;; for(var i=0; i&amp;lt;36; i ) res[i]=Math.floor(Math.random()*0x10); res[14]=4; res[19]=(res[19] &amp;amp; 0x3) | 0x8; for(var i=0; i&amp;lt;36; i ) res[i] = hex[res[i]]; res[8] = res[13] = res[18] = res[23] = &amp;#39;-&amp;#39;; return &amp;#34;sid-&amp;#34; res.join(&amp;#39;&amp;#39;); }; 当然，GoJSBPMN样例中的ID就更简单的不得了，全都是预定义的简单数字。例如，userTask的key预定义为7，当一个BPMN元素加入GoJSmodel时，GoJS会让model中的key变成唯一的（代码混淆过，我猜估计没混淆前叫makeUniqueKeyFunction）。在我的小测试中，第一个userTask的key仍然为7，第二个userTask的key被改成了-3。 感觉要是借鉴MongoDB的ObjectId生成机制，ID的冲撞概率可能会更低。</description></item><item><title>将GoJS和Activiti Explorer熬成一锅粥</title><link>https://mryqu.github.io/post/%E5%B0%86gojs%E5%92%8Cactiviti_explorer%E7%86%AC%E6%88%90%E4%B8%80%E9%94%85%E7%B2%A5/</link><pubDate>Fri, 27 Feb 2015 20:05:26 +0000</pubDate><guid>https://mryqu.github.io/post/%E5%B0%86gojs%E5%92%8Cactiviti_explorer%E7%86%AC%E6%88%90%E4%B8%80%E9%94%85%E7%B2%A5/</guid><description>熬粥时，一开始创建一个跟editor-app平行的独立目录gojs-editor-app，结果我的Chrome浏览器报“Resourceinterpreted as stylesheet but transferred with MIME typetext/html”错误，GoJS的所有Javascript和stylesheet文件(例如BPMN.js和BPMN.css)都被加了料从Tomcat发给浏览器变成了html格式。 看了下面两个帖子，没有丝毫头绪： http://stackoverflow.com/questions/3467404/chrome-says-resource-interpreted-as-script-but-transferred-with-mime-type-tex
thttp://stackoverflow.com/questions/22631158/resource-interpreted-as-stylesheet-but-transferred-with-mime-type-text-html-see
搜了一下ActivitiExplorer的配置，看到org.activiti.explorer.filter.ExplorerFilter里有六个路径(&amp;quot;/ui&amp;quot;、&amp;quot;/VAADIN&amp;quot;、&amp;quot;/modeler.html&amp;quot;、&amp;quot;/editor-app&amp;quot;、&amp;quot;/service&amp;quot;、&amp;quot;/diagram-viewer&amp;quot;)走了特殊的过滤器。只好将GoJS的内容都转到Activiti已有的editor-app目录，这下齐活了。</description></item><item><title>粗览Activiti Modeler操作和源代码</title><link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_modeler%E6%93%8D%E4%BD%9C%E5%92%8C%E6%BA%90%E4%BB%A3%E7%A0%81/</link><pubDate>Sun, 15 Feb 2015 20:24:21 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_modeler%E6%93%8D%E4%BD%9C%E5%92%8C%E6%BA%90%E4%BB%A3%E7%A0%81/</guid><description>Activiti Model Editor组件 我的了解Activiti Explorer及其Vaadin实现方式博文里提到ActivitiExplorer使用的是Vaadin架构，但是Activiti 模型编辑器组件却没用使用Vaadin架构，而是采用Angular.JS的MVC模式。Activiti模型编辑器组件的客户端代码位于Activiti\modules\activiti-webapp-explorer2\src\main\webapp\editor-app\。 该目录下的editor.html是Activiti Modeler Editor的主界面HTML代码 其中palette区是通过Angular.JS使用stencilsets\bpmn2.0\icons下多个子目录内的PNG图像形成的多组列表。其节点层次关系获取相关代码为：
stencil-controller.js Activiti\modules\activiti-modeler\src\main\java\org\activiti\rest\editor\main\StencilsetRestResource.java Activiti\modules\activiti-webapp-explorer2\src\main\resources\stencilset.json editor.html中的视图与两个控制器进行了绑定:
stencil-controller.js：处理对canvas中BPMN元素的操作，很多处理是通过editor目录下的QRYX库完成的 toolbar-controller.js：处理对工具栏的操作，很多处理由configuration\toolbar-default-actions.js完成 保存模型操作 保存模型操作，是通过toolbar-default-actions.js中的SaveModel方法完成的，它需要将三部分信息传给服务器：
模型的元数据：例如模型名称、分类、创建时间、最后一次更新时间等等 模型JSON数据：将canvas内的图像数据转换成JSON数据UTF8字符串 { &amp;#34;resourceId&amp;#34;: 53, &amp;#34;properties&amp;#34;: { &amp;#34;process_id&amp;#34;: &amp;#34;process&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;documentation&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;process_author&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;process_version&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;process_namespace&amp;#34;: &amp;#34;http://www.activiti.org/processdef&amp;#34;, &amp;#34;executionlisteners&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;eventlisteners&amp;#34;: &amp;#34;&amp;#34; }, &amp;#34;stencil&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;BPMNDiagram&amp;#34; }, &amp;#34;childShapes&amp;#34;: [ { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-4F7484B9-11EC-4FCE-8950-FEFFB723D88B&amp;#34;, &amp;#34;properties&amp;#34;: { &amp;#34;overrideid&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;documentation&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;executionlisteners&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;initiator&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;formkeydefinition&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;formproperties&amp;#34;: &amp;#34;&amp;#34; }, &amp;#34;stencil&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;StartNoneEvent&amp;#34; }, &amp;#34;childShapes&amp;#34;: [], &amp;#34;outgoing&amp;#34;: [ { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-B589A0D9-FA79-4C12-95B7-253E72480384&amp;#34; } ], &amp;#34;bounds&amp;#34;: { &amp;#34;lowerRight&amp;#34;: { &amp;#34;x&amp;#34;: 259, &amp;#34;y&amp;#34;: 139 }, &amp;#34;upperLeft&amp;#34;: { &amp;#34;x&amp;#34;: 229, &amp;#34;y&amp;#34;: 109 } }, &amp;#34;dockers&amp;#34;: [] }, { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-1A762474-62B9-4F3D-A81C-1ADD46AF7D2F&amp;#34;, &amp;#34;properties&amp;#34;: { &amp;#34;overrideid&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;documentation&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;asynchronousdefinition&amp;#34;: &amp;#34;false&amp;#34;, &amp;#34;exclusivedefinition&amp;#34;: &amp;#34;false&amp;#34;, &amp;#34;executionlisteners&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;multiinstance_type&amp;#34;: &amp;#34;None&amp;#34;, &amp;#34;multiinstance_cardinality&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;multiinstance_collection&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;multiinstance_variable&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;multiinstance_condition&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;isforcompensation&amp;#34;: &amp;#34;false&amp;#34;, &amp;#34;usertaskassignment&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;formkeydefinition&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;duedatedefinition&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;prioritydefinition&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;formproperties&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;tasklisteners&amp;#34;: &amp;#34;&amp;#34; }, &amp;#34;stencil&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;UserTask&amp;#34; }, &amp;#34;childShapes&amp;#34;: [], &amp;#34;outgoing&amp;#34;: [ { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-4134C10E-B589-42FF-AACC-463D35D52016&amp;#34; } ], &amp;#34;bounds&amp;#34;: { &amp;#34;lowerRight&amp;#34;: { &amp;#34;x&amp;#34;: 746, &amp;#34;y&amp;#34;: 172 }, &amp;#34;upperLeft&amp;#34;: { &amp;#34;x&amp;#34;: 646, &amp;#34;y&amp;#34;: 92 } }, &amp;#34;dockers&amp;#34;: [] }, { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-B22A5CAB-94D0-419E-BB1E-E8538C6A7283&amp;#34;, &amp;#34;properties&amp;#34;: { &amp;#34;overrideid&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;documentation&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;executionlisteners&amp;#34;: &amp;#34;&amp;#34; }, &amp;#34;stencil&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;EndNoneEvent&amp;#34; }, &amp;#34;childShapes&amp;#34;: [], &amp;#34;outgoing&amp;#34;: [], &amp;#34;bounds&amp;#34;: { &amp;#34;lowerRight&amp;#34;: { &amp;#34;x&amp;#34;: 1089, &amp;#34;y&amp;#34;: 138 }, &amp;#34;upperLeft&amp;#34;: { &amp;#34;x&amp;#34;: 1061, &amp;#34;y&amp;#34;: 110 } }, &amp;#34;dockers&amp;#34;: [] }, { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-B589A0D9-FA79-4C12-95B7-253E72480384&amp;#34;, &amp;#34;properties&amp;#34;: { &amp;#34;overrideid&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;documentation&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;conditionsequenceflow&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;executionlisteners&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;defaultflow&amp;#34;: &amp;#34;false&amp;#34; }, &amp;#34;stencil&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;SequenceFlow&amp;#34; }, &amp;#34;childShapes&amp;#34;: [], &amp;#34;outgoing&amp;#34;: [ { &amp;#34;resourceId&amp;#34;: &amp;#34;sid-1A762474-62B9-4F3D-A81C-1ADD46AF7D2F&amp;#34; } ], &amp;#34;bounds&amp;#34;: { &amp;#34;lowerRight&amp;#34;: { &amp;#34;x&amp;#34;: 645.</description></item><item><title>Activiti模型编辑器之前前身：Oryx editor</title><link>https://mryqu.github.io/post/activiti%E6%A8%A1%E5%9E%8B%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E5%89%8D%E5%89%8D%E8%BA%ABoryx_editor/</link><pubDate>Wed, 11 Feb 2015 21:57:18 +0000</pubDate><guid>https://mryqu.github.io/post/activiti%E6%A8%A1%E5%9E%8B%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E5%89%8D%E5%89%8D%E8%BA%ABoryx_editor/</guid><description>我的The history and commercial version of Activiti Modeler博文里提到Activiti建模器组件是由Signavio捐赠的Signavio Core Components project， 可以说Activiti模型组件的前身是Signavio Core Components project， 那么Signavio Core Components project的前身又是什么呢？ Signavio (wiki)里面提到了Signavio是德国波茨坦大学哈索普莱特纳研究院（HPI）毕业生团队创建的。在Signavio之前，Signavio的这些创始人在HPI从2006年开始开发了世界上第一个用于BPMN的web建模器Oryx，一个学术性开源项目。Oryx就是Signavio Core Components project开源版和Signavio Process Editor商业版的蓝图。随着Signavio公司的产生，Oryx项目被废弃了、不再进行维护。 Oryx开发团队
答案就是：Signavio Core Componentsproject的前身，即Activiti模型编辑器之前前身是Oryx。Oryx里面有一些设计文档，对学习Activiti建模器组件仍然有一定的帮助。
参考 http://en.wikipedia.org/wiki/Signavio http://bpt.hpi.uni-potsdam.de/Oryx/News https://github.com/Activiti http://code.google.com/p/signavio-core-components/ https://code.google.com/p/oryx-editor/</description></item><item><title>The history and commercial version of Activiti Modeler</title><link>https://mryqu.github.io/post/the_history_and_commercial_version_of_activiti_modeler/</link><pubDate>Wed, 11 Feb 2015 20:06:15 +0000</pubDate><guid>https://mryqu.github.io/post/the_history_and_commercial_version_of_activiti_modeler/</guid><description>The history of Activiti Modeler Activiti Modeler component is as part of the Activiti projectfrom the start. This Modeler was donated by Signavio as part of the Signavio Core Components project. This project was not maintained anymoresince 2011 (Activiti 5.7) and Activiti team no longer considered it‘core’ to Activiti. Tijs Rademakers (the author of Activiti in Action) has spentquite some in his spare time to master, enhance and tweak the ‘oldcode base’, fork the Signavio Core Components project and create acompletely new, maintainable codebase.</description></item></channel></rss>