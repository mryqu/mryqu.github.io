<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Methodinvokingbean on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/methodinvokingbean/</link>
    <description>Recent content in Methodinvokingbean on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 05 Nov 2015 05:58:07 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/methodinvokingbean/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Spring Boot] Hello MethodInvokingFactoryBean and MethodInvokingBean</title>
      <link>https://mryqu.github.io/post/spring_boot_hello_methodinvokingfactorybean_and_methodinvokingbean/</link>
      <pubDate>Thu, 05 Nov 2015 05:58:07 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/spring_boot_hello_methodinvokingfactorybean_and_methodinvokingbean/</guid>
      <description>简介 在用spring管理我们的类的时候有时候希望有些属性值是来源于一些配置文件，系统属性，或者一些方法调用的结果，对于前两种使用方式可以使用spring的PropertyPlaceholderConfigurer类来注入，对于后一种则可以使用org.springframework.beans.factory.config.MethodInvokingFactoryBean类来生成需要注入的bean的属性。
通过MethodInvokingFactory Bean类，可注入方法返回值。MethodInvokingFactoryBean用来获得某个方法的返回值，该方法既可以是静态方法，也可以是实例方法。该方法的返回值可以注入bean实例属性，也可以直接定义成bean实例。
MethodInvokingBean是MethodInvokingFactoryBean的父类，更为简单。跟MethodInvokingFactoryBean相比，不会对容器返回任何值。
类层次关系 示例代码： package com.yqu.methodinvoker; import java.util.Arrays; import java.util.Properties; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.config.MethodInvokingBean; import org.springframework.beans.factory.config.MethodInvokingFactoryBean; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Bean; @SpringBootApplication public class Application { private static final Logger log = LoggerFactory.getLogger(Application.class); public static void main(String[] args) { SpringApplication app = new SpringApplication(Application.class); app.setWebEnvironment(false); app.setShowBanner(false); app.run(args); log.info(&amp;quot;sysProp http.proxyHost:&amp;quot;+System.getProperty(&amp;quot;http.proxyHost&amp;quot;)); log.info(&amp;quot;sysProp http.proxyPort:&amp;quot;+System.getProperty(&amp;quot;http.proxyPort&amp;quot;)); } @Bean public MethodInvokingFactoryBean methodInvokingFactoryBean() { MethodInvokingFactoryBean mfBean = new MethodInvokingFactoryBean(); mfBean.setStaticMethod(&amp;quot;java.lang.System.setProperties&amp;quot;); Properties props = System.</description>
    </item>
    
  </channel>
</rss>