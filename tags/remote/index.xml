<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Remote on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/remote/</link>
    <description>Recent content in Remote on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 08 Nov 2015 05:44:25 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/remote/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Git] 分支笔记</title>
      <link>https://mryqu.github.io/post/git_%E5%88%86%E6%94%AF%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 08 Nov 2015 05:44:25 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/git_%E5%88%86%E6%94%AF%E7%AC%94%E8%AE%B0/</guid>
      <description>最近接触了一些Git远程分支的操作和管理，做个笔记。
 创建本地分支  git branch [branch]  切换本地分支  git checkout [branch]  删除本地分支  git branch -D [branch]  重命名本地分支  git branch -m [oldbranch] [newbranch]  查看分支 ```
查看本地分支 （-v选项可以显示sha1和提交消息标题） git branch git branch -v
  # 查看远程分支 git branch -r git branch -rv
# 查看本地和远程分支 git branch -a git branch -av
- 向远程分支推送（远程分支不存在则会创建远程分支）  # 期望本地分支与远程分支同名，可以先切换到本地分支进行提交 git push [remote] [branch]
# 通过-u选项同时使新创建的远程分支成为本地分支的上游分支 git push -u [remote] [branch]</description>
    </item>
    
    <item>
      <title>Remote debugging on microservice at docker container inside vagrant box</title>
      <link>https://mryqu.github.io/post/remote_debugging_on_microservice_at_docker_container_inside_vagrant_box/</link>
      <pubDate>Mon, 05 Oct 2015 05:59:07 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/remote_debugging_on_microservice_at_docker_container_inside_vagrant_box/</guid>
      <description> Docker compose configuration foo-service: image: foo-service:latest hostname: foo-service dns: 127.0.0.1 restart: always  Vagrant configuration config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 8787, host: 8787, auto_correct: true  Consul configuration curl -X PUT -H &#39;application/json&#39; -d &#39;java_option_server_port:java_option_xms:java_option_xmx:java_option_debug&#39; http://localhost:8500/v1/kv/config/foo-service/jvm/java_options curl -X PUT -H &#39;application/json&#39; -d &#39;-Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n&#39; http://localhost:8500/v1/kv/config/foo-service/jvm/java_option_debug  IntelliJ IDEA configuration </description>
    </item>
    
    <item>
      <title>[Hive] 安装Hive 1.2.x</title>
      <link>https://mryqu.github.io/post/hive_%E5%AE%89%E8%A3%85hive_1.2.x/</link>
      <pubDate>Fri, 24 Jul 2015 05:37:23 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/hive_%E5%AE%89%E8%A3%85hive_1.2.x/</guid>
      <description>我的Hadoop集群为node50064、node50069和node51054。本文的Hive和MySQL软件仅在node50064上安装。
安装Hive-内嵌元数据存储模式 Hive驱动、元数据存储接口和数据库(derby)使用相同的JVM。元数据保持在内嵌的derby数据库，只允许一个会话连接到数据库。 下载并解压缩Hive wget http://apache.cs.utah.edu/hive/hive-1.2.x/apache-hive-1.2.x-bin.tar.gz tar -xzf apache-hive-1.2.x-bin.tar.gz sudo mv apache-hive-1.2.x-bin /usr/local/hive sudo chown -R &amp;quot;hadoop:hadoop&amp;quot; /usr/local/hive  环境变量设置 export HADOOP_HOME=/usr/local/hadoop export HADOOP_PREFIX=$HADOOP_HOME export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_PREFIX/lib/native export HADOOP_OPTS=&amp;quot;$HADOOP_OPTS -Djava.library.path=$HADOOP_PREFIX/lib/native&amp;quot; export HIVE_HOME=/usr/local/hive export PATH=$PATH:$HADOOP_PREFIX/bin:$HADOOP_PREFIX/sbin:$HIVE_HOME/bin  最后通过source~/.bashrc刷新配置文件。
conf/hive-env.sh 首先通过cd $HIVE_HOME/conf;cp hive-env.sh.template hive-env.sh;chmod 774hive-env.sh创建并设置hive-env.sh执行权限。 修改后的主要部分内容如下：
# Set HADOOP_HOME to point to a specific hadoop install directory export HADOOP_HOME=${HADOOP_HOME:-/usr/local/hadoop} # Hive Configuration Directory can be controlled by: export HIVE_CONF_DIR=/usr/local/hive/conf # Folder containing extra ibraries required for hive compilation/execution can be controlled by: export HIVE_AUX_JARS_PATH=/usr/local/hive/lib  conf/hive-site.</description>
    </item>
    
    <item>
      <title>为Artifactory设置proxy和remote repository</title>
      <link>https://mryqu.github.io/post/%E4%B8%BAartifactory%E8%AE%BE%E7%BD%AEproxy%E5%92%8Cremote_repository/</link>
      <pubDate>Sun, 19 Jul 2015 00:09:58 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%B8%BAartifactory%E8%AE%BE%E7%BD%AEproxy%E5%92%8Cremote_repository/</guid>
      <description>设置proxy 我一上来先设置代理，否则连不上远程仓库呀。 设置remote repository 远程仓库已经默认设置了jcenter，估计很少需要其他仓库了。 但不管三七二十一，还是把mavenCentral和gradlePlugins加上吧。全部勾选了Suppress POMConsistency Checks，取消勾选Handle Snapshots。 - mavenCentral: http://repo1.maven.org/maven2/ - gradlePlugins: https://plugins.gradle.org/m2/
测试结果显示，所需构件实际上都是从jcenter下载的，其他两个暂时还没用到。</description>
    </item>
    
    <item>
      <title>[Git] 预览远程仓库与本地仓库的差异</title>
      <link>https://mryqu.github.io/post/git_%E9%A2%84%E8%A7%88%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%9A%84%E5%B7%AE%E5%BC%82/</link>
      <pubDate>Mon, 23 Sep 2013 20:19:12 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/git_%E9%A2%84%E8%A7%88%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%9A%84%E5%B7%AE%E5%BC%82/</guid>
      <description>首先使用git fetch更新远程分支的本地副本，这不会对任何本地分支造成影响。
使用git log HEAD..origin可以显示本地分支与origin远程分支之间的提交日志。
使用git log -p HEAD..origin除了显示上述提交日志外，还会显示每个提交的补丁。
使用git diff HEAD...origin显示整个补丁。此外如果有本地未提交的修改，可以使用git diff origin/master显示整个补丁。
如果不想使用git pull来合并所有远程提交，可以使用git cherry-pick接受所需要的指定远程提交。最后当准备好接受所有远程提交再使用git pull合并剩余远程提交。</description>
    </item>
    
    <item>
      <title>Eclipse中解决远程调试超时的设置</title>
      <link>https://mryqu.github.io/post/eclipse%E4%B8%AD%E8%A7%A3%E5%86%B3%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E8%B6%85%E6%97%B6%E7%9A%84%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Fri, 07 Sep 2012 20:55:16 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/eclipse%E4%B8%AD%E8%A7%A3%E5%86%B3%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E8%B6%85%E6%97%B6%E7%9A%84%E8%AE%BE%E7%BD%AE/</guid>
      <description> 主要是加大调试器超时和启动超时设置 Tomcat设置 catalina.bat中添加如下：
:doStart shift if &amp;quot;%TITLE%&amp;quot; == &amp;quot;&amp;quot; set TITLE=Tomcat set _EXECJAVA=start &amp;quot;%TITLE%&amp;quot; %_RUNJAVA% set CATALINA_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,address=5558,server=y,suspend=n if not &amp;quot;&amp;quot;%1&amp;quot;&amp;quot; == &amp;quot;&amp;quot;-security&amp;quot;&amp;quot; goto execCmd shift echo Using Security Manager set &amp;quot;SECURITY_POLICY_FILE=%CTALINA_BASE%\conf\catalina.policy&amp;quot; goto execCmd  Eclipse设置 </description>
    </item>
    
  </channel>
</rss>