<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>command on Mryqu's Notes</title><link>https://mryqu.github.io/tags/command/</link><description>Recent content in command on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 17 May 2014 09:37:28 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/command/index.xml" rel="self" type="application/rss+xml"/><item><title>QuickEdit mode of command prompt</title><link>https://mryqu.github.io/post/quickedit_mode_of_command_prompt/</link><pubDate>Sat, 17 May 2014 09:37:28 +0000</pubDate><guid>https://mryqu.github.io/post/quickedit_mode_of_command_prompt/</guid><description>从Windows命令行复制内容每次都需要点击Edit菜单中的Mark子菜单项，颇为不便。
原来这个行为可以通过属性对话框中的QuickEdit mode改变：</description></item><item><title>Shell中的source和.命令</title><link>https://mryqu.github.io/post/shell%E4%B8%AD%E7%9A%84source%E5%92%8C.%E5%91%BD%E4%BB%A4/</link><pubDate>Thu, 10 Oct 2013 23:11:05 +0000</pubDate><guid>https://mryqu.github.io/post/shell%E4%B8%AD%E7%9A%84source%E5%92%8C.%E5%91%BD%E4%BB%A4/</guid><description>source是csh(C Shell)的内置命令: 标识读入并执行文件中的命令。 这与执行shell脚本是不一样的./script.sh会启动一个新的shell并执行script.sh中的命令。
source [-h] filename [arguments] The shell reads and executes commands from name. The commands are not placed on the history list. If any args are given, they are placed in argv. (+) source commands may be nested; if they are nested too deeply the shell may run out of file descriptors. An error in a source at any level terminates all nested source commands. With -h, commands are placed on the history list instead of being executed, much like `history -L&amp;#39;.</description></item><item><title>[HBase] Shell命令</title><link>https://mryqu.github.io/post/hbase_shell%E5%91%BD%E4%BB%A4/</link><pubDate>Fri, 27 Sep 2013 19:58:03 +0000</pubDate><guid>https://mryqu.github.io/post/hbase_shell%E5%91%BD%E4%BB%A4/</guid><description>HBase提供可扩展的基于jruby(JIRB)命令行已用于执行一些命令。HBase命令行主要归为六类。
1) 通用HBase命令 status 显示集群状态。可以为‘summary’、‘simple’或‘detailed’。默认为‘summary’。 用法:
hbase&amp;gt; status hbase&amp;gt; status ‘simple’ hbase&amp;gt; status ‘summary’ hbase&amp;gt; status ‘detailed’ version 输出HBase版本 用法:
hbase&amp;gt; version whoami 显示当前HBase用户。 用法:
hbase&amp;gt; whoami 2) 表管理命令 alter 修改列族schema；提供表名和指定新列族schema的字典。字典必须包含所要修改的列族名。例如，
对表‘t1’修改或添加列族‘f1’从当前值到最大版本5：
hbase&amp;gt; alter ‘t1’, NAME =&amp;gt; ‘f1’, VERSIONS =&amp;gt; 5 对多个列族进行操作:
hbase&amp;gt; alter ‘t1’, ‘f1’, {NAME =&amp;gt; ‘f2’, IN_MEMORY =&amp;gt; true}, {NAME =&amp;gt; ‘f3’, VERSIONS =&amp;gt; 5} 删除表‘t1’中的列族‘f1’，使用下列方法之一：
hbase&amp;gt; alter ‘t1’, NAME =&amp;gt; ‘f1’, METHOD =&amp;gt; ‘delete’ hbase&amp;gt; alter ‘t1’, ‘delete’ =&amp;gt; ‘f1’ 也可以修改诸如MAX_FILESIZE、READONLY、MEMSTORE_FLUSHSIZE、DEFERRED_LOG_FLUSH等表属性，例如将region最大容量设为128MB：</description></item></channel></rss>