<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mongodb on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/mongodb/</link>
    <description>Recent content in Mongodb on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 04 Apr 2015 00:06:03 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/mongodb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python: installing pymongo with Anaconda</title>
      <link>https://mryqu.github.io/post/python_installing_pymongo_with_anaconda/</link>
      <pubDate>Sat, 04 Apr 2015 00:06:03 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/python_installing_pymongo_with_anaconda/</guid>
      <description>在Anaconda发行版Python上通过conda install pymongo安装MongoDBpython驱动，结果失败了，最终通过conda install -c https://conda.binstar.org/anaconda pymongo安装成功。
BinstarBinstar和Anaconda都是同一家的产品，是Continuum Analytics推出的一个包管理服务，托管公开的pip和conda。 安装记录如下：
C:\tools\Anaconda&amp;gt;conda list # packages in environment at C:\tools\Anaconda: # _license 1.1 py27_0 anaconda 2.0.1 np18py27_0 argcomplete 0.6.7 py27_0 astropy 0.3.2 np18py27_0 atom 0.3.7 py27_0 backports.ssl-match-hostname 3.4.0.2 beautiful-soup 4.3.1 py27_0 beautifulsoup4 4.3.1 binstar 0.5.3 py27_0 bitarray 0.8.1 py27_1 blaze 0.5.0 np18py27_1 blz 0.6.2 np18py27_0 bokeh 0.4.4 np18py27_1 boto 2.28.0 py27_0 casuarius 1.1 py27_0 cdecimal 2.3 py27_1 chaco 4.4.1 np18py27_0 colorama 0.2.7 py27_0 conda 3.</description>
    </item>
    
    <item>
      <title>了解Apache Accumulo</title>
      <link>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3apache_accumulo/</link>
      <pubDate>Tue, 10 Mar 2015 20:12:08 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3apache_accumulo/</guid>
      <description> Apache Accumulo是一个可靠的、可伸缩的、高性能的排序分布式的Key-Value存储解决方案，提供了基于单元的访问控制以及可在数据处理过程中多个控制点修改键值对的服务器端编程机制。使用GoogleBigTable设计思路，基于ApacheHadoop、Zookeeper和Thrift构建。 Accumulo由美国国家安全局（NSA）于2008年开始研发，2011年捐赠给Apache基金会。Accumulo现已成为Apache基金会的顶级项目，并被评过第三大最受欢迎的NoSQL数据库引擎。 目前，Accumulo技术已经得到美国政府层面的全面认可，NSA已将该技术作为内部组织架构运行的核心部分，在对来源于各方面的庞大海量数据进行分析处理时，所应用的运算程序基本都运行在Accumulo技术上，即NSA“大多数监控和分析应用程序的后台都是Accumulo技术”。基于Hadoop的Accumulo技术已在实质上被视为美国国家安全战略的关键。 据2014年9月份的文章介绍，已经有几十家不同类型的美国企业安装了Accumulo技术系统，其中，美国20强企业中已有3家安装，50强企业中有5家安装，还有不少企业已表示对此有兴趣。 我一碰到KV存储方案，总想跟我用过的GemFire和MongoDB做个比较。vsChart.com - The Comparision Wiki上已经有现成的比较(见参考3和4)，值得学习。
参考  Apache Accumulo官网
 Accumulo: Why The World Needs Another NoSQL Database
 Apache Accumulo vs. GemFire
 Apache Accumulo vs. MongoDB
 NOSQL中文网：Apache Accumulo用户手册
  </description>
    </item>
    
    <item>
      <title>MongoDB 3.0新特性、提升与兼容性改变</title>
      <link>https://mryqu.github.io/post/mongodb_3.0%E6%96%B0%E7%89%B9%E6%80%A7%E6%8F%90%E5%8D%87%E4%B8%8E%E5%85%BC%E5%AE%B9%E6%80%A7%E6%94%B9%E5%8F%98/</link>
      <pubDate>Sat, 07 Mar 2015 22:01:45 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/mongodb_3.0%E6%96%B0%E7%89%B9%E6%80%A7%E6%8F%90%E5%8D%87%E4%B8%8E%E5%85%BC%E5%AE%B9%E6%80%A7%E6%94%B9%E5%8F%98/</guid>
      <description>MONGODB 3.0
WHAT’S NEW IN MONGODB 3.0
Release Notes for MongoDB 3.0
Compatibility Changes in MongoDB 3.0
MongoDB3.0发布&amp;ndash;新特性</description>
    </item>
    
    <item>
      <title>YCSB相关博文</title>
      <link>https://mryqu.github.io/post/ycsb%E7%9B%B8%E5%85%B3%E5%8D%9A%E6%96%87/</link>
      <pubDate>Sat, 03 Jan 2015 11:33:29 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/ycsb%E7%9B%B8%E5%85%B3%E5%8D%9A%E6%96%87/</guid>
      <description>使用YCSB测试MongoDB的微分片性能
使用YCSB测试Mongodb性能的方法简介
NoSQL数据库压力测试工具YCSB使用
使用YCSB对HBase进行测试
性能测试：SequoiaDB vs. MongoDB vs. Cassandra vs. HBase</description>
    </item>
    
    <item>
      <title>MongoDB副本集实践</title>
      <link>https://mryqu.github.io/post/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Sat, 05 Apr 2014 08:18:56 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E5%AE%9E%E8%B7%B5/</guid>
      <description>副本集（ReplicaSet）就是有自动故障恢复功能的主从集群。副本集和主从集群最为明显的区别就是副本集没有固定的“主节点”：整个集群会选取出一个“主节点”，当其不能工作时则变更到其他节点。然而，两者看上去非常相似：副本集总会有一个活跃节点（primary）和一个或多个备份节点（secondary）。副本集中可以有以下类型的节点： - 常规节点（standard）：存储一份完整的数据副本，参与选举投票，有可能成为活跃节点。 - 被动节点（passive）：存储完整的数据副本，参与投票，不能成为活跃节点。 - 仲裁节点（arbiter）：仅参与投票，不接受复制的数据，也不能成为活跃节点。
副本集对数据库管理员和开发者都是非常友好的。副本集的管理是自动化的，无需数据库管理员频繁监控和干预，可以自动提升备份节点成为活跃节点，以确保运转正常。对于开发者而言，仅需为副本集指定一下服务器，驱动程序就会自动找到副本集的节点集群。 每个参与节点（非仲裁节点）都有一个权重，权重值取值范围0-1000，默认值为1。权重为0的节点不能成为活跃节点。活跃节点选举根据高优先级优先、优先级相同时数据较新优先的原则进行比较。应用仅能向活跃节点进行写操作。默认情况下，应用会向活跃节点进行读操作也获取最新数据。如果无需获得最新数据时，可以为了提高读操作吞吐量或减少应用延迟而向备份节点进行读操作。读操作偏好模式如下： - primary - primaryPreferred - secondary - secondaryPreferred - nearestMongoDB命令行提供了下列关于副本集的指令：
&amp;gt; rs.help() rs.status() { replSetGetStatus : 1 } checks repl set status rs.initiate() { replSetInitiate : null } initiates set with default settings rs.initiate(cfg) { replSetInitiate : cfg } initiates set with configuration cfg rs.conf() get the current configuration object from local.system.replset rs.reconfig(cfg) updates the configuration of a running replica set with cfg (disconnects) rs.</description>
    </item>
    
    <item>
      <title>MongoDB主从复制实践</title>
      <link>https://mryqu.github.io/post/mongodb%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 03 Apr 2014 21:53:44 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/mongodb%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%9E%E8%B7%B5/</guid>
      <description>MongoDB主从复制（Master-slave replication）跟副本集（ReplicaSet）相比可以对主MongoDB节点设置多个从节点，并且可以将复制操作限制到特定数据库。但是MongoDB主从复制提供的冗余度更低而且无法自动故障切换，因此一般新的部署都倾向使用副本集而不是主从复制。
实验环境 两个节点中，MongoDB都安装在c:\mongodb目录下且MongoDB配置文件（c:\mongodb\etc\mongo.conf）均为：
systemLog: destination: file path: C:/mongodb/log/mongo.log logAppend: true storage: dbPath: C:/mongodb/data/db journal: enabled: false net: http: enabled: true RESTInterfaceEnabled: true  启动MongoDB 主节点启动命令：
c:\mongodb\bin\mongod.exe --config c:\mongodb\etc\mongo.conf --master --oplogSize=2048  从节点启动命令：
c:\mongodb\bin\mongod.exe --config c:\mongodb\etc\mongo.conf --slave --source 10.120.8.231 --slavedelay 10 --autoresync  主从复制测试 检查主节点 &amp;gt; show dbs; admin (empty) local 8.074GB test 0.078GB &amp;gt; db.isMaster() { &amp;quot;ismaster&amp;quot; : true, &amp;quot;maxBsonObjectSize&amp;quot; : 16777216, &amp;quot;maxMessageSizeBytes&amp;quot; : 48000000, &amp;quot;maxWriteBatchSize&amp;quot; : 1000, &amp;quot;localTime&amp;quot; : ISODate(&amp;quot;2014-04-03T01:47:49.</description>
    </item>
    
    <item>
      <title>使用YCSB测试MongoDB</title>
      <link>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8ycsb%E6%B5%8B%E8%AF%95mongodb/</link>
      <pubDate>Mon, 31 Mar 2014 20:29:01 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8ycsb%E6%B5%8B%E8%AF%95mongodb/</guid>
      <description>YCSB介绍 YCSB（Yahoo! Cloud Serving Benchmark）是雅虎开源的一款用于测试各类云服务/NoSQL/键值对存储的性能基准测试工具。覆盖的测试对象有： - PNUTS - BigTable - HBase - Hypertable - Azure - Cassandra - CouchDB - Voldemort - MongoDB - OrientDB - Infinispan - Dynomite - Redis - GemFire - GigaSpaces XAP - DynamoDB
YCSB项目的目标是提供一个标准的工具用来衡量不同键值对存储或云服务存储的性能。YCSB做了很多优化来提高客户端性能，例如在数据类型上用了最原始的比特数组以减少数据对象本身创建转换所需的时间等。YCSB的几大特性： - 支持常见的数据存储读写操作，如插入，修改，删除及读取 - 多线程支持。YCSB用Java实现，有很好的多线程支持。 - 灵活定义场景文件。可以通过参数灵活的指定测试场景，如100%插入， 50%读50%写等等 - 数据请求分布方式：支持随机，zipfian(只有小部分的数据得到大部分的访问请求）以及最新数据几种请求分布方式 - 可扩展性：可以通过扩展Workload的方式来修改或者扩展YCSB的功能
使用YCSB测试MongoDB 初试YCSB 下载https://github.com/downloads/brianfrankcooper/YCSB/ycsb-0.1.4.tar.gz 并解压缩。执行如下命令查看帮助：接下来开始使用YCSB测试MongoDB2.6，不过这其中遇到一些问题。期望YCSB的下一版本能够解决这些问题。
解决java.lang.ClassNotFoundException:com.yahoo.ycsb.Client问题 执行测试失败： C:\ycsb-0.1.4&amp;gt;python bin/ycsb load mongodb -s -P workloads/workloada java -cp C:\ycsb-0.1.4\core\lib\core-0.1.4.jar:C:\ycsb-0.1.4\gemfire-binding\conf:C:\ycsb-0.1.4\hbase-binding\conf:C:\ycsb-0.1.4\infinispan-binding\conf:C:\ycsb-0.1.4\jdbc-binding\conf:C:\ycsb-0.1.4\mongodb-binding\lib\mongodb-binding-0.1.4.jar:C:\ycsb-0.1.4\nosqldb-binding\conf:C:\ycsb-0.1.4\voldemort-binding\conf com.yahoo.ycsb.Client -db com.yahoo.ycsb.db.MongoDbClient -s -P workloads/workloada -load Exception in thread &amp;ldquo;main&amp;rdquo; java.</description>
    </item>
    
    <item>
      <title>Hello MongoDB Java Driver</title>
      <link>https://mryqu.github.io/post/hello_mongodb_java_driver/</link>
      <pubDate>Sun, 30 Mar 2014 13:50:33 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/hello_mongodb_java_driver/</guid>
      <description>首先需要下载MongoDB JavaDriver，我一开始以为mongo-java-driver-2.9.3.jar是最新版，后来才发现MongoDB JavaDriver下载页面版本排序是按照文件名而不是按照日期排序，其实mongo-java-driver-2.12.0.jar是最新版。因为从版本2.10.0开始提供新的类MongoClient而不是Mongo来连接数据库，所以需要注意所使用的MongoDB Java Driver版本。 Java代码如下：
package com.yqu.mongodb; import java.net.UnknownHostException; import java.util.List; import java.util.Set; import com.mongodb.BasicDBObject; import com.mongodb.DB; import com.mongodb.DBCollection; import com.mongodb.DBCursor; import com.mongodb.DBObject; import com.mongodb.MongoClient; import com.mongodb.MongoClientURI; import com.mongodb.MongoException; public class HelloMongoDB { public static void main(String[] args) { MongoClient mongoClient = null; try { // Since 2.10.0, uses MongoClient // mongoClient = new MongoClient(&amp;quot;localhost&amp;quot;, 27017); String host = &amp;quot;mongodb://localhost:27017&amp;quot;; mongoClient = new MongoClient(new MongoClientURI(host)); showdbs(mongoClient); // MongoDB will create it if database doesn&#39;t exists DB db = mongoClient.</description>
    </item>
    
    <item>
      <title>Windows下MongoDB安装与配置</title>
      <link>https://mryqu.github.io/post/windows%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 30 Mar 2014 07:57:15 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/windows%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid>
      <description>到官网http://www.mongodb.org/downloads下载MongoDB并安装在c:mongodb目录下，安装后需要进行配置才能启动MongoDB。首先创建如下目录： - md c:\mongodb\data - md c:\mongodb\db - md c:\mongodb\log - md c:\mongodb\etc 接着创建MongoDB配置文件：c:\mongodb\etc\mongo.conf
systemLog: destination: file path: C:/mongodb/log/mongo.log logAppend: true storage: dbPath: C:/mongodb/data/db journal: enabled: true net: http: enabled: true RESTInterfaceEnabled: true  通过如下命令启动MongoDB：
C:\mongodb\bin\mongod.exe --config C:\mongodb\etc\mongo.conf  可以通过以下三种方式验证MongoDB是否安装成功： - 访问MongoDB监听端口 http://localhost:27017/ ，确认出现类似信息。- 通过C:\mongodb\bin\mongo.exe登录Javascript shell并使用 - 访问HTTP接口 http://localhost:28017/ 并查看MongoDB服务器信息
在启动MongoDB的窗口通过Ctrl+ C停止MongoDB的运行。 最后通过如下命令将MongoDB配置成Windows服务：
C:\mongodb\bin\mongod.exe --config C:\mongodb\etc\mongo.conf--install  当然也可以通过如下命令手工配置Windows服务：
sc create MongoDB binPath= &amp;quot;C:\mongodb\bin\mongod.exe--config=C:\mongodb\etc\mongo.conf--service&amp;quot; start= demand DisplayName= &amp;quot;MongoDB&amp;quot;  参考 Install MongoDB on Windows</description>
    </item>
    
  </channel>
</rss>