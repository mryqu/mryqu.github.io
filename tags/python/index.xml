<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/python/</link>
    <description>Recent content in Python on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 02 Jul 2018 05:40:10 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[AWS] 安装AWSCLI </title>
      <link>https://mryqu.github.io/post/aws_%E5%AE%89%E8%A3%85awscli/</link>
      <pubDate>Mon, 02 Jul 2018 05:40:10 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/aws_%E5%AE%89%E8%A3%85awscli/</guid>
      <description>想玩玩AWS CLI，就从https://aws.amazon.com/cli/装了一个，但是一执行就是出LookupError: unknown encoding: cp65001错误，查了一下据说是Python2.7导致的。 首先去https://www.python.org/下载了最新的Python3.7.0。然后重新安装AWS CLI，依旧出错，只好卸载。 查看是否安装pip，结果发现没有。根据https://packaging.python.org/tutorials/installing-packages/中的提示下载了get-pip.py，执行python get-pip.py，成功安装好pip。
C:\&amp;gt;pip --version pip 10.0.1 from c:\users\mryqu\appdata\local\programs\python\python37-32\lib\site-packages\pip (python 3.7  最后使用pip安装AWS CLI:
C:\&amp;gt;pip install awscli Collecting awscli Downloading https://files.pythonhosted.org/packages/1b/1b/7446d52820533164965f7e7d08cee70b170c78fbbcbd0c7a11ccb9187be6/awscli-1.15.49-py2.py3-none-any.whl (1.3MB) 100% |████████████████████████████████| 1.3MB 6.6MB/s Collecting docutils&amp;gt;=0.10 (from awscli) Downloading https://files.pythonhosted.org/packages/36/fa/08e9e6e0e3cbd1d362c3bbee8d01d0aedb2155c4ac112b19ef3cae8eed8d/docutils-0.14-py3-none-any.whl (543kB) 100% |████████████████████████████████| 552kB 3.3MB/s Collecting s3transfer&amp;lt;0.2.0,&amp;gt;=0.1.12 (from awscli) Downloading https://files.pythonhosted.org/packages/d7/14/2a0004d487464d120c9fb85313a75cd3d71a7506955be458eebfe19a6b1d/s3transfer-0.1.13-py2.py3-none-any.whl (59kB 100% |████████████████████████████████| 61kB 787kB/s Collecting botocore==1.10.48 (from awscli) Downloading https://files.pythonhosted.org/packages/0b/56/44067a8f0cae5f33007e7cbdbaac67cbd9fa598c733ad25eb8f252288fe9/botocore-1.10.48-py2.py3-none-any.whl (4.4MB 100% |████████████████████████████████| 4.4MB 6.6MB/s Collecting PyYAML&amp;lt;=3.12,&amp;gt;=3.10 (from awscli) Downloading https://files.</description>
    </item>
    
    <item>
      <title>数据科学的战争：R vs Python</title>
      <link>https://mryqu.github.io/post/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E7%9A%84%E6%88%98%E4%BA%89r_vs_python/</link>
      <pubDate>Thu, 14 May 2015 05:48:20 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E7%9A%84%E6%88%98%E4%BA%89r_vs_python/</guid>
      <description>R和Python都是用于数据分析任务的流行编程语言，都有各自的拥拓者和反对者。Python经常作为语法简单易懂的通用编程语言广受赞誉。在人们心中，R的功能是由统计学家开发的，因此具有特定领域优势，例如数据可视化上具有的大量功能。 DataCamp上有一篇帖子Choosing R or Python for data analysis? An infographic以信息图的方式从数据科学和统计的角度详细对比了R和Python这两种编程语言。 </description>
    </item>
    
    <item>
      <title>Python: installing pymongo with Anaconda</title>
      <link>https://mryqu.github.io/post/python_installing_pymongo_with_anaconda/</link>
      <pubDate>Sat, 04 Apr 2015 00:06:03 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/python_installing_pymongo_with_anaconda/</guid>
      <description>在Anaconda发行版Python上通过conda install pymongo安装MongoDBpython驱动，结果失败了，最终通过conda install -c https://conda.binstar.org/anaconda pymongo安装成功。
BinstarBinstar和Anaconda都是同一家的产品，是Continuum Analytics推出的一个包管理服务，托管公开的pip和conda。 安装记录如下：
C:\tools\Anaconda&amp;gt;conda list # packages in environment at C:\tools\Anaconda: # _license 1.1 py27_0 anaconda 2.0.1 np18py27_0 argcomplete 0.6.7 py27_0 astropy 0.3.2 np18py27_0 atom 0.3.7 py27_0 backports.ssl-match-hostname 3.4.0.2 beautiful-soup 4.3.1 py27_0 beautifulsoup4 4.3.1 binstar 0.5.3 py27_0 bitarray 0.8.1 py27_1 blaze 0.5.0 np18py27_1 blz 0.6.2 np18py27_0 bokeh 0.4.4 np18py27_1 boto 2.28.0 py27_0 casuarius 1.1 py27_0 cdecimal 2.3 py27_1 chaco 4.4.1 np18py27_0 colorama 0.2.7 py27_0 conda 3.</description>
    </item>
    
    <item>
      <title>玩一会IPython Notebook</title>
      <link>https://mryqu.github.io/post/%E7%8E%A9%E4%B8%80%E4%BC%9Aipython_notebook/</link>
      <pubDate>Wed, 26 Nov 2014 23:20:58 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%8E%A9%E4%B8%80%E4%BC%9Aipython_notebook/</guid>
      <description>晚上想写两行python代码，懒得打开eclipse，也不想玩SublimeText2，就试用了一下Anaconda带的IPython Notebook。 支持函数自动补全，很多快捷键，功能还真不错！以后打算作为主力用了。
资料： IPython Notebook简介1
ipython notebook——超级强大的工具
第三课 Ipython &amp;amp; Ipython Notebook
IPython: Python at your fingertips</description>
    </item>
    
    <item>
      <title>用Python清理XMind生成的html文件</title>
      <link>https://mryqu.github.io/post/%E7%94%A8python%E6%B8%85%E7%90%86xmind%E7%94%9F%E6%88%90%E7%9A%84html%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sun, 20 Jul 2014 06:42:59 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%94%A8python%E6%B8%85%E7%90%86xmind%E7%94%9F%E6%88%90%E7%9A%84html%E6%96%87%E4%BB%B6/</guid>
      <description>XMind思维导图可以导出成html文件，但是每个Topic都被a标签包着，然后外面再被h1、h2&amp;hellip;h5标题标签包着，看着就难受。此外h1、h2&amp;hellip;h5和p标签都加了class属性，没什么用。 写一段小程序，将XMind生成的html文件进行格式清理。
from bs4 import BeautifulSoup as BeautifulSoup soup = BeautifulSoup(open(&amp;quot;c:/qutemp/123.html&amp;quot;)) for a in soup(&#39;a&#39;): a.parent.string = a.string a.clear() for tag in [&#39;h1&#39;,&#39;h2&#39;,&#39;h3&#39;,&#39;h4&#39;,&#39;h5&#39;,&#39;p&#39;]: for tag in soup(tag): del tag[&#39;class&#39;] print soup  </description>
    </item>
    
    <item>
      <title>lxml.html.soupparser引入BeautifulSoup 4的work-around</title>
      <link>https://mryqu.github.io/post/lxml.md.soupparser%E5%BC%95%E5%85%A5beautifulsoup_4%E7%9A%84work-around/</link>
      <pubDate>Sun, 22 Jun 2014 15:51:50 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/lxml.md.soupparser%E5%BC%95%E5%85%A5beautifulsoup_4%E7%9A%84work-around/</guid>
      <description>想用一下python的xpath功能分析一个html文件，lxml是比较不错的xml/html解析库，lxml功能强大，性能也不错，此外也包含了ElementTree，html5lib ，beautfulsoup 等库。 可惜我的html文件格式不是很严谨，lxml的ElementTree处理不了，就转而想用lxml的beautfulsoup来处理。 结果lxml找不到BeautifulSoup库。
查了一下Anaconda装的库里面明明有Beautiful Soup 4.3.1，感觉很奇怪！! lxml.html.soupparser引入BeautifulSoup 4的work-around 原来Beautiful Soup 3目前已经停止开发，Beautiful Soup 4移植到了BS4。
下面的语句就可以引入Beautiful Soup 4了，可是lxml还是无法引入beautfulsoup。
from bs4 import BeautifulSoup  stackoverflow有一个帖子import error due to bs4 vs BeautifulSoup讲了一个work-around，可以欺骗lxml从而引入beautfulsoup。测试一下，果然工作正常了。
import sys, bs4 sys.modules[&#39;BeautifulSoup&#39;] = bs4 import lxml.html.soupparser as soupparser  </description>
    </item>
    
    <item>
      <title>选择Python科学计算发行版</title>
      <link>https://mryqu.github.io/post/%E9%80%89%E6%8B%A9python%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%8F%91%E8%A1%8C%E7%89%88/</link>
      <pubDate>Sat, 21 Jun 2014 14:12:03 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E9%80%89%E6%8B%A9python%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%8F%91%E8%A1%8C%E7%89%88/</guid>
      <description>最近重装Python，看了一下Python科学计算发行版，打算多玩一下数据处理和数值计算。
Python用于科学计算的一些常用工具和库  IPython-增强的交互环境：支持变量自动补全，自动缩进，支持 bash shell命令，内置了许多很有用的功能和函数 Spyder、Wing IDE或Eclipse/Pydev：集成开发环境 NumPy-数学计算基础库：N维数组、线性代数计算、傅立叶变换、随机数等。 SciPy-数值计算库：线性代数、拟合与优化、插值、数值积分、稀疏矩阵、图像处理、统计等。 SymPy-符号运算 Pandas-数据分析库：数据导入、整理、处理、分析等。 matplotlib-会图库：绘制二维图形和图表 Chaco-交互式图表 OpenCV-计算机视觉库 TVTK-数据的三维可视化 Cython-Python转C的编译器：编写高效运算扩展库的首选工具 BioPython-生物科学  Python科学计算发行版  Python(x,y)当前最新版本:2.7.6.1 (05/30/2014)，支持Windows和Python2.7.6。其库索引列出了所支持的170+Python27库。 WinPython当前最新版本:2.7.6.4和3.3.5.0 (04/2014)，支持Windows和Python2.7.6、3.3.5。其库索引列出了所支持的60+Python27库。其库索引列出了所支持的60+Python33库。 Enthought Canopy（Enthought Python Distribution）当前最新版本:1.4.1 (06/11/2014)，支持Linux, Windows,Mac平台和Python2.7.6。其库索引列出了所支持的150+测试过的Python库。 Anaconda当前最新版本:2.0.1 (06/12/2014)，支持Linux, Windows, Mac平台和Python2.6、2.7、3.3、3.4。其库索引列出了所支持的195+流行Python库。  Sage不是Python发行版，而是一个由Python和Cython实现的开源数学软件系统，将很多已有的（C、C++、Fortran和Python编写的）数学软件包集成到一个通用接口（记事本文档接口和IPython命令行界面），用户只需了解Python，就可以通过接口或包装器(wrapper)使用NumPy、SciPy、matplotlib、Sympy、Maxima、GAP、FLINT、R和其他已有软件包（具体信息见组件列表），完成代数、组合数学、计算数学和微积分等计算。其最初的目标是创造一个“Magma、Maple、Mathematica和MATLAB的开源替代品”。当前最新版本:6.3(08/10/2014)，支持Linux, Windows, Mac平台和Python2.x。
我的选择和推荐 Python(x,y)和WinPython都是开源项目，其项目负责人都是PierreRaybaut。按Pierre自己的说法是“WinPython不是试图取替Python(x,y)，而是出于不同动机和理念：更灵活、易于维护、可移动、对操作系统侵略性更小，但是用户友好性更差、包更少、没有同Windows资源管理器集成。”。参考1里面说Python(x,y)不是很稳定，此外看它目前的更新不是很频繁，确实有可能Pierre后来的工作重心放在WinPython上了。 Canopy和Anaconda是公司推的，带免费版和商业版/插件。这两款发行版也牵扯到一个人，那就是Travis Oliphant。Travis是SciPy的原始作者，同时也是NumPy的贡献者。Travis在2008年以副总裁身份加入Enthought，2012年以总裁的身份离开，创立了一个新公司continuum.io，并推出了Python的科学计算平台Anaconda。Anaconda相对Canopy支持Python的版本更多，对Python新版本支持跟的很紧（Sage不支持Python3.x的理由是因为其依赖的SciPy还不支持Python3，而Anaconda却实现了支持Python3.3和3.4，这就说明问题了），此外其在Linux平台下（通过conda管理）安装更方便。 不言而喻，我最后选择了安装科学计算发行版Anaconda:)
参考 目前比较流行的Python科学计算发行版
《Python科学计算》 清华大学出版社
Re-packaged Python
Scientific computing with Python</description>
    </item>
    
    <item>
      <title>遭遇Python*重复运算符陷阱</title>
      <link>https://mryqu.github.io/post/%E9%81%AD%E9%81%87python%E9%87%8D%E5%A4%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E9%99%B7%E9%98%B1/</link>
      <pubDate>Sat, 18 Jan 2014 18:12:43 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E9%81%AD%E9%81%87python%E9%87%8D%E5%A4%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E9%99%B7%E9%98%B1/</guid>
      <description>在python中有个特殊的符号“*”，可以用做数值运算的乘法算子，也是用作对象的重复算子，但在作为重复算子使用时一定要注意* 重复出来的对象有可能是指向在内存中同一块地址的同一对象。
测试代码：
grid_width=2 grid_height=2 def modify_grid(cells, row, col, val): cells[row][col]=val print cells #testing 1 print &#39;\ntesting 1&#39; cells=[ [88 for col in range(grid_width)] for row in range(grid_height)] print cells modify_grid(cells,0,1,66) #testing 2: In the trap print &#39;\ntesting 2&#39; cells=[[88]*grid_width]*grid_height print cells modify_grid(cells,0,1,66) print &#39;\n&#39; cells=[[&amp;quot;88&amp;quot;]*grid_width]*grid_height print cells modify_grid(cells,0,1,&amp;quot;66&amp;quot;) #testing 3 print &#39;\ntesting 3&#39; cells=[] for idx in range(grid_height): cells.append([88]*grid_width) print cells modify_grid(cells,0,1,66) #testing 4 print &#39;\ntesting 4&#39; cells=[123]*(grid_height*grid_width) print cells cells[1]=321 print cells  结果</description>
    </item>
    
    <item>
      <title>用python分析FM代码和日志</title>
      <link>https://mryqu.github.io/post/%E7%94%A8python%E5%88%86%E6%9E%90fm%E4%BB%A3%E7%A0%81%E5%92%8C%E6%97%A5%E5%BF%97/</link>
      <pubDate>Thu, 07 Nov 2013 21:53:58 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%94%A8python%E5%88%86%E6%9E%90fm%E4%BB%A3%E7%A0%81%E5%92%8C%E6%97%A5%E5%BF%97/</guid>
      <description>学python有一段时间了，学完不用，结果就是很快遗忘。这周分析一些FM代码和日志，终于弃Java转python，自己乐一下！
filterDV t6Found=False with open(&#39;SASFinancialManagement5.4f.log&#39;, &#39;w&#39;) as fdst: with open(&#39;SASFinancialManagement5.4.log&#39;, &#39;r&#39;) as fsrc: for line in fsrc: if t6Found: if &amp;quot;DataValidation&amp;quot; in line: fdst.write(line) else: if &amp;quot;formSetId=436,formId=,tableCode=NewTable6&amp;quot; in line: t6Found=True if not fsrc.closed: fsrc.close() if not fdst.closed: fdst.close()  calcDVDuration import re totalTime=0 with open(&#39;SASFinancialManagement5.4f.log&#39;, &#39;r&#39;) as fsrc: for line in fsrc: if &amp;quot;begin data validation at formSubScope for&amp;quot; in line: m = re.search(&#39;formSetId=.* ]&#39;, line) target = m.group(0) m = re.</description>
    </item>
    
    <item>
      <title>安装Python的simplejson库</title>
      <link>https://mryqu.github.io/post/%E5%AE%89%E8%A3%85python%E7%9A%84simplejson%E5%BA%93/</link>
      <pubDate>Tue, 24 Sep 2013 22:51:08 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%AE%89%E8%A3%85python%E7%9A%84simplejson%E5%BA%93/</guid>
      <description>在Ubuntu下运行一个Python程序，遇到如下问题：ImportError: No module named simplejson。
首先查看一下Python和pip的版本：
python -V pip -V  竟然没有装pip，解决方案如下：
sudo apt-get install python-pip pip2 install simplejson  </description>
    </item>
    
    <item>
      <title>Python安装oauth2库</title>
      <link>https://mryqu.github.io/post/python%E5%AE%89%E8%A3%85oauth2%E5%BA%93/</link>
      <pubDate>Sat, 21 Sep 2013 13:50:50 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/python%E5%AE%89%E8%A3%85oauth2%E5%BA%93/</guid>
      <description>玩一下用python和twitterAPI访问Twitter数据，首先需要安装oauth2库以获得身份验证。pip是PythonPackaging Authority(PyPA)推荐用于安装Python包的工具。首先下载get-pip.py，然后通过下面的命令安装python get-pip.py pip.</description>
    </item>
    
    <item>
      <title>Python dictionary practice</title>
      <link>https://mryqu.github.io/post/python_dictionary_practice/</link>
      <pubDate>Thu, 25 Jul 2013 19:55:43 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/python_dictionary_practice/</guid>
      <description>reverse Dict (Swap Key and Value) &amp;gt;&amp;gt;&amp;gt; a={&amp;quot;a&amp;quot;:123,&amp;quot;b&amp;quot;:222,&amp;quot;c&amp;quot;:30,&amp;quot;d&amp;quot;:6,&amp;quot;e&amp;quot;:1} &amp;gt;&amp;gt;&amp;gt; print a {&#39;a&#39;: 123, &#39;c&#39;: 30, &#39;b&#39;: 222, &#39;e&#39;: 1, &#39;d&#39;: 6} &amp;gt;&amp;gt;&amp;gt; res = dict((v,k) for k,v in a.iteritems()) &amp;gt;&amp;gt;&amp;gt; print res {1: &#39;e&#39;, 6: &#39;d&#39;, 123: &#39;a&#39;, 222: &#39;b&#39;, 30: &#39;c&#39;}  &amp;gt;&amp;gt;&amp;gt; a={&amp;quot;a&amp;quot;:123,&amp;quot;b&amp;quot;:222,&amp;quot;c&amp;quot;:30,&amp;quot;d&amp;quot;:6,&amp;quot;e&amp;quot;:1} &amp;gt;&amp;gt;&amp;gt; print a {&#39;a&#39;: 123, &#39;c&#39;: 30, &#39;b&#39;: 222, &#39;e&#39;: 1, &#39;d&#39;: 6} &amp;gt;&amp;gt;&amp;gt; res = dict(zip(a.values(), a.keys())) &amp;gt;&amp;gt;&amp;gt; print res {1: &#39;e&#39;, 6: &#39;d&#39;, 123: &#39;a&#39;, 222: &#39;b&#39;, 30: &#39;c&#39;}  Top N by Dict Value &amp;gt;&amp;gt;&amp;gt; from collections import Counter &amp;gt;&amp;gt;&amp;gt; a={&amp;quot;a&amp;quot;:123,&amp;quot;b&amp;quot;:222,&amp;quot;c&amp;quot;:30,&amp;quot;d&amp;quot;:6,&amp;quot;e&amp;quot;:1} &amp;gt;&amp;gt;&amp;gt; top_three = Counter(a).</description>
    </item>
    
  </channel>
</rss>