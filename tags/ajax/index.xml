<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ajax on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/ajax/</link>
    <description>Recent content in Ajax on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 05 Aug 2015 05:49:50 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/ajax/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在jQuery AJAX中使用statusCode</title>
      <link>https://mryqu.github.io/post/%E5%9C%A8jquery_ajax%E4%B8%AD%E4%BD%BF%E7%94%A8statuscode/</link>
      <pubDate>Wed, 05 Aug 2015 05:49:50 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%9C%A8jquery_ajax%E4%B8%AD%E4%BD%BF%E7%94%A8statuscode/</guid>
      <description>jQuery.ajax中提供了statusCode设置，以便根据响应状态值进行相应处理。
var data = JSON.stringify({ name: &amp;quot;mryqu&amp;quot;, count: 123 }); $.ajax({ //cache: false, url: &amp;quot;/test&amp;quot;, type: &amp;quot;post&amp;quot;, contentType: &amp;quot;application/json&amp;quot;, dataType: &amp;quot;json&amp;quot;, data: data, beforeSend: function (xhr) { console.log(&amp;quot;beforeSend called&amp;quot;); }, statusCode: { 401: function() { console.log(&amp;quot;statusCode 401 called&amp;quot;); }, 449: function() { console.log(&amp;quot;statusCode 449 called&amp;quot;); } }, error: function (oResult, textStatus, errorThrown) { if (oResult.status !==401 &amp;amp;&amp;amp; oResult.status !==449) { console.log(&amp;quot;error called&amp;quot;); } }, success: function (oResult) { console.log(&amp;quot;success called&amp;quot;); } });  有时候发现statusCode不被调用，所以我更喜欢用下面这种更保险的方式。</description>
    </item>
    
    <item>
      <title>[JavaScript] retrieve data table</title>
      <link>https://mryqu.github.io/post/javascript_retrieve_data_table/</link>
      <pubDate>Wed, 20 Aug 2014 22:06:08 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/javascript_retrieve_data_table/</guid>
      <description>想学学怎么提交一个Form中的Table，放狗出去，结果不够给力。 曾经有很多年Table标签被用作格式对齐的工具，这使搜出来的页面很少讲的是数据表格。 看了看DataTables这个JQuery插件，可以加载和更新数据，但是没有找到存储所有表格数据的功能。 看了看ajaxsubmit，必须有formcontent，此外可以有可选的data。由于表格里有很多行，没想好path的设置问题。 最后还是用JS提取所有表格数据，生成JS数组，通过AJAX post函数发送给服务器侧。 JS侧的代码示例：http://jsfiddle.net/mryqu/d7rubzut/ 服务器侧的用于REST的Spring控制器代码如下：
@RequestMapping(params=&amp;quot;action=test&amp;quot;, method = RequestMethod.POST) public @ResponseBody TestResultVO test(HttpServletRequest request, @ModelAttribute(&amp;quot;tqs&amp;quot;)ArrayList tqs) throws Exception { ...... }  运行结果正常</description>
    </item>
    
    <item>
      <title>[JavaScript] JQuery AJAX在HTTP响应200OK时却调用了errorcallback</title>
      <link>https://mryqu.github.io/post/javascript_jquery_ajax%E5%9C%A8http%E5%93%8D%E5%BA%94200ok%E6%97%B6%E5%8D%B4%E8%B0%83%E7%94%A8%E4%BA%86errorcallback/</link>
      <pubDate>Sun, 25 May 2014 08:02:32 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/javascript_jquery_ajax%E5%9C%A8http%E5%93%8D%E5%BA%94200ok%E6%97%B6%E5%8D%B4%E8%B0%83%E7%94%A8%E4%BA%86errorcallback/</guid>
      <description>运行如下代码时，从结果看操作成功，但是总是调用错误处理回调。
myTest = function(server, lib, table, reqParam, reqInfo, successCallback, errorCallback) { var url = &amp;quot;http://localhost/mytest/&amp;quot; + encodeURIComponent(server) + &amp;quot;/libs/&amp;quot; + encodeURIComponent(lib) + &amp;quot;/tables/&amp;quot; + encodeURIComponent(table); if (reqParam!=undefined &amp;amp;&amp;amp; reqParam) { url += &amp;quot;?reqParam=&amp;quot; + encodeURIComponent(reqParam); } $.ajax({ cache: false, url: url, type: &amp;quot;PUT&amp;quot;, data: JSON.stringify(reqInfo), contentType: &amp;quot;application/json&amp;quot;, success: function (data) { if (successCallback!==undefined &amp;amp;&amp;amp; successCallback) { successCallback(data); } else { console.log(&amp;quot;success:&amp;quot;+JSON.stringify(data)); } }, error: function (xhr, status, error) { if (errorCallback!</description>
    </item>
    
  </channel>
</rss>