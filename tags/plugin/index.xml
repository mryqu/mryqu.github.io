<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Plugin on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/plugin/</link>
    <description>Recent content in Plugin on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 03 Mar 2017 05:57:34 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/plugin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>玩一下uptodate-gradle-plugin插件</title>
      <link>https://mryqu.github.io/post/%E7%8E%A9%E4%B8%80%E4%B8%8Buptodate-gradle-plugin%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Fri, 03 Mar 2017 05:57:34 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%8E%A9%E4%B8%80%E4%B8%8Buptodate-gradle-plugin%E6%8F%92%E4%BB%B6/</guid>
      <description>玩了一下uptodate-gradle-plugin插件，使用这个插件后执行gradle uptodate 可以看到那些库在Maven Central仓库有新版本，用于辅助判断是否需要更新Java库。 我一般不追新库，所以这个插件对我的用处小，看一看玩一玩，仅此而已。</description>
    </item>
    
    <item>
      <title>[Gradle] 列举插件</title>
      <link>https://mryqu.github.io/post/gradle_%E5%88%97%E4%B8%BE%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Mon, 27 Jul 2015 06:17:30 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/gradle_%E5%88%97%E4%B8%BE%E6%8F%92%E4%BB%B6/</guid>
      <description>下列方法可以列举出当前build.gradle牵涉的插件:
project.plugins.each { println it }  </description>
    </item>
    
    <item>
      <title>Gradle Docker Plugin介绍</title>
      <link>https://mryqu.github.io/post/gradle_docker_plugin%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 14 Jul 2015 05:57:33 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/gradle_docker_plugin%E4%BB%8B%E7%BB%8D/</guid>
      <description>gradle-docker-plugin gradle-docker-plugin是由《Gradle实战》作者BenjaminMuschko实现的Gradle插件，用来管理Docker镜像和容器。gradle-docker-plugin实际上包括两个插件： - com.bmuschko.docker-remote-api:提供通过远程API与Docker进行交互的定制任务- com.bmuschko.docker-java-application:为Java应用创建和上传Docker镜像build.gradle buildscript { repositories { jcenter() } dependencies { classpath &#39;com.bmuschko:gradle-docker-plugin:2.4.1&#39; } } apply plugin: &#39;java&#39; apply plugin: &#39;application&#39; apply plugin: &#39;com.bmuschko.docker-java-application&#39; apply plugin: &#39;com.bmuschko.docker-remote-api&#39;  参考 GitHub：bmuschko/gradle-docker-plugin</description>
    </item>
    
    <item>
      <title>Gradle Git Plugin介绍</title>
      <link>https://mryqu.github.io/post/gradle_git_plugin%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 12 Jul 2015 21:15:17 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/gradle_git_plugin%E4%BB%8B%E7%BB%8D/</guid>
      <description>Grgit和gradle-git Git是一个很流行的分布式版本管理工具。能在构建过程中与Git进行交互，可以提供更强大和更一致的结果。
JGit提供了与Git仓库交互的强大JavaAPI。然而，在Groovy上下本使用它会笨重，需要在所要执行的表达式包一堆换七八糟的东东。Grgit是Andre wOberstar实现的JGit封装器，为基于Groovy的工具与Git仓库交互提供了更简洁流畅的API。 gradle-git同样是由Andrew Oberstar实现的一系列Gradle插件： - org.ajoberstar.grgit - 提供一个Grgit实例，允许与Gradle项目所在的Git仓库交互 - org.ajoberstar.github-pages - 向Github仓库的gh-pages分支发布文件 - org.ajoberstar.release-base -提供用于从项目状态和所在Git仓库推断当前项目版本和创建新版本的通用结构 - org.ajoberstar.release-opinion -用于org.ajoberstar.release-base的默认选项，遵从语义版本控制（Semantic Versioning）下面是一个Gradle任务示例，用于从Git仓库克隆项目。
build.gradle buildscript { repositories { mavenCentral() } dependencies { classpath &#39;org.ajoberstar:gradle-git:1.2.0&#39; } } import org.ajoberstar.gradle.git.tasks.* task cloneGitRepo(type: GitClone) { def destination = file(&amp;quot;destination_folder&amp;quot;) uri = &amp;quot;your_git_repo_uri&amp;quot; destinationPath = destination bare = false enabled = !destination.exists() //to clone only once }  参考 GitHub：ajoberstar/gradle-git
GitHub：ajoberstar/grgit</description>
    </item>
    
    <item>
      <title>玩一下gradle-jvmsrc-plugin</title>
      <link>https://mryqu.github.io/post/%E7%8E%A9%E4%B8%80%E4%B8%8Bgradle-jvmsrc-plugin/</link>
      <pubDate>Wed, 27 May 2015 05:51:01 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%8E%A9%E4%B8%80%E4%B8%8Bgradle-jvmsrc-plugin/</guid>
      <description>玩了一下gradle-jvmsrc-plugin插件，使用这个插件后执行gradlecreateJvmSrcDirs可以根据Gradle项目的JVM语言插件（(java、groovy、scala、android等），自动创建默认的源代码、测试和资源包目录。例如： - src/main/resources - src/main/java/ - src/main/groovy/ - src/test/java/ - src/test/groovy/ - src/test/resources
刚上手总是报错，看了一下CreateJvmSourceDirs.groovy，定位到packageToDirectoryPath方法：
* What went wrong: Execution failed for task &#39;:HelloJvmsrc:createJvmSrcDirs&#39;. &amp;gt; character to be escaped is missing  按照如下gradle-jvmsrc-plugin的说明，要配置基础包名。可是真按它介绍的带有.分割的包名就会出错，简单改成&amp;rdquo;com&amp;rdquo;这种没有.分割的包名就可以避免错误。
jvmsrc { packageName &amp;quot;com.mycompany.myproject.mymodule&amp;quot; }  此外，gradle-jvmsrc-plugin对空目录默认生成.gitkeep文件。 总体来说，用处不是很大，可以偷点懒！</description>
    </item>
    
    <item>
      <title>了解一下Gerrit与BitBucket集成</title>
      <link>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8Bgerrit%E4%B8%8Ebitbucket%E9%9B%86%E6%88%90/</link>
      <pubDate>Sun, 17 May 2015 00:18:31 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8Bgerrit%E4%B8%8Ebitbucket%E9%9B%86%E6%88%90/</guid>
      <description>在《Gerrit插件配置》中没有找到有关BitBucket的信息。 通过https://marketplace.atlassian.com/search?q=Gerrit在Atlassian市场搜到几个跟Gerrit相关的控件，不过都是为JIRA/BitBucket/Bambooserve增加类似Gerrit的工作流的功能。 结论就是：目前没法用Gerrit为BitBucket进行代码审查。</description>
    </item>
    
    <item>
      <title>[IntelliJ] 添加Plugin更新URL并安装</title>
      <link>https://mryqu.github.io/post/intellij_%E6%B7%BB%E5%8A%A0plugin%E6%9B%B4%E6%96%B0url%E5%B9%B6%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 05 Dec 2014 18:50:54 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/intellij_%E6%B7%BB%E5%8A%A0plugin%E6%9B%B4%E6%96%B0url%E5%B9%B6%E5%AE%89%E8%A3%85/</guid>
      <description>1) 选择菜单 File -&amp;gt; Setting2) Setting对话框内选择plugins，点击Browse Repositories -&amp;gt; ManageRepositories -&amp;gt; Add Repository添加完所要安装的插件更新URL，然后就可以安装了。</description>
    </item>
    
  </channel>
</rss>