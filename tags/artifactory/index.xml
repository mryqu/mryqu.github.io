<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artifactory on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/artifactory/</link>
    <description>Recent content in Artifactory on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 30 Jun 2015 06:28:36 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/artifactory/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>尝试Artifactory</title>
      <link>https://mryqu.github.io/post/%E5%B0%9D%E8%AF%95artifactory/</link>
      <pubDate>Tue, 30 Jun 2015 06:28:36 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%B0%9D%E8%AF%95artifactory/</guid>
      <description>Artifactory简介 首先，JFrogArtifactory是统一构件仓库管理器，全面支持任何语言或技术创建的软件包。Artifactory是一个适合企业的仓库管理器，支持安全、集群和高可用的Docker注册。与所有主流CI/CD和DevOps工具进行集成，Artifactory提供了端到端的自动化的解决方案用以追踪从开发阶段到生产环境阶段中的构件。 安装Artifactory 在https://www.jfrog.com/open-source/下载开源版的jFrogArtifactory，按照JFrog Artifactory用户指南即可轻松安装和使用。 发布构件 使用Gradle构建脚本生成器 gradle.properties artifactory_contextUrl=http://localhost:8081/artifactory artifactory_user=admin artifactory_password=password group = com.yqu version = 0.1.0-SNAPSHOT description = Hello artifactory  build.gradle buildscript { repositories { maven { url &amp;quot;https://plugins.gradle.org/m2/&amp;quot; } } dependencies { //Check for the latest version here: // http://plugins.gradle.org/plugin/com.jfrog.artifactory classpath &amp;quot;org.jfrog.buildinfo:build-info-extractor-gradle:+&amp;quot; } } apply plugin: &#39;java&#39; apply plugin: &#39;eclipse&#39; apply plugin: &#39;idea&#39; apply plugin: &#39;maven-publish&#39; apply plugin: &amp;quot;com.jfrog.artifactory&amp;quot; jar { baseName = &#39;HelloArtifactory&#39; } artifacts { archives jar } publishing { publications { maven { from components.</description>
    </item>
    
    <item>
      <title>了解构件仓库管理器Artifactory和Nexus</title>
      <link>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3%E6%9E%84%E4%BB%B6%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86%E5%99%A8artifactory%E5%92%8Cnexus/</link>
      <pubDate>Wed, 13 May 2015 06:07:11 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3%E6%9E%84%E4%BB%B6%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86%E5%99%A8artifactory%E5%92%8Cnexus/</guid>
      <description>使用Maven，可以从Maven中央仓库下载所需要的构件（artifact），但这通常不是一个好的做法，一般是在企业内部架设一个Maven仓库服务器，在代理远程仓库的同时维护本地仓库，以节省带宽和时间。企业仓库管理器一般可以提供高并发访问、浏览和查询、报表、访问控制、备份、对其他仓库进行代理、RESTAPI等特性 了解一下构件仓库管理器，市场上最好的是JFrog的Artifactory和Sonatype的Nexus，而且这两个产品既有商业版也有免费社区版。 以Artifactory为例，Ant+Ivy、Maven和Gradle这些构建工具都可以自动下载Artifactory里的构件（artifact），此外Jenkins、Bamboo等CI工具也可以通过构建工具将生成的构件（artifact）部署到Artifactory上。 如果将构建结果部署到Artifactory，需要对Maven构建增加如下选项：
deploy -DaltDeploymentRepository=snapshots::default::http://svcartifact.yqu.com:8081/artifactory/snapshots  如果将release构建结果部署到Artifactory，需要对Maven构建增加如下选项：
deploy -DaltDeploymentRepository=release::default::http://svcartifact.yqu.com:8081/artifactory/release  或者在pom.xml中内嵌distributionManagement： 最近网上有一个不错的帖子 Maven Repository Manager Feature Matrix，对比了Archiva、Artifactory和Nexus的功能和价格，可供有需要做Maven仓库管理器技术选型的同学借鉴。
参考 JFrog Artifactory官网
Sonatype Nexus官网
Artifactory – 1 Min Setup
Apache Maven Deploy Plugin</description>
    </item>
    
  </channel>
</rss>