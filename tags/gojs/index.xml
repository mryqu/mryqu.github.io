<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gojs on Mryqu's Notes</title><link>https://mryqu.github.io/tags/gojs/</link><description>Recent content in gojs on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 10 Apr 2015 05:50:49 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/gojs/index.xml" rel="self" type="application/rss+xml"/><item><title>GoJS国际化和本地化支持</title><link>https://mryqu.github.io/post/gojs%E5%9B%BD%E9%99%85%E5%8C%96%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%94%AF%E6%8C%81/</link><pubDate>Fri, 10 Apr 2015 05:50:49 +0000</pubDate><guid>https://mryqu.github.io/post/gojs%E5%9B%BD%E9%99%85%E5%8C%96%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%94%AF%E6%8C%81/</guid><description>查了一下GoJS国际化支持文档，藏的还挺深，放在GoJS 部署里了。
GoJS应用可以显示非拉丁语文本。示例可见Japanese Family Tree. GoJS不操作货币值、日期值或地址，因此对这些数据类型没有本地化问题；GoJS不包含任何自己的图标（图像）或光标。 GoJS不显示任何内建文本字符串，因此无需转换工作。用于往控制台输出的错误和告警消息仅用于程序员调试，而不会面向最终用户。当读写JSON、几何路径字符串或CSS颜色时，其中的数值读写仅用于内部使用且为非本地化格式。 所有用户可见文本都完全在程序员的控制之下。为了本地化，可以很方便地使用Binding中的转换函数。TextEditingTool使用HTMLTextArea元素实现原地文本输入和编辑，从而利用浏览器对输入法编辑器的支持。
GoJS不像OpenUI5那样根据Locale相应从I18Nproperties文件获取本地化文本，而是通过下列方式提供国际化和本地化支持：
提供显示非拉丁语文本的能力 将自身摘出来，确保自身实现没有国际化和本地化的要求 将一切国际化的工作推出去，程序员可以直接设置国际化显示文本，也可以实现Binding(targetprop,sourceprop, conv)中的转换工具方法在客户端进行本地化。</description></item><item><title>GoJS中的类</title><link>https://mryqu.github.io/post/gojs%E4%B8%AD%E7%9A%84%E7%B1%BB/</link><pubDate>Thu, 09 Apr 2015 06:06:24 +0000</pubDate><guid>https://mryqu.github.io/post/gojs%E4%B8%AD%E7%9A%84%E7%B1%BB/</guid><description>GoJS中的类 GoJS API文档介绍了GoJS中的类，不过在调试GoJS时发现有3个类不是通过go对象访问的。此外有14个类有介绍，但没有显示在左侧导航栏里。GoJS的很多类、方法和属性名都是经过混淆的，不过起码这一层还是很好对上号的。 GoJS类图</description></item><item><title>GoJS BPMN元素界面实现分析</title><link>https://mryqu.github.io/post/gojs_bpmn%E5%85%83%E7%B4%A0%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</link><pubDate>Wed, 11 Mar 2015 20:10:35 +0000</pubDate><guid>https://mryqu.github.io/post/gojs_bpmn%E5%85%83%E7%B4%A0%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</guid><description>GoJS BPMN里面的BPMN元素采用过不是PNG/JPEG这样的静态图标，而是通过GoJS在Cavas绘出来的。 由BPMN.js可知，一个BPMN元素是一个go.Node，内部大致包含go.Panel、go.Shape、go.TextBlock等对象，用于绘制外层的正方形、填充内部颜色、添加图标和文字。 如果创建自己定制的BPMN元素，最麻烦的就是图标了。现在我来看一下GoJS BPMN扩展里面的图标是怎么保存和绘制的。 GoJS BPMN扩展里面大部分的图标都已经在go.js里面以源代码的形式定义了，只有四个是在BPMN.js里面通过go.Shape.defineFigureGenerator方法定制的，分别是Empty、Annotation、BpmnTaskManual和BpmnTaskService。这四个图标的内容是GoJS geometry的格式保存的。 所有这些图标可以通过与go.Shape的figure进行绑定，由GoJS驱动完成底层绘制。我自己做了一个简单样例，对这些内嵌图标和BPMN定制图标稍微玩了点花样 http://jsfiddle.net/mryqu/mywy0nhz/ 显示效果如下：</description></item><item><title>GoJS对浏览器和移动设备的支持</title><link>https://mryqu.github.io/post/gojs%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8C%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E7%9A%84%E6%94%AF%E6%8C%81/</link><pubDate>Wed, 04 Mar 2015 19:47:40 +0000</pubDate><guid>https://mryqu.github.io/post/gojs%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8C%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E7%9A%84%E6%94%AF%E6%8C%81/</guid><description>在其官网上没有发现GoJS对浏览器和移动设备的支持的详细报告，仅在http://www.nwoods.com/products/gojs/ 有粗略介绍：
GoJS takes advantage of the HTML Canvas to supporthigh-performance diagrams. For creating static documents andprintable resources, GoJS supports exporting Diagrams to images and SVG.
GoJS supports all modern browsers (IE9+), including mobilebrowsers.</description></item><item><title>Activiti与GoJS BPMN支持的BPMN元素对比</title><link>https://mryqu.github.io/post/activiti%E4%B8%8Egojs_bpmn%E6%94%AF%E6%8C%81%E7%9A%84bpmn%E5%85%83%E7%B4%A0%E5%AF%B9%E6%AF%94/</link><pubDate>Tue, 03 Mar 2015 23:00:11 +0000</pubDate><guid>https://mryqu.github.io/post/activiti%E4%B8%8Egojs_bpmn%E6%94%AF%E6%8C%81%E7%9A%84bpmn%E5%85%83%E7%B4%A0%E5%AF%B9%E6%AF%94/</guid><description>首先抱怨一下,GoJS BPMN扩展中有两个图标和标题是一样的,我看了又看还是分不清.</description></item><item><title>浏览器的本地存储在GoJS BPMN样例中的使用</title><link>https://mryqu.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%9C%A8gojs_bpmn%E6%A0%B7%E4%BE%8B%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 02 Mar 2015 20:06:19 +0000</pubDate><guid>https://mryqu.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%9C%A8gojs_bpmn%E6%A0%B7%E4%BE%8B%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>GoJS BPMN样例中可以存储BPMN模型，它采用的存储媒体是浏览器的本地存储。Web Storage(W3C WebApps Working Group)中定义了如下的Storage接口：
interface Storage { readonly attribute unsigned long length; DOMString key(unsigned long index); getter DOMString getItem(DOMString key); setter creator void setItem(DOMString key, DOMString value); deleter void removeItem(DOMString key); void clear(); }; GoJS BPMN样例采用的方法如下：
function checkLocalStorage() { return (typeof (Storage) !== &amp;#34;undefined&amp;#34;) &amp;amp;&amp;amp; (window.localStorage !== undefined); } window.localStorage.setItem(key, value) window.localStorage.getItem(key) window.localStorage.removeItem(key) 我的测试是存储一个名为yqu_GoJSBPMN_Samp1的模型。 如果想清除我的小测试所用的本地存储，可以通过chrome://settings/cookies#cont页面来完成： 参考 MDN：DOM Storage guide DOM Storage</description></item><item><title>Activiti Modeler中sid生成机制</title><link>https://mryqu.github.io/post/activiti_modeler%E4%B8%ADsid%E7%94%9F%E6%88%90%E6%9C%BA%E5%88%B6/</link><pubDate>Sat, 28 Feb 2015 19:28:15 +0000</pubDate><guid>https://mryqu.github.io/post/activiti_modeler%E4%B8%ADsid%E7%94%9F%E6%88%90%E6%9C%BA%E5%88%B6/</guid><description>昨天跟同事说Activiti Modeler中的sid比GoJS中的元素ID讲究，估计是由时戳和随机数混合生成的。 今天看了一下，发现原来就是一个纯随机数。
[tomcat]\webapps\activiti-explorer\editor-app\editor.html里对类为stencil-item的HTML元素设置的拖拽处理函数在[tomcat]\webapps\activiti-explorer\editor-app\stencil-controller.js中定义。 sid生成方法在[tomcat]\webapps\activiti-explorer\editor-app\editor\oryx.debug.js中定义。
ORYX.Editor.provideId = function() { var res=[], hex=&amp;#39;0123456789ABCDEF&amp;#39;; for(var i=0; i&amp;lt;36; i ) res[i]=Math.floor(Math.random()*0x10); res[14]=4; res[19]=(res[19] &amp;amp; 0x3) | 0x8; for(var i=0; i&amp;lt;36; i ) res[i] = hex[res[i]]; res[8] = res[13] = res[18] = res[23] = &amp;#39;-&amp;#39;; return &amp;#34;sid-&amp;#34; res.join(&amp;#39;&amp;#39;); }; 当然，GoJSBPMN样例中的ID就更简单的不得了，全都是预定义的简单数字。例如，userTask的key预定义为7，当一个BPMN元素加入GoJSmodel时，GoJS会让model中的key变成唯一的（代码混淆过，我猜估计没混淆前叫makeUniqueKeyFunction）。在我的小测试中，第一个userTask的key仍然为7，第二个userTask的key被改成了-3。 感觉要是借鉴MongoDB的ObjectId生成机制，ID的冲撞概率可能会更低。</description></item><item><title>将GoJS和Activiti Explorer熬成一锅粥</title><link>https://mryqu.github.io/post/%E5%B0%86gojs%E5%92%8Cactiviti_explorer%E7%86%AC%E6%88%90%E4%B8%80%E9%94%85%E7%B2%A5/</link><pubDate>Fri, 27 Feb 2015 20:05:26 +0000</pubDate><guid>https://mryqu.github.io/post/%E5%B0%86gojs%E5%92%8Cactiviti_explorer%E7%86%AC%E6%88%90%E4%B8%80%E9%94%85%E7%B2%A5/</guid><description>熬粥时，一开始创建一个跟editor-app平行的独立目录gojs-editor-app，结果我的Chrome浏览器报“Resourceinterpreted as stylesheet but transferred with MIME typetext/html”错误，GoJS的所有Javascript和stylesheet文件(例如BPMN.js和BPMN.css)都被加了料从Tomcat发给浏览器变成了html格式。 看了下面两个帖子，没有丝毫头绪： http://stackoverflow.com/questions/3467404/chrome-says-resource-interpreted-as-script-but-transferred-with-mime-type-tex
thttp://stackoverflow.com/questions/22631158/resource-interpreted-as-stylesheet-but-transferred-with-mime-type-text-html-see
搜了一下ActivitiExplorer的配置，看到org.activiti.explorer.filter.ExplorerFilter里有六个路径(&amp;quot;/ui&amp;quot;、&amp;quot;/VAADIN&amp;quot;、&amp;quot;/modeler.html&amp;quot;、&amp;quot;/editor-app&amp;quot;、&amp;quot;/service&amp;quot;、&amp;quot;/diagram-viewer&amp;quot;)走了特殊的过滤器。只好将GoJS的内容都转到Activiti已有的editor-app目录，这下齐活了。</description></item><item><title>试用GoJS BPMN生成Activiti支持的process.bpmn.xml</title><link>https://mryqu.github.io/post/%E8%AF%95%E7%94%A8gojs_bpmn%E7%94%9F%E6%88%90activiti%E6%94%AF%E6%8C%81%E7%9A%84process.bpmn.xml/</link><pubDate>Thu, 26 Feb 2015 16:37:24 +0000</pubDate><guid>https://mryqu.github.io/post/%E8%AF%95%E7%94%A8gojs_bpmn%E7%94%9F%E6%88%90activiti%E6%94%AF%E6%8C%81%E7%9A%84process.bpmn.xml/</guid><description>我在Activiti中建立一个简单的仅有startEvent、userTask和endEvent的BPMN模型，导出的process.bpmn.xml内容如下： 前一博文玩玩GoJS BPMN样例中我给出了类似 BPMN模型的JSON数据。通过分析可知，除了两者的ID生成机制不同（GoJSBPMN生成的ID太简单，很容易重复），完全可以通过GoJS的JSON数据构造上面的process.bpmn.xml文件内容。 试了一下在Javascript中生成上面的process.bpmn.xml文档，大致可行。从MDN查到的资料可知，仅支持IE9+浏览器。不支持低版本IE浏览器，估计现在不算什么问题。目前生成的XML文档有些瑕疵，第一个使用createElement_x方法创建的节点会自动添加命名空间xmlns=http://www.w3.org/1999/xhtml，但是应该可以避免。
|Chrome|Firefox (Gecko)|Internet Explorer|Opera|Safari |&amp;mdash;&amp;ndash; |(Yes)|1.0 (1.7 or earlier)|9.0|(Yes)|(Yes)
JS代码如下：</description></item><item><title>玩玩GoJS BPMN样例</title><link>https://mryqu.github.io/post/%E7%8E%A9%E7%8E%A9gojs_bpmn%E6%A0%B7%E4%BE%8B/</link><pubDate>Wed, 25 Feb 2015 19:50:09 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%8E%A9%E7%8E%A9gojs_bpmn%E6%A0%B7%E4%BE%8B/</guid><description>玩一玩GoJS，GoJS是Northwoods Software的产品。Northwoods Software创立于1995年，专注于交互图控件和类库。旗下四款产品：
GoJS：用于在HTML上创建交互图的纯javaSCript库，GoJS支持复杂的模板定义和数据绑定。 GoDiagram：用于WinForms的.NET图控件。 GoXam：用于WPF/Silverlight的图控件。 JGo：用于Swing/SWT中创建交互图的java库。 试了一下GoJS的BPMN样例，很容易导出SVG或PNG/JPEG等格式的图像数据。其中：
由于GoJS是经过代码混淆的，不能对makeSVG方法进行确定的分析，大概是采用HTMLCanvasElement.getContext(&amp;lsquo;2d&amp;rsquo;).drawImage(&amp;hellip;).getImageData(&amp;hellip;)获得的 makeImage和makeImageData方法通过HTMLCanvasElement.toDataURL()方法实现的 在控制台执行window.myDiagram.model.toJson()，返回如下结果：
{ &amp;#34;class&amp;#34;: &amp;#34;go.GraphLinksModel&amp;#34;, &amp;#34;linkFromPortIdProperty&amp;#34;: &amp;#34;fromPort&amp;#34;, &amp;#34;linkToPortIdProperty&amp;#34;: &amp;#34;toPort&amp;#34;, &amp;#34;nodeDataArray&amp;#34;: [ { &amp;#34;category&amp;#34;: &amp;#34;activity&amp;#34;, &amp;#34;item&amp;#34;: &amp;#34;User task&amp;#34;, &amp;#34;key&amp;#34;: 7, &amp;#34;loc&amp;#34;: &amp;#34;388.33645784919577 140.35229369949943&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;User Task&amp;#34;, &amp;#34;taskType&amp;#34;: 2, &amp;#34;boundaryEventArray&amp;#34;: [ ], &amp;#34;size&amp;#34;: &amp;#34;120 80&amp;#34; }, { &amp;#34;category&amp;#34;: &amp;#34;event&amp;#34;, &amp;#34;item&amp;#34;: &amp;#34;End&amp;#34;, &amp;#34;key&amp;#34;: 104, &amp;#34;loc&amp;#34;: &amp;#34;569.86545617508 140.90913111767696&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;End&amp;#34;, &amp;#34;eventType&amp;#34;: 1, &amp;#34;eventDimension&amp;#34;: 8 }, { &amp;#34;category&amp;#34;: &amp;#34;event&amp;#34;, &amp;#34;item&amp;#34;: &amp;#34;start&amp;#34;, &amp;#34;key&amp;#34;: 101, &amp;#34;loc&amp;#34;: &amp;#34;183.42028795985397 135.34075693590137&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;Start&amp;#34;, &amp;#34;eventType&amp;#34;: 1, &amp;#34;eventDimension&amp;#34;: 1 } ], &amp;#34;linkDataArray&amp;#34;: [ { &amp;#34;from&amp;#34;: 101, &amp;#34;to&amp;#34;: 7, &amp;#34;fromPort&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;toPort&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;points&amp;#34;: [ 204.</description></item></channel></rss>