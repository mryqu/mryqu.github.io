<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Handling on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/handling/</link>
    <description>Recent content in Handling on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 13 Jan 2016 05:54:56 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/handling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>处理Twitter API访问速率超限错误</title>
      <link>https://mryqu.github.io/post/%E5%A4%84%E7%90%86twitter_api%E8%AE%BF%E9%97%AE%E9%80%9F%E7%8E%87%E8%B6%85%E9%99%90%E9%94%99%E8%AF%AF/</link>
      <pubDate>Wed, 13 Jan 2016 05:54:56 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%A4%84%E7%90%86twitter_api%E8%AE%BF%E9%97%AE%E9%80%9F%E7%8E%87%E8%B6%85%E9%99%90%E9%94%99%E8%AF%AF/</guid>
      <description>与处理Facebook API访问速率超限错误需要对比好几个Facebook错误代码相比，Twitter的API访问速率超限错误只需要处理HTTP响应代码429即可，很轻松。</description>
    </item>
    
    <item>
      <title>处理Facebook API访问速率超限错误</title>
      <link>https://mryqu.github.io/post/%E5%A4%84%E7%90%86facebook_api%E8%AE%BF%E9%97%AE%E9%80%9F%E7%8E%87%E8%B6%85%E9%99%90%E9%94%99%E8%AF%AF/</link>
      <pubDate>Tue, 12 Jan 2016 06:20:52 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%A4%84%E7%90%86facebook_api%E8%AE%BF%E9%97%AE%E9%80%9F%E7%8E%87%E8%B6%85%E9%99%90%E9%94%99%E8%AF%AF/</guid>
      <description>对于下列Facebook通用错误，我个人觉的#2、#4、#9、#17、#18和#32错误都可以向客户端报告FacebookAPI访问速率超限，至于#5不确定。
|Error number|PHP Constant name|Error description|Generated by methods |&amp;mdash;&amp;ndash; |2|API_EC_SERVICE|Service temporarily unavailable|(all) |4|API_EC_TOO_MANY_CALLS|Application request limit reached|(all) |5|API_EC_BAD_IP|Unauthorized source IP address|(all) |9|API_EC_RATE|User is performing too many actions| |17|API_EC_USER_TOO_MANY_CALLS|User request limit reached| |18|API_EC_REQUEST_RESOURCES_EXCEEDED|This API call could not be completed due to resourcelimits| |32||Page request limit reached|
参考 Rate Limiting on the Facebook Graph API
Facebook API Error Codes for Developers</description>
    </item>
    
    <item>
      <title>SocialMedia Error Handling</title>
      <link>https://mryqu.github.io/post/socialmedia_error_handling/</link>
      <pubDate>Sun, 10 Jan 2016 05:57:41 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/socialmedia_error_handling/</guid>
      <description>Facebook - Handling Errors https://developers.facebook.com/docs/graph-api/using-graph-api#errors
Marketing API Error Codes https://developers.facebook.com/docs/marketing-api/error-reference
Games Payments Error Codes https://developers.facebook.com/docs/games_payments/fulfillment/errorcodes
List of Error Codes for Facebook&amp;rsquo;s API Facebook曾经有过错误代码列表，后来不提供了。这里提供完整错误代码列表。 http://www.fb-developers.info/tech/fb_dev/faq/general/gen_10.html
Twitter Error Codes &amp;amp; Responses https://dev.twitter.com/overview/api/response-codes
Google Analytics Core Reporting API - Standard Error Responses https://developers.google.com/analytics/devguides/reporting/core/v3/coreErrors#standard_errors
YouTube YouTube API v2.0 – Understanding API Error Responses https://developers.google.com/youtube/2.0/developers_guide_protocol_error_responses
Youtube Data API - Errors https://developers.google.com/youtube/v3/docs/errors</description>
    </item>
    
    <item>
      <title>cURL错误处理</title>
      <link>https://mryqu.github.io/post/curl%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Thu, 07 Jan 2016 06:08:54 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/curl%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>cURL执行错误分为两种： - 通过curl_easy_perform函数执行请求结果，返回值不是CURLE_OK。错误信息除了可以对照CURLcode定义查看，也可以通过设置CURLOPT_ERRORBUFFER设置错误缓存区获得人类易读的错误文字信息。范例见https://curl.haxx.se/libcurl/c/CURLOPT_ERRORBUFFER.html
 curl = curl_easy_init(); if(curl) { CURLcode res; char errbuf[CURL_ERROR_SIZE]; curl_easy_setopt(curl, CURLOPT_URL, &amp;quot;http://example.com&amp;quot;); curl_easy_setopt(curl, CURLOPT_ERRORBUFFER, errbuf); errbuf[0] = 0; res = curl_easy_perform(curl); if(res != CURLE_OK) { size_t len = strlen(errbuf); fprintf(stderr, &amp;quot;\nlibcurl: (%d) &amp;quot;, res); if(len) fprintf(stderr, &amp;quot;%s%s&amp;quot;, errbuf, ((errbuf[len - 1] != &#39;\n&#39;) ? &amp;quot;\n&amp;quot; : &amp;quot;&amp;quot;)); else fprintf(stderr, &amp;quot;%s\n&amp;quot;, curl_easy_strerror(res)); } }   另一种是curl_easy_perform返回CURLE_OK，但是HTTP响应代码为400及以上的整数。HTTP响应代码可以通过curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE,&amp;amp;httpCode)获得错误消息需要通过curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION,curlCallback)获得消息体后解析而得。  </description>
    </item>
    
  </channel>
</rss>