<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>机器学习 on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 机器学习 on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 27 Oct 2015 06:05:39 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>八卦一下H2O</title>
      <link>https://mryqu.github.io/post/%E5%85%AB%E5%8D%A6%E4%B8%80%E4%B8%8Bh2o/</link>
      <pubDate>Tue, 27 Oct 2015 06:05:39 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%85%AB%E5%8D%A6%E4%B8%80%E4%B8%8Bh2o/</guid>
      <description>H2O的对象是需要可伸缩的快速机器学习的数据科学家和业务分析师。H2O是开源预测性分析平台。H2O提供非凡的数学能力、高性能并发处理及无比的易用性。H2O处理数据科学语言，支持R、Python、Scala、Java和一套健壮的RESTAPI。智能业务应用由H2O的NanoFastTM评分引擎驱动。
H2O介绍 H2O使采用数学和预测性分析解决当今最有挑战的业务问题成为可能。它具有其他机器学习平台当前所没有的功能：
 最佳开源技术 –享受开源技术大数据科学所带来的自由。H2O通过最流行的开源产品ApacheTMHadoop和SparkTM使客户更加灵活方便地解决最有挑战性数据问题。 易于使用的WebUI和熟悉的接口 –使用H2O的基于Web的用户界面或熟悉的编程环境（例如R、Java、Scala、Python、JSON）可以快速设置并入门。 支持所有通用数据库和文件类型 – 对微软Excel、RStudio、Tableau等软件内的大数据可以轻松浏览和建模。能够连接HDFS、S3、SQL和NoSQL数据源。可在任何地方安装和部署。 海量大数据分析 –在全部数据集而不是小样本上训练模型，通过H2O快速in-memory分布平行处理实时迭代和开发模型。 实时数据评分 –为了精确预测，使用Nanofast评分引擎可在任何环境以纳秒级对模型进行数据评分。它比当前市场上最接近的技术（说的是谁？）在评分和预测上快十倍。  H2O.ai公司 h2o.ai公司（之前叫0xdata?）于2011年(Linkedin显示2012年？)成立于加州山景城，目前员工不到50人。 H2O.ai公司的创始人有两位：SriSatish Ambati和Cliff Click。 参考 H2O.ai公司网站
GitHub：h2oai/h2o-3
Oxdata研发H2O，打造大数据新蓝图
Oxdata获890万美元融资：推H2O开源机器学习项目</description>
    </item>
    
    <item>
      <title>使用微软的机器学习云Azure ML进行预测分析</title>
      <link>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8%E5%BE%AE%E8%BD%AF%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BA%91azure_ml%E8%BF%9B%E8%A1%8C%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 23 Sep 2014 23:01:08 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8%E5%BE%AE%E8%BD%AF%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BA%91azure_ml%E8%BF%9B%E8%A1%8C%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90/</guid>
      <description>今天看了一个帖子Predictive Analytics with Microsoft Azure Machine Learning。尽管机器学习已经是一项历史悠久而且应用广泛的技术，微软以云服务形式推出希望获得一些市场。AzureML通过拖拽操作在界面上组织数据清理、训练模型、模型打分和评估，最后可以生成C#、R或Python代码。 对云数据进行数据分析，除了用Hadoop/Spark等技术自己搭积木开发实现外，这种通用分析产品还不够丰富。期望早日看到各厂家纷纷推出成熟的旗舰产品那一天，我司（SAS）加油！：）</description>
    </item>
    
    <item>
      <title>CRAN任务视图：机器学习与统计学习（2014-05-31版）</title>
      <link>https://mryqu.github.io/post/cran%E4%BB%BB%E5%8A%A1%E8%A7%86%E5%9B%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A02014-05-31%E7%89%88/</link>
      <pubDate>Tue, 03 Jun 2014 06:24:06 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/cran%E4%BB%BB%E5%8A%A1%E8%A7%86%E5%9B%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A02014-05-31%E7%89%88/</guid>
      <description>我在CRAN任务视图使用一帖中学习CRAN中当前所有的任务视图，本帖学习机器学习与统计学习的任务视图，其原链接如下：http://cran.r-project.org/web/views/MachineLearning.html 机器学习是计算机科学和统计学的边缘交叉领域，R关于机器学习的扩展包大概包括以下几个方面： - 神经网络(Neural Networks) : 单隐含层神经网络在nnet 包(与R基础包一同发布)中实现。RSNNS 包提供斯图加特神经网络仿真软件(SNNS)的使用接口。 - 递归拆分（Recursive Partitioning） : 根据CART书中算法完成的用于回归、分类和生存分析的树形结构模型在rpart 包(与R基础包一同发布)和tree包中实现。rpart包推荐用于计算与分类回归树相类似的树结构。 Weka 拥有很多拆分算法的工具包，RWeka提供了Weka的C4.5（J4.8变种）和M5实现的使用接口。Cubist包通过在叶端使用线性回归模型、基于实例修正、boosting拟合基于规则的模型（与树类似）。C50包可以拟合C5.0分类树和基于规则的模型及其boosting版本。party包有两个带有无偏变量选择和统计停止准则的递归拆分算法实现。ctree()函数基于非参数条件推理过程，用于测试响应变量和每个输入变量的无关性；而mob()函数能用于拆分参数模型。party包也提供了用于可视化二叉树和响应变量节点分布的可扩展工具。用于多元响应变量的rpart改进版本在mvpart包提供。对于二元输入变量问题，LogicReg包实现了逻辑回归。maptree包提供了树的可视化工具。用于通过随机效应对纵向数据进行建模的树由REEMtree包提供。RPMM提供了对混合模型(Beta和高斯混合)的拆分。用于表达树的计算基础架构、预测和可视化的统一方法在partykit包内实现。oblique.tree包提供了用于分类数据的斜树。 - 随机森林（Random Forests） : randomForest包提供了用于回归和分类的随机森林算法参考实现。ipred包提供了用于回归、分类和生存分析的bagging（bootstrapaggregating的缩写）算法及通过集成学习对多个模型进行组合的bundling算法。此外，基于条件推断决策树（conditional inferencetree）的随机森林变体（其响应变量可以以任意比例估量）在party包中实现。randomSurvivalForest包提供用于删失数据的随机生存森林算法。分位数回归森林 quantregForest通过随机森林方式对探索变量的数值响应变量分位数进行回归。varSelRF和Boruta包专注于通过随机森林进行变量选择。对于大数据集，bigrf包以并行方式计算随机森林并使用大的内存对象存储数据。 - 正规化和收缩方法（Regularized and ShrinkageMethods） : 参数评估受限的回归模型可以使用lasso2和lars包进行拟合。grplasso包提供了群体LASSO（LeastAbsolute Shrinkage and Selection Operator）惩罚模型; grpreg包实现了一些其他群体惩罚模型，例如群体MCP（MinimaxConcave Penalty）和群体SCAD（Smoothly Clipped Absolute DeviationPenalty）。用于广义线性模型和Cox模型的L1正规化路径可以通过glmpath包里的函数获得，用于线性回归、逻辑回归和多项式回归模型的整个lasso或elastic-net正规化路径（也存在于elasticnet)可以通过glmnet包获得。penalized包提供了lasso(L1)和ridge (L2)惩罚回归模型(支持广义线性模型和Cox模型)的另一个替代实现。RXshrink包能用于标识和显示特定收缩路径的跟踪信息、判断合适的收缩程度。 使用lasso惩罚的半参数加法风险模型由ahaz包提供。一种用于线性回归的广义lasso收缩技术，relaxedlasso，由relaxo包提供。penalizedLDA包实现使用（可选的）LASSO惩罚的费舍尔线性判别分析，用于特征值p远大于观测值n的高维数据。pamr包实现了用于基因表达分析的缩小重心分类法和工具。earth包提供了一个多元自适应样条回归实现。penalizedSVM包提供了使用惩罚功能(SCAD或L1惩罚)的变量选择支持向量机。 各种惩罚判别分析在hda、rda、sda和SDDA包内实现。LiblineaR包提供了LIBLINEAR库的接口。ncvreg包使用坐标下降算法进行SCAD和MCP逻辑惩罚来拟合线性和逻辑回归模型。 bigRR包关注于高吞吐量岭回归(例如，对很多预测变量进行惩罚)和异方差效应模型。 bmrm包提供了一个用于正规化风险最小化的束方法实现。 - Boosting : 各种形式的梯度boosting在gbm包 (基于树的功能性梯度下降boosting)内实现。由boosting优化的Hinge-loss实现在bst包内. GAMBoost包可用于通过boosting算法拟合广义加法模型。mboost包提供一个用于广义线性、加法和非参数模型的可扩展boosting框架。 基于似然估计的boosting实现，用于Cox模型的在CoxBoost包内提供，用于混合模型的在GMMBoost包内提供。GAMLSS模型可以使用gamboostLSS提供的boosting进行拟合。 - 支持向量机（Support Vector Machines and KernelMethods） : e1071包中的svm()函数提供LIBSVM库的接口，包kernlab 为核学习（包括SVM、RVM和其他核学习算法）提供了一个灵活的框架。 klaR 包提供了用于SVMlight实现（仅one-against-all多类分类）的接口。 核特征空间的关联维可以使用rdetools包进行估计，rdetools也提供了用于模型选择和预测的程序。 - 贝叶斯方法（BayesianMethods） : tgp包提供了贝叶斯非稳半参数非线性回归和基于树的高斯过程（包括贝叶斯线性模型、分类和回归树、基于树的线性模型）设计. - 基于遗传算法的优化（Optimization using GeneticAlgorithms） : rgp和rgenoud包提供基于遗传算法的最优化程序。Rmalschains包实现了基于局部搜索链的模因算法（memeticalgorithm），该算法为一种特俗的演化算法类型，是稳态基因算法和用于实数参数优化的局部搜索的结合体。模因算法，又译为文化基因算法，全局搜索策略可以采用遗传算法、进化策略、进化规划等;局部搜索策略可以采用爬山搜索、模拟退火、贪婪算法、禁忌搜索等。 - 关联规则（Association Rules） arules包提供了有效处理稀疏二元数据的数据结构，以及为用于挖掘频繁项集、最大频繁项集、闭频繁项集和关联规则的Apriori和Eclat算法实现提供接口。 - _基于规则的_模糊系统（Fuzzy Rule-based Systems） :frbs包实现了许多用于回归和分类、从数据中学习模糊规则系统的标准方法。RoughSets包提供了粗糙集理论（RST）和模糊粗糙集理论（FRST）的完整实现。 - 模型选择和验证（Model selection andvalidation） :e1071包中用于超参数调优的tune()函数和ipred包中的errorest() 函数可被用于错误率估计。svmpath 包里的函数可用来选取支持向量机的代价参数C。ROCR 包提供了函数用于ROC分析和其他用于对比候选分类器的可视化技术。caret 包供了各种建立预测模型的函数，包括参数调优和变量重要性量度。这些包可被用于各种并行实现（例如MPI、NWS等）。 - 统计学习基础（Elements of StatisticalLearning） :《The Elements of Statistical Learning: Data Mining, Inference, and Prediction 》一书中的数据集、函数、例子都被打包放在ElemStatLearn包中。 - rattle 是R中用于数据挖掘的图形用户界面。CORElearn 包实现了很多机器学习算法，例如最近邻域算法、树、随机森林和一些特征选择方法。与之类似，rminer 包可以使用其他包的许多学习算法并计算多种性能度量。</description>
    </item>
    
    <item>
      <title>转战Octave</title>
      <link>https://mryqu.github.io/post/%E8%BD%AC%E6%88%98octave/</link>
      <pubDate>Sun, 16 Mar 2014 23:27:14 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E8%BD%AC%E6%88%98octave/</guid>
      <description>可赶上机器学习的课了，原来学过《集体编程智慧》里面机器学习算法的Python实现，这次想着有个巩固提高。可是老师偏偏使用Octave，杂就杂吧，学学matlab风格的编程也不错。 Matlab是一款数值计算和分析的优秀软件，可是价格昂贵。其开源替代品就是Scilab和Octave。
Scilab是由INRIA（法国国立计算机及自动化研究院）和ENPC（法国国立桥梁学院）开发的开源科学计算自由软件。与Matlab类似，Scilab数据类型丰富，可以很方便地实现各种矩阵运算与图形显示，能应用于科学计算、数学建模、信号处理、决策优化、线性/非线性控制等各个方面。它还提供可以满足不同工程与科学需要的工具箱，例如Scicos，信号处理工具箱，图与网络工具箱等。可以说，就基本的功能如科学计算、矩阵处理及图形显示而言，Matlab能完成的工作Scilab都可以实现。由于Scilab的语法与Matlab非常接近，熟悉Matlab编程的人很快就会掌握Scilab的使用。有意思的是，Scilab提供的语言转换函数可以自动将用Matlab语言编写的程序翻译为Scilab语言。
GNU Octave是自由软件基金会支持的遵循GPL协议的一个自由再发布的软件，作者是以John W.Eaton为首的一些志愿者。它提供了一个环境，该环境支持叫做GNUOctave的高级语言，这种语言与Matlab兼容，主要用于数值计算。它提供了一个方便的命令行方式，可以数值求解线性和非线性问题，以及做一些数值模拟。 Octave也提供了一些工具包，可以解决一般的线性代数问题，非线性方程求根，常规函数积分，处理多项式，处理常微分方程和微分代数方程。它也很容易的使用Octave自带的接口方式扩展和定制功能。
Octave相对于Scilab，对Matlab的语法兼容性更好，几乎没有差别。比如，Octave也使用M文件的形式来扩展功能和定义函数。因此熟悉Matlab的用户更容易接受Octave环境。 它可编程的性能更好，Octave语言功能更为强大，几乎提供所有系统函数的支持，Octave在语法上也更接近C的语法，比如提供++和&amp;ndash;这样的预算符。这样，我们可以在Octave环境里面增加一些更为强大和易用的扩展。不象在Matlab和Scilab环境中限制比较多，有时无法充分的利用系统资源。它的计算库都是用C写，而Scilab则基本是Fortran的编写的。这也是一份有用的资源。和GNU下面的其他软件也可以较多协作。劣势就是Octave的功能比起Scilab要简单一些，这使得Octave对一些用户来说意义不如Scilab大。而且Octave目前没有图形界面，只能以命令行方式进行交互。
第一次编程作业的效果图：
将原来的一些编程思路转换成矩阵和矢量是一个挑战，对于复杂一些编程，还是逃不开纠结和调试。</description>
    </item>
    
  </channel>
</rss>