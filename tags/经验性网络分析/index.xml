<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>经验性网络分析 on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/%E7%BB%8F%E9%AA%8C%E6%80%A7%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/</link>
    <description>Recent content in 经验性网络分析 on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 23 Nov 2014 23:24:33 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/%E7%BB%8F%E9%AA%8C%E6%80%A7%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[社交网络分析课] 数据集预处理及Gephi导入</title>
      <link>https://mryqu.github.io/post/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E8%AF%BE_%E6%95%B0%E6%8D%AE%E9%9B%86%E9%A2%84%E5%A4%84%E7%90%86%E5%8F%8Agephi%E5%AF%BC%E5%85%A5/</link>
      <pubDate>Sun, 23 Nov 2014 23:24:33 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E8%AF%BE_%E6%95%B0%E6%8D%AE%E9%9B%86%E9%A2%84%E5%A4%84%E7%90%86%E5%8F%8Agephi%E5%AF%BC%E5%85%A5/</guid>
      <description>紧赶慢赶忙完了社交网络分析课的编程大作业，选择的是经验性网络分析。
这次的大作业没有指定数据集，自己找数据集做分析。我在网上搜到以前一个同学做的移民分析，感觉很不错。然后，就茫然了。最怕这种自己找数据集的，以前有的课程介绍了一些比较好的开放数据集，可惜当时没觉得有什么太大的价值，没记呀！！！
费了半天，找了一个大不列颠的公路流量数据集，公路就是edge了，每个公路的两端就是node了，感觉还可以。数据集在线地址: http://data.dft.gov.uk/gb-traffic-matrix/Traffic-major-roads-miles.csv.数据集手册在线地址: http://data.dft.gov.uk/gb-traffic-matrix/all-traffic-data-metadata.pdf
这次作业主要使用Gephi对数据集进行分析，所以我先使用R语言对原始数据集进行预处理，然后使用Gephi导入生成的nodes.csv和edges.csv。
if (!file.exists(&amp;quot;./Traffic-major-roads-miles.csv&amp;quot;)) { download.file(&amp;quot;http://data.dft.gov.uk/gb-traffic-matrix/Traffic-major-roads-miles.csv&amp;quot;, destfile = &amp;quot;./Traffic-major-roads-miles.csv&amp;quot;) } data &amp;lt;- read.csv(&amp;quot;Traffic-major-roads-miles.csv&amp;quot;, sep = &amp;quot;,&amp;quot;) data2013 &amp;lt;- subset(data, Year == 2013 &amp;amp; AllMV &amp;gt; 0, select = c(A.Junction, B.Junction, AllMV)) data2013 &amp;lt;- data.frame(A.Junction = toupper(data2013$A.Junction), B.Junction = toupper(data2013$B.Junction), Weight = data2013$AllMV, stringsAsFactors = FALSE) A.junctions &amp;lt;- as.vector(data2013[, 1]) B.junctions &amp;lt;- as.vector(data2013[, 2]) junctions &amp;lt;- sort(unique(c(A.junctions, B.junctions))) # write nodes.csv nodes_print &amp;lt;- cbind(c(&amp;quot;Nodes&amp;quot;, junctions), c(&amp;quot;Id&amp;quot;, 1:length(junctions)), c(&amp;quot;Label&amp;quot;, junctions)) nodes_print &amp;lt;- t(nodes_print) write(nodes_print, file = &amp;quot;nodes.</description>
    </item>
    
  </channel>
</rss>