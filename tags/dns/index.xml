<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dns on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/dns/</link>
    <description>Recent content in Dns on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 21 Jun 2018 06:08:53 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/dns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用Consul DNS接口</title>
      <link>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8consuldns%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Thu, 21 Jun 2018 06:08:53 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8consuldns%E6%8E%A5%E5%8F%A3/</guid>
      <description>Consul提供了两个查询接口：HTTP和DNS。DNS接口允许应用程序在没有与consul高度集成的情况下使用服务发现。 以下面这个小Consul集群为例：
root@consul:/# /usr/bin/consul members Node Address Status Type Build Protocol DC configuration 172.17.0.7:8301 alive client X.Y.Z 2 dc1 consul 172.17.0.2:8301 alive server X.Y.Z 2 dc1 httpd 172.17.0.4:8301 alive client X.Y.Z 2 dc1 logon 172.17.0.8:8301 alive client X.Y.Z 2 dc1 postgres 172.17.0.3:8301 alive client X.Y.Z 2 dc1 rabbitmq 172.17.0.6:8301 alive client X.Y.Z 2 dc1  可以通过DNS接口以&amp;lt;dnode&amp;gt;.node[.datacenter].&amp;lt;domain&amp;gt;的形式查询节点地址，也可以[tag.]&amp;lt;dservice&amp;gt;.service[.datacenter].&amp;lt;domain&amp;gt;的形式查询服务地址。
root@httpd:/# dig @127.0.0.1 -p53 postgres.node.consul ANY ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-9-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; @127.0.0.1 -p53 postgres.</description>
    </item>
    
    <item>
      <title>Apt-get代理配置</title>
      <link>https://mryqu.github.io/post/apt-get%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 20 May 2015 00:03:27 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/apt-get%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</guid>
      <description>在公司安装Ubuntu docker后使用apt-get update总是失败，经历了一番周折才成功。
DNS？ 一开始怀疑是DNS问题，可以学习了下面几个帖子： - Docker apt-get update fails - Docker - Network calls fail during image build on corporate network - How do I set my DNS on Ubuntu 14.04?
检查我ubuntu配置：
 cat /etc/resolv.conf  确认DNS没有问题。
Ubuntu官方服务器？ 是不是我的机器连不上欧美的Ubuntu官方服务器，换成中国服务器试试。尝试了Ubuntu 14.04服务器列表上的中国服务器还是不成。
Apt-get代理？ 照着how to install packages with apt-get on a system connected via proxy?设置一番，成功了
设置/etc/apt/apt.conf：
Acquire::http::proxy &amp;quot;http://yourServer:yourPort/&amp;quot;; Acquire::ftp::proxy &amp;quot;ftp://yourServer:yourPort/&amp;quot;; Acquire::https::proxy &amp;quot;https://yourServer:yourPort/&amp;quot;;  如需用户名、密码，则作如下修改：
Acquire::http::proxy &amp;quot;http://yourUsr:yourPwd@yourServer:yourPort/&amp;quot;; Acquire::ftp::proxy &amp;quot;ftp://yourUsr:yourPwd@yourServer:yourPort/&amp;quot;; Acquire::https::proxy &amp;quot;https://yourUsr:yourPwd@yourServer:yourPort/&amp;quot;;  最好将上述配置也存入/etc/apt/apt.</description>
    </item>
    
    <item>
      <title>host笔记</title>
      <link>https://mryqu.github.io/post/host%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 19 Oct 2013 23:45:53 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/host%E7%AC%94%E8%AE%B0/</guid>
      <description> host命令是常用的分析域名查询工具，可以用来测试域名系统工作是否正常。
host参数 -a等价于使用“-v -t ANY”-c Class当搜索非网际数据时要指定要查找的类。有效类为:
IN网际类CHAOSChaos类HESIODMIT AlthenaHesiod类ANY通配符-C在需要认证的域名服务器上查找SOA记录-d等价于使用“-v”-l列出一个域内所有的主机-i反向查找-N改变点数-r禁用递归处理。-R指定UDP包数-t Type指定要查询的记录类型。常用类型为:
A主机的网际地址CNAME别名的规范名称HINFO主机CPU与操作系统类型KEY安全密钥记录MINFO邮箱或邮件列表信息MX邮件交换器NS指定范围的名称服务器PTR如果查询的是一个网际地址则为主机名；否则，为其他信息的指针SIG签名记录SOA域的&#34;授权开始&#34;信息TXT文本信息UINFO用户信息WKS所支持的众所周知的服务。-T支持TCP/IP模式-v运行时显示详细的处理信息-w永远等待DNS服务器的一个回答。-W Waite指定等待回复的时间-4用于IPv4的查询-6用于IPv6的查询-m设置内存调试标志 host使用 </description>
    </item>
    
    <item>
      <title>dig笔记</title>
      <link>https://mryqu.github.io/post/dig%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 12 Oct 2013 19:51:58 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/dig%E7%AC%94%E8%AE%B0/</guid>
      <description>dig是域信息搜索器（domain informationgroper）。dig和nslookup作用有些类似，都是DNS查询工具。它与nslookup的区别在于：dig使用操作系统的解析库而nslookup使用自己的一套。Bind开发组已经宣布废弃nslookup，但Unix和Linux系统一般都安装了这两个工具。一些专业的DNS管理员在追查DNS问题时，都乐于使用dig命令，是看中了dig设置灵活、输出清晰、功能强大的特点。
如果Ubuntu下没有dig命令，可通过如下命令安装：
sudo apt-get install dnsutils  dig使用说明 dig选项 -b address设置所要询问地址的源 IP 地址。这必须是主机网络接口上的某一合法的地址。-c class缺省查询类（IN forinternet）由选项-c重设。class可以是任何合法类，比如查询Hesiod记录的HS类或查询CHAOSNET记录的CH 类。-f filename使dig在批处理模式下运行，通过从文件filename读取一系列搜索请求加以处理。文件包含许多查询；每行一个。文件中的每一项都应该以和使用命令行接口对dig的查询相同的方法来组织。-h当使用选项-h时，显示一个简短的命令行参数和选项摘要。-k filename要签署由dig发送的DNS查询以及对它们使用事务签名（TSIG）的响应，用选项-k指定TSIG密钥文件。-n缺省情况下，使用IP6.ARPA域和RFC2874定义的二进制标号搜索IPv6地址。为了使用更早的、使用IP6.INT域和nibble标签的RFC1886方法，指定选项-n（nibble）。-p port#如果需要查询一个非标准的端口号，则使用选项-p。port#是dig将发送其查询的端口号，而不是标准的DNS端口号53。该选项可用于测试已在非标准端口号上配置成侦听查询的域名服务器。-t type设置查询类型为type。可以是BIND9支持的任意有效查询类型。缺省查询类型是A，除非提供-x选项来指示一个逆向查询。通过指定AXFR的type可以请求一个区域传输。当需要增量区域传输（IXFR）时，type设置为ixfr=N。增量区域传输将包含自从区域的SOA记录中的序列号改为N之后对区域所做的更改。-x addr逆向查询（将地址映射到名称）可以通过-x选项加以简化。addr是一个以小数点为界的IPv4地址或冒号为界的IPv6地址。当使用这个选项时，无需提供name、class和type参数。dig自动运行类似11.12.13.10.in-addr.arpa的域名查询，并分别设置查询类型和类为PTR和IN。-y name:key您可以通过命令行上的-y选项指定TSIG密钥；name是TSIG密码的名称，key是实际的密码。密码是64位加密字符串，通常由dnssec-keygen（8）生成。当在多用户系统上使用选项-y时应该谨慎，因为密码在ps（1）的输出或shell 的历史文件中可能是可见的。当同时使用dig和TSCG认证时，被查询的名称服务器需要知道密码和解码规则。在BIND中，通过提供正确的密码和named.conf中的服务器声明实现。
dig的查询选项 dig提供查询选项，它影响搜索方式和结果显示。一些在查询请求报头设置或复位标志位，一部分决定显示哪些回复信息，其它的确定超时和重试战略。每个查询选项被带前缀（+）的关键字标识。一些关键字设置或复位一个选项。通常前缀是求反关键字含义的字符串no。其他关键字分配各选项的值，比如超时时间间隔。它们的格式形如+keyword=value。查询选项是： +[no]tcp查询域名服务器时使用[不使用]TCP。缺省行为是使用 UDP，除非是 AXFR 或 IXFR 请求，才使用 TCP连接。+[no]vc查询名称服务器时使用[不使用]TCP。+[no]tcp的备用语法提供了向下兼容。vc代表虚电路。+[no]ignore忽略 UDP 响应的中断，而不是用 TCP 重试。缺省情况运行 TCP 重试。+domain=somename设定包含单个域somename的搜索列表，好像被/etc/resolv.conf中的域伪指令指定，并且启用搜索列表处理，好像给定了+search选项。+[no]search使用[不使用]搜索列表或resolv.conf中的域伪指令（如果有的话）定义的搜索列表。缺省情况不使用搜索列表。+[no]defname不建议看作+[no]search的同义词。+[no]aaonly该选项不做任何事。它用来提供对设置成未实现解析器标志的dig的旧版本的兼容性。+[no]adflag在查询中设置 [不设置]AD（真实数据）位。目前AD位只在响应中有标准含义，而查询中没有，但是出于完整性考虑在查询中这种性能可以设置。+[no]cdflag在查询中设置 [不设置] CD（检查禁用）位。它请求服务器不运行响应信息的DNSSEC合法性。+[no]recursive切换查询中的 RD（要求递归）位设置。在缺省情况下设置该位，也就是说 dig正常情形下发送递归查询。当使用查询选项+nssearch或+trace时，递归自动禁用。+[no]nssearch这个选项被设置时，dig试图寻找包含待搜名称的网段的权威域名服务器，并显示网段中每台域名服务器的SOA记录。+[no]trace切换为待查询名称从根名称服务器开始的代理路径跟踪。缺省情况不使用跟踪。一旦启用跟踪，dig使用迭代查询解析待查询名称。它将按照从根服务器的参照，显示来自每台使用解析查询的服务器的应答。+[no]cmd设定在输出中显示指出dig版本及其所用的查询选项的初始注释。缺省情况下显示注释。+[no]short提供简要答复。缺省值是以冗长格式显示答复信息。+[no]identify当启用+short选项时，显示[或不显示]提供应答的IP地址和端口号。如果请求简短格式应答，缺省情况不显示提供应答的服务器的源地址和端口号。+[no]comments切换输出中的注释行显示。缺省值是显示注释。+[no]stats该查询选项设定显示统计信息：查询进行时，应答的大小等等。缺省显示查询统计信息。+[no]qr显示 [不显示] 发送的查询请求。缺省不显示。+[no]question当返回应答时，显示 [不显示] 查询请求的问题部分。缺省作为注释显示问题部分。+[no]answer显示 [不显示] 应答的回答部分。缺省显示。+[no]authority显示 [不显示] 应答的权限部分。缺省显示。+[no]additional显示 [不显示] 应答的附加部分。缺省显示。+[no]all设置或清除所有显示标志。+time=T为查询设置超时时间为T秒。缺省是5秒。如果将T设置为小于1的数，则以1秒作为查询超时时间。+tries=A设置向服务器发送 UDP 查询请求的重试次数为A，代替缺省的 3次。如果把A小于或等于 0，则采用 1 为重试次数。+ndots=D出于完全考虑，设置必须出现在名称D的点数。缺省值是使用在/etc/resolv.conf中的ndots语句定义的，或者是 1，如果没有ndots语句的话。带更少点数的名称被解释为相对名称，并通过搜索列表中的域或文件/etc/resolv.conf 中的域伪指令进行搜索。+bufsize=B设置使用 EDNS0 的 UDP消息缓冲区大小为B字节。缓冲区的最大值和最小值分别为65535和0。超出这个范围的值自动舍入到最近的有效值。+[no]multiline以详细的多行格式显示类似SOA的记录，并附带可读注释。缺省值是每单个行上显示一条记录，以便于计算机解析dig的输出。
全局查询参数（global-d-opt）和（在主机名之前的）服务器影响所有查询。局部查询参数和（在主机名之后的）服务器仅影响当前查询。
dig使用 mryqu&amp;gt; dig ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.</description>
    </item>
    
    <item>
      <title>nslookup笔记</title>
      <link>https://mryqu.github.io/post/nslookup%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 28 Jun 2013 10:02:55 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/nslookup%E7%AC%94%E8%AE%B0/</guid>
      <description>nslookup命令是用来查询因特网域名服务器的。该命令在Unix、Linux和Windows平台都有提供。如果在Linux平台上找不到nslookup命令，检查是否安装bind-utils。
nslookup的使用模式 nslookup有两种模式：交互式和非交互式。 - 交互式模式允许向域名服务器查询各种主机、域名或打印域内主机列表。 - 非交互式模式用于查询一个主机或域的信息。
C:\&amp;gt;nslookup /? Usage: nslookup [-opt ...] # interactive mode using default server nslookup [-opt ...] - server # interactive mode using &#39;server&#39; nslookup [-opt ...] host # just look up &#39;host&#39; using default server nslookup [-opt ...] host server # just look up &#39;host&#39; using &#39;server&#39;  制定了查询对象就进入非交互式模式，否则进入交互模式。示例如下：这两次查询百度的命令区别在于：第一次使用了默认DNS，第二次指定了Google的DNS。返回结果是非权威答案，即从上连DNS服务器的本地缓存中读取出的值，而非实际去查询到的值。
nslookup选项 - set all：列出nslookup工具的常用选项的当前设置值。 - set class=[value]：可以更改查询类
 IN：Internet类（默认） CH：Chaos类 HS：Hesiod类 ANY：通配  Chaos和Hesiod现在几乎无人使用。 - set [no]debug：可以用来设置是否进入调试模式。如果setdebug，则会进入到调试模式，查询过程中会显示完整的响应包以及其中的交互包。 - set[no]d2：开启了高级调试模式，会输出很多nslookup内部工作的信息，包括了许多函数调用信息。 - set domain=[name]：用于设置默认的域。 - set [no]search：使用域搜索列表。 - setport=[value]：众所周知，DNS默认的服务端口是53。当某些特殊情况，此端口改变时，可以通过本命令来设置。 - set type=[value]：也可以写成setquerytype=[value]，用于更改信息查询类型。默认情况下，nslookup是查询域名所对应的A记录，而如果你想查询其对应的MX记录等信息时，就需要专门设置type值了。目前常用的type值如下：</description>
    </item>
    
  </channel>
</rss>