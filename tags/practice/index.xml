<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>practice on Mryqu's Notes</title><link>https://mryqu.github.io/tags/practice/</link><description>Recent content in practice on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 30 Jul 2015 05:35:26 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/practice/index.xml" rel="self" type="application/rss+xml"/><item><title>[Hive] Hive JDBC实践</title><link>https://mryqu.github.io/post/hive_hive_jdbc%E5%AE%9E%E8%B7%B5/</link><pubDate>Thu, 30 Jul 2015 05:35:26 +0000</pubDate><guid>https://mryqu.github.io/post/hive_hive_jdbc%E5%AE%9E%E8%B7%B5/</guid><description>HiveJdbcClient.java 使用参考一中的示例代码:
import java.sql.SQLException; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import java.sql.DriverManager; public class HiveJdbcClient { private static String driverName = &amp;#34;org.apache.hive.jdbc.HiveDriver&amp;#34;; public static void main(String[] args) throws SQLException { try { Class.forName(driverName); } catch (ClassNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); System.exit(1); } //&amp;#34;hadoop&amp;#34; is the name of the user the queries should run as in my cluster. Connection con = DriverManager.getConnection( &amp;#34;jdbc:hive2://localhost:10000/default&amp;#34;, &amp;#34;hadoop&amp;#34;, &amp;#34;{PASSWORD_OF_USER_HADOOP}&amp;#34;); Statement stmt = con.</description></item><item><title>[OpenUI5] 控件ID实践与总结</title><link>https://mryqu.github.io/post/openui5_%E6%8E%A7%E4%BB%B6id%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 03 May 2015 06:53:44 +0000</pubDate><guid>https://mryqu.github.io/post/openui5_%E6%8E%A7%E4%BB%B6id%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%BB%E7%BB%93/</guid><description>显式定义而不是自生成OpenUI5控件ID 为了便于开发和测试，为控件设置一个便于理解的ID尤为重要。我的博文《快速定位OpenUI5问题的一个方法》中的工具函数就是利用控件ID快速定位故障控件的。 在OpenUI5中，可在创建控件实例时使用JSON对象作为控件构造器参数。其中一个可选属性就是&amp;quot;id&amp;quot;，OpenUI5不仅用它（在&amp;quot;注册信息&amp;quot;中）追踪控件，也用在渲染控件的DOM输出。 如果没有显式指定一个控件的ID，OpenUI5框架就会使用基于实例数量的算法自生成控件ID。 自生成ID有两个缺点：
调试的时候，不容易定位使用控件的代码位置。例如，异常跟某个控件相关，如果该类型控件实例很多，很难定位该控件定义在那个视图里。 测试代码相对显式定义ID更加难写。如果对控件使用显式定义ID，相应的测试代码可以很容易通过该ID进行控件查找或验证。 控件ID命名惯例 使用驼峰式写法、有意义且语法正确的ID来反映控件的本质。 例如：
一个表单上的提交按钮，其id=&amp;ldquo;submit&amp;rdquo; 到不同图形设置的导航控件，其id=&amp;ldquo;graphNav&amp;rdquo; OpenUI5控件ID内幕 sap.ui.base.ManagedObject是OpenUI5框架包括控件在内的大部分类的父类，它的构造器里有对ID的处理：
if (!sId) { sId = this.getMetadata().uid() || jQuery.sap.uid(); } else { var preprocessor = ManagedObject._fnIdPreprocessor; sId = (preprocessor ? preprocessor.call(this, sId) : sId); var oType = DataType.getType(&amp;#34;sap.ui.core.ID&amp;#34;); if (!oType.isValid(sId)) { throw new Error(&amp;#34;\&amp;#34;&amp;#34; + sId + &amp;#34;\&amp;#34; is not a valid ID.&amp;#34;); } } this.sId = sId; sap.ui.base.ManagedObjectMetadata的ID生成代码：
(function() { var mUIDCounts = {}; function uid(sId) { jQuery.</description></item><item><title>[HBase] HBase Shell交互实践</title><link>https://mryqu.github.io/post/hbase_hbase_shell%E4%BA%A4%E4%BA%92%E5%AE%9E%E8%B7%B5/</link><pubDate>Fri, 25 Oct 2013 20:12:48 +0000</pubDate><guid>https://mryqu.github.io/post/hbase_hbase_shell%E4%BA%A4%E4%BA%92%E5%AE%9E%E8%B7%B5/</guid><description>HBase Shell是对HBase的脚本接口，是一个JRuby REPL(Read-Eval-PrintLoop，“读取-求值-输出”循环)，可以通过脚本访问所有HBase客户端API。
单列族练习 创建表friends $ hbase shell hbase(main):001:0&amp;gt; list TABLE customer 1 row(s) in 0.2050 seconds =&amp;gt; [&amp;#34;customer&amp;#34;, &amp;#34;student&amp;#34;] hbase(main):002:0&amp;gt; create &amp;#39;friends&amp;#39;, &amp;#39;d&amp;#39; 0 row(s) in 1.3350 seconds =&amp;gt; Hbase::Table - friends hbase(main):003:0&amp;gt; list TABLE customer friends 2 row(s) in 0.0060 seconds =&amp;gt; [&amp;#34;customer&amp;#34;, &amp;#34;friends&amp;#34;, &amp;#34;student&amp;#34;] 获得表friends的描述说明 hbase(main):004:0&amp;gt; describe &amp;#39;friends&amp;#39; Table friends is ENABLED friends COLUMN FAMILIES DESCRIPTION {NAME =&amp;gt; &amp;#39;d&amp;#39;, DATA_BLOCK_ENCODING =&amp;gt; &amp;#39;NONE&amp;#39;, BLOOMFILTER =&amp;gt; &amp;#39;ROW&amp;#39;, REPLICATION_SCO PE =&amp;gt; &amp;#39;0&amp;#39;, VERSIONS =&amp;gt; &amp;#39;1&amp;#39;, COMPRESSION =&amp;gt; &amp;#39;NONE&amp;#39;, MIN_VERSIONS =&amp;gt; &amp;#39;0&amp;#39;, TTL =&amp;gt; &amp;#39;FO REVER&amp;#39;, KEEP_DELETED_CELLS =&amp;gt; &amp;#39;FALSE&amp;#39;, BLOCKSIZE =&amp;gt; &amp;#39;65536&amp;#39;, IN_MEMORY =&amp;gt; &amp;#39;false&amp;#39;, BLOCKCACHE =&amp;gt; &amp;#39;true&amp;#39;} 1 row(s) in 0.</description></item></channel></rss>