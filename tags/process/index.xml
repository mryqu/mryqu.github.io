<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Process on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/process/</link>
    <description>Recent content in Process on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 11 Aug 2016 05:10:09 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/process/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[RabbitMQ] 强制杀死RabbitMQ进程</title>
      <link>https://mryqu.github.io/post/rabbitmq_%E5%BC%BA%E5%88%B6%E6%9D%80%E6%AD%BBrabbitmq%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Thu, 11 Aug 2016 05:10:09 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/rabbitmq_%E5%BC%BA%E5%88%B6%E6%9D%80%E6%AD%BBrabbitmq%E8%BF%9B%E7%A8%8B/</guid>
      <description> 首先，尝试使用init.d脚本优雅关闭RabbitMQ  sudo /etc/init.d/rabbitmq-server stop  如果不成功的话，使用  ps -eaf | grep erl  查看进程及父进程ID。输出第三列为父进程ID。找到仍是erlang进程（而不是启动进程的shell脚本）的第一个祖先进程，杀死它，这会同样终止其他子进程。上述示例中进程1301为&amp;rdquo;/bin/sh -e/usr/lib/rabbitmq/bin/rabbitmq-server&amp;rdquo;，已经不是erlang进程了，所以杀死进程1587就可以了。对于目前的RabbitMQ版本，可直接使用：  sudo pkill beam.smp   </description>
    </item>
    
    <item>
      <title>[HBase] 启动内置ZooKeeper过程</title>
      <link>https://mryqu.github.io/post/hbase_%E5%90%AF%E5%8A%A8%E5%86%85%E7%BD%AEzookeeper%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 24 Feb 2015 07:00:09 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/hbase_%E5%90%AF%E5%8A%A8%E5%86%85%E7%BD%AEzookeeper%E8%BF%87%E7%A8%8B/</guid>
      <description> start-hbase.sh  hbase-daemons.sh start zookeeper zookeepers.sh --hosts /usr/local/hbase/conf/regionservers--config /usr/local/hbase/conf cd /usr/local/hbase;/usr/local/hbase/bin/hbase-daemon.sh --config /usr/local/hbase/confstart zookeeper 检查配置HBASE_MANAGES_ZK，若不为true则终止处理。  ssh node51054 cd /usr/local/hbase;/usr/local/hbase/bin/hbase-daemon.sh --config /usr/local/hbase/confstart zookeeper hbase zookeeper start  java org.apache.hadoop.hbase.zookeeper.HQuorumPeer     </description>
    </item>
    
    <item>
      <title>了解Activiti组件</title>
      <link>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3activiti%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Sat, 07 Feb 2015 18:19:05 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3activiti%E7%BB%84%E4%BB%B6/</guid>
      <description>Activiti 简介 Activiti作为一个遵从 Apache许可的工作流和业务流程管理开源平台，其核心是基于 Java 的超快速、超稳定的 BPMN 2.0流程引擎，强调流程服务的可嵌入性和可扩展性，同时更加强调面向业务人员。Activiti可以运行在任何JAVA程序中：单机、服务器、集群或云上。
Activiti 组件 - Activiti Modeler—建模器Activiti建模器是基于开源的Signavio流程编辑器的一个定制版本，可以使用浏览器图形化地编辑BPMN2.0兼容流程，流程文件被存储在数据库模型仓库内。Activiti团队已经停止Activiti建模器的活跃开发，目前仍保留在ActivitiExplorer内。- Activiti Designer—设计器Activiti设计器是Eclipse插件形式的，除了可以建模BPMN2.0流程，还支持Activiti特定的扩展，可以发挥Activiti流程和引擎的全部潜能。- Activiti Kickstart—基于表格的流程设计在Activiti Explorer的Model workspace里新建模型时选择Table-drivendefination时就是所谓的ActivitiKickstart，现在Activiti Designer里也包含这一功能。 - Activiti ExplorerExplorer是流程引擎的Web用户控制台。使用它来进行任务管理、流程实例检查、管理和基于历史统计数据查看报表等等。它不是一个的最终客户可用的成熟监控和管理应用程序，仅用于演示Activiti如何用于用户的应用中。 - Activiti RestActiviti引擎的 REST API。此外，曾经存在过下面两个组件（至少 Activiti 5.0-alpha4版本）： - ActivitiProbe：一个对流程引擎运行期实例提供管理及监控的web应用程序。包含部署的管理、流程定义的管理、数据库表的检视、日志查看、事务的平均执行时间、失败多次的工作等功能。已经变成ActivitiExplorer的一部分 - Activiti Cycle：BPM协作用具，改用camunda Cycle了
参考 Activiti官方网站
Activiti用户指南
Activiti组件
Activiti开发指南
Activiti Javadoc
Activiti源代码(GitHub)
Adhoc workflow with Activiti: introducing Activiti KickStart
Activiti Cycle explained
Easy Workflows - Activiti Kickstart
Activiti - 新一代的开源 BPM 引擎</description>
    </item>
    
  </channel>
</rss>