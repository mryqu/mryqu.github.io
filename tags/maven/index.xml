<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maven on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/maven/</link>
    <description>Recent content in Maven on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 03 Mar 2017 05:57:34 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/maven/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>玩一下uptodate-gradle-plugin插件</title>
      <link>https://mryqu.github.io/post/%E7%8E%A9%E4%B8%80%E4%B8%8Buptodate-gradle-plugin%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Fri, 03 Mar 2017 05:57:34 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%8E%A9%E4%B8%80%E4%B8%8Buptodate-gradle-plugin%E6%8F%92%E4%BB%B6/</guid>
      <description>玩了一下uptodate-gradle-plugin插件，使用这个插件后执行gradle uptodate 可以看到那些库在Maven Central仓库有新版本，用于辅助判断是否需要更新Java库。 我一般不追新库，所以这个插件对我的用处小，看一看玩一玩，仅此而已。</description>
    </item>
    
    <item>
      <title>[Maven] 构建多模块项目</title>
      <link>https://mryqu.github.io/post/maven_%E6%9E%84%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Sat, 03 Sep 2016 07:07:55 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/maven_%E6%9E%84%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE/</guid>
      <description> 在前一篇博文[Gradle] 将多项目转换成Maven项目中利用Gradle转换成Maven构建脚本，将朋友糊弄过去了。后来想想，还是给他做一个重头搭建多模块Maven项目的演示吧。
创建根（父）项目 下列脚本可以创建一个包含pom.xml的yqu-ts-parent目录：
mvn archetype:generate -DgroupId=com.yqu.ts -DartifactId=yqu-ts-parent -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false  测试结果： 进入yqu-ts-parent目录，删除src子目录，然后将pom.xml文件中packaging节点内容由jar改为pom。pom表示它是一个被继承的模块
创建子项目 在yqu-ts-parent目录中运行下列脚本可以创建两个包含pom.xml文件的子目录yqu-ts-service和yqu-ts-webapp：
mvn archetype:generate -DgroupId=com.yqu.ts -DartifactId=yqu-ts-service -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false mvn archetype:generate -DgroupId=com.yqu.ts -DartifactId=yqu-ts-webapp -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false  测试结果： 这两个命令会修改yqu-ts-parent项目的pom.xml，增加了两个子模块yqu-ts-service和yqu-ts-webapp。对于两个字模块的pom.xml，增加packaging节点，由于这两个子模块将用SpringBoot实现因而内容都为jar。
确认项目/模块的pom.xml yqu-ts-parent项目的pom.xml yqu-ts-service模块的pom.xml yqu-ts-webapp模块的pom.xml </description>
    </item>
    
    <item>
      <title>[Gradle] 将多项目转换成Maven项目</title>
      <link>https://mryqu.github.io/post/gradle_%E5%B0%86%E5%A4%9A%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90maven%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Fri, 02 Sep 2016 05:46:07 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/gradle_%E5%B0%86%E5%A4%9A%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90maven%E9%A1%B9%E7%9B%AE/</guid>
      <description>手头有一个构建多项目的Gradle构建脚本，但是一个哥们问我能不能换成Maven的，搜到一篇gradle项目与maven项目相互转化，照着实践，证明多项目构建也是可行的。
文件结构介绍  ts-demo目录  setting.gradle build.gradle ts-service目录 build.gradle src目录 ts-webapp目录 build.gradle src目录   ts-demo/setting.gradle rootProject.name = &#39;ts-demo&#39; include &amp;quot;ts-service&amp;quot; include &amp;quot;ts-webapp&amp;quot; project(&amp;quot;:ts-service&amp;quot;).name = &amp;quot;ts-service&amp;quot; project(&amp;quot;:ts-webapp&amp;quot;).name = &amp;quot;ts-webapp&amp;quot;  ts-demo/build.gradle buildscript { repositories { mavenCentral() } } allprojects { apply plugin: &#39;java&#39; apply plugin: &#39;eclipse&#39; apply plugin: &#39;idea&#39; apply plugin: &#39;maven&#39; repositories { mavenCentral() } group = &#39;com.yqu&#39; version = &#39;0.1.0&#39; task writeNewPom { pom { project { inceptionYear &#39;2016&#39; licenses { license { name &#39;The Apache Software License, Version 2.</description>
    </item>
    
    <item>
      <title>初探ANTLR</title>
      <link>https://mryqu.github.io/post/%E5%88%9D%E6%8E%A2antlr/</link>
      <pubDate>Wed, 03 Jul 2013 20:25:21 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%88%9D%E6%8E%A2antlr/</guid>
      <description>当前的项目是基于多维数据集市的RTOLAP财务系统，其中的公式使用ANTLR 3进行语法解析和编译。 此外看Hibernate源码的时候也接触到ANTLR，Hibernate使用ANTLR产生查询分析器。
ANTLR简介 ANTLR的全称是ANother Tool for LanguageRecognition，其前身是PCCTS，和YACC、LEX、JavaCC、Coco/R等工具一样，都是编译器的编译程序。 ANTLR对语法树构造、遍历和转换、错误修复和报告提供出色的支持，它为包括Java，C++，C#和Python在内的语言提供了一个通过语法描述来自动构造自定义语言的识别器、解析器、编译器和转换器的框架。 ANTLR可以通过断言（Predicate）解决识别冲突；支持动作（Action）和返回值（ReturnValue）来；更棒的是，它可以根据输入自动生成语法树并可视化的显示出来。由此，计算机语言的翻译变成了一项普通的任务。 ANTLR是由旧金山大学的Terence Parr博士领导下完成的，最新版本为4.1。
编译器工作主要分有词法分析，语法分析，代码生成三个步骤。ANTLR分别提供了三个东西: 1. 词法分析器（Lexer） 词法分析器又称为Scanner，Lexicalanalyser和Tokenizer。程序设计语言通常由关键字和严格定义的语法结构组成。编译的最终目的是将程序设计语言的高层指令翻译成物理机器或虚拟机可以执行的指令。词法分析器的工作是分析量化那些本来毫无意义的字符流，将他们翻译成离散的字符组（也就是一个一个的Token），包括关键字、标识符、符号和操作符供语法分析器使用。 1. 语法分析器（Parser） 编译器又称为Syntacticalanalyser。在分析字符流的时候，Lexer不关心所生成的单个Token的语法意义及其与上下文之间的关系，而这就是Parser的工作。语法分析器将收到的Tokens组织起来，并转换成为目标语言语法定义所允许的序列。 无论是Lexer还是Parser都是一种识别器，Lexer是字符序列识别器而Parser是Token序列识别器。他们在本质上是类似的东西，而只是在分工上有所不同而已。 1. 抽象语法树遍历器 (Tree walker) 树分析器可以用于对语法分析生成的抽象语法树进行遍历，并能执行一些相关的操作，可以进行语义匹配生成代码。
ANTLR 3的Eclipse插件 ANTLR IDE用于ANTLR3的一个Eclipse插件。 - 支持ANTLR 3.0、3.1、3.2、3.3和3.4。 - ANTLR启动器和调试器(仅限Java) - ANTLR内建解析器。 - 代码格式化工具(Ctrl+Shift+F) - 语法图（铁路图） - 定制目标 - 自动生成资源 - 对语法文件中错误和告警自动标注 - 高级文本编辑器、代码选择(F3)和代码补全(Ctrl+Space) - 对（Java、C#、Python和C等）目标语言自动语法高亮 - 标注生成的资源 - 高级字符串模板(StringTemplate)编辑器(*.st and .stg) - 高级语法单元测试(gUnit)编辑器(.gunit and *.testsuite)使用ANTLR生成代码的ANT设置 &amp;lt;property name=&amp;quot;lib.dir&amp;quot; value=&amp;quot;lib&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;gensrc.dir&amp;quot; value=&amp;quot;gen-source/Java&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;parser.</description>
    </item>
    
    <item>
      <title>JDK、Ant和Maven开发环境配置</title>
      <link>https://mryqu.github.io/post/jdkant%E5%92%8Cmaven%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 07 Dec 2008 00:00:04 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/jdkant%E5%92%8Cmaven%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description> JDK  下载JDK并安装到c:\tools下 设置Java环境变量：JAVA_HOME = c:\tools\Java\jdk1.x.0_xxCLASSPATH =.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;path变量 %JAVA_HOME%\bin 运行&amp;rdquo;java -version&amp;rdquo;进行验证  Ant  下载Ant并解压缩到c:\tools下 设置Ant环境变量：ANT_HOME = c:\tools\apache-ant-1.x.xpath变量 %ANT_HOME%\bin 运行&amp;rdquo;ant -version&amp;rdquo;进行验证  maven  下载Maven并解压缩到c:\tools下 设置Maven环境变量：M2_HOME = c:\tools\apache-maven-x.x.xpath变量 %M2_HOME%\bin 运行&amp;rdquo;mvn &amp;ndash;version&amp;rdquo;进行验证  m2eclipse  通过下列update site安装:http://download.eclipse.org/technology/m2e/releases 在Window - Preferences - Maven - Installations添加上一步安装的Maven  </description>
    </item>
    
  </channel>
</rss>