<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>socialmedia on Mryqu's Notes</title><link>https://mryqu.github.io/tags/socialmedia/</link><description>Recent content in socialmedia on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 10 Jan 2016 05:57:41 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/socialmedia/index.xml" rel="self" type="application/rss+xml"/><item><title>SocialMedia Error Handling</title><link>https://mryqu.github.io/post/socialmedia_error_handling/</link><pubDate>Sun, 10 Jan 2016 05:57:41 +0000</pubDate><guid>https://mryqu.github.io/post/socialmedia_error_handling/</guid><description>Facebook - Handling Errors https://developers.facebook.com/docs/graph-api/using-graph-api#errors
Marketing API Error Codes https://developers.facebook.com/docs/marketing-api/error-reference
Games Payments Error Codes https://developers.facebook.com/docs/games_payments/fulfillment/errorcodes
List of Error Codes for Facebook&amp;rsquo;s API Facebook曾经有过错误代码列表，后来不提供了。这里提供完整错误代码列表。 http://www.fb-developers.info/tech/fb_dev/faq/general/gen_10.html
Twitter Error Codes &amp;amp; Responses https://dev.twitter.com/overview/api/response-codes
Google Analytics Core Reporting API - Standard Error Responses https://developers.google.com/analytics/devguides/reporting/core/v3/coreErrors#standard_errors
YouTube YouTube API v2.0 – Understanding API Error Responses https://developers.google.com/youtube/2.0/developers_guide_protocol_error_responses
Youtube Data API - Errors https://developers.google.com/youtube/v3/docs/errors</description></item><item><title>社交媒体API访问频次限制</title><link>https://mryqu.github.io/post/%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93api%E8%AE%BF%E9%97%AE%E9%A2%91%E6%AC%A1%E9%99%90%E5%88%B6/</link><pubDate>Sat, 07 Nov 2015 05:38:39 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93api%E8%AE%BF%E9%97%AE%E9%A2%91%E6%AC%A1%E9%99%90%E5%88%B6/</guid><description>Facebook API访问频次限制 Facebook Graph API访问频次限制 Facebook Marketing API访问频次限制 FAcebook Graph API允许每用户每60分钟200次API调用。Facebook MarketingAPI随广告用户级别变化。
Twitter API访问频次限制 TwitterAPI访问频次按15分钟为间隔。有两类桶：15分钟内允许15次调用，及15分钟内允许180次调用。Twitter搜索属于后者，在15分钟内允许180次调用。
Google Analytics API Limits and Quotas Google Analytics Core Reporting API - API Limits and Quotas
Google Analytics Real Time Reporting API - API Limits and Quotas
Google Analytics Multi-Channel Funnels Reporting API - API Limits and Quotas
每个项目每天50000个请求，可增加。
每个IP 10 QPS（query per second）。
在Developers Console上，该配额是指per-userlimit。默认设置为1秒1个查询，可被调整为最大值10。 如果你的应用从单个IP地址发出所有API请求，你需要考虑在每个请求中使用userIP或quotaUser参数以获取对每个用户QPS的满配额。 Understand YouTube Analytics API Quota Usage 暂时没有查到Youtube Analytics API固定配额，不过看起来查询维度对配额使用的影响更大。</description></item><item><title>Gradle multi-project Builds on HelloSocialMedia</title><link>https://mryqu.github.io/post/gradle_multi-project_builds_on_hellosocialmedia/</link><pubDate>Thu, 22 Oct 2015 05:38:15 +0000</pubDate><guid>https://mryqu.github.io/post/gradle_multi-project_builds_on_hellosocialmedia/</guid><description>尝试对我的HelloSocialMedia演示代码集合使用Gradle的多项目构建，项目结构如下：
HelloSocialMedia/ build.gradle settings.gradle HelloYoutubeAnalytics/ build.gradle HelloGoogleAnalytics/ build.gradle HelloTwitter4J/ build.gradle HelloRestFB/ build.gradle settings.gradle
rootProject.name = &amp;#39;HelloSocialMedia&amp;#39; include &amp;#34;HelloYoutubeAnalytics&amp;#34; include &amp;#34;HelloGoogleAnalytics&amp;#34; include &amp;#34;HelloTwitter4J&amp;#34; include &amp;#34;HelloRestFB&amp;#34; project(&amp;#34;:HelloYoutubeAnalytics&amp;#34;).name = &amp;#34;HelloSocialMedia-YoutubeAnalytics&amp;#34; project(&amp;#34;:HelloGoogleAnalytics&amp;#34;).name = &amp;#34;HelloSocialMedia-GoogleAnalytics&amp;#34; project(&amp;#34;:HelloTwitter4J&amp;#34;).name = &amp;#34;HelloSocialMedia-Twitter4J&amp;#34; project(&amp;#34;:HelloRestFB&amp;#34;).name = &amp;#34;HelloSocialMedia-RestFB&amp;#34; build.gradle
buildscript { repositories { mavenCentral() } } subprojects { apply plugin: &amp;#39;java&amp;#39; apply plugin: &amp;#39;eclipse&amp;#39; apply plugin: &amp;#39;idea&amp;#39; repositories { mavenCentral() } sourceCompatibility = 1.8 targetCompatibility = 1.8 } HelloYoutubeAnalytics/build.gradle
jar { baseName = &amp;#39;hello-youbube-analytics&amp;#39; version = &amp;#39;0.</description></item><item><title>Hello RestFB</title><link>https://mryqu.github.io/post/hello_restfb/</link><pubDate>Wed, 21 Oct 2015 05:55:32 +0000</pubDate><guid>https://mryqu.github.io/post/hello_restfb/</guid><description>RestFB是一个简单灵活的Facebook图谱API和REST客户端Java库。本演示用它来获取一个Facebook主页下的帖子、评论及回复。
获取Facebook AccessToken 示例代码 package com.yqu.restfb; import java.util.List; import com.restfb.Connection; import com.restfb.DefaultFacebookClient; import com.restfb.FacebookClient; import com.restfb.Parameter; import com.restfb.Version; import com.restfb.types.Comment; import com.restfb.types.Page; import com.restfb.types.Post; public class HelloRestFB { public static void main(String[] args) { FacebookClient facebookClient = new DefaultFacebookClient( MY_ACCESS_TOKEN, Version.VERSION_2_5); Page pageInfo = (Page) facebookClient.fetchObject(&amp;#34;YquTest&amp;#34;, Page.class, new Parameter[0]); Connection postConnection = facebookClient.fetchConnection( pageInfo.getId() + &amp;#34;/feed&amp;#34;, Post.class, new Parameter[] { Parameter.with(&amp;#34;limit&amp;#34;, 10), Parameter.with(&amp;#34;include_hidden&amp;#34;, &amp;#34;true&amp;#34;) }); if (postConnection.getData().size() &amp;lt;= 0) { System.</description></item><item><title>Hello Twitter4J</title><link>https://mryqu.github.io/post/hello_twitter4j/</link><pubDate>Mon, 19 Oct 2015 06:10:11 +0000</pubDate><guid>https://mryqu.github.io/post/hello_twitter4j/</guid><description>Twitter4J是Twitter API的第三方Java库。本演示用它通过关键字搜索推文。
获取Twitter应用证书 示例代码
package com.yqu.twitter4j; import twitter4j.Query; import twitter4j.QueryResult; import twitter4j.Status; import twitter4j.Twitter; import twitter4j.TwitterFactory; public class HelloTwitter4J { // I18NOK:CLS public static void main(String[] args) { try { // The factory instance is re-useable and thread safe. Twitter twitter = TwitterFactory.getSingleton(); Query query = new Query(&amp;#34;夏洛特烦恼&amp;#34;); query.setLang(&amp;#34;zh&amp;#34;); query.setCount(10); QueryResult result = twitter.search(query); for (Status status : result.getTweets()) { System.out.println(status.getCreatedAt()+&amp;#34;:&amp;#34;+status.getText()); } } catch (Exception e) { e.printStackTrace(); } } } twitter.</description></item><item><title>Hello Youtube Analytics</title><link>https://mryqu.github.io/post/hello_youtube_analytics/</link><pubDate>Sat, 17 Oct 2015 06:10:21 +0000</pubDate><guid>https://mryqu.github.io/post/hello_youtube_analytics/</guid><description>Google Credential设置见我之前的博文解决 &amp;ldquo;Access Not Configured. The API (YouTube Analytics API) is not enabled for your project.&amp;rdquo;。
示例代码：
package com.yqu.yt; import java.io.IOException; import java.io.PrintStream; import java.math.BigDecimal; import java.util.List; import com.google.api.client.auth.oauth2.Credential; import com.google.api.client.googleapis.auth.oauth2.GoogleCredential; import com.google.api.client.http.HttpTransport; import com.google.api.client.http.javanet.NetHttpTransport; import com.google.api.client.json.JsonFactory; import com.google.api.client.json.jackson2.JacksonFactory; import com.google.api.services.youtube.YouTube; import com.google.api.services.youtube.model.Channel; import com.google.api.services.youtube.model.ChannelListResponse; import com.google.api.services.youtubeAnalytics.YouTubeAnalytics; import com.google.api.services.youtubeAnalytics.model.ResultTable; import com.google.api.services.youtubeAnalytics.model.ResultTable.ColumnHeaders; import com.google.common.collect.Lists; public class HelloYoutubeAnalytics { //I18NOK:CLS private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport(); private static final JsonFactory JSON_FACTORY = new JacksonFactory(); private static YouTube youtube; private static YouTubeAnalytics analytics; public static void main(String[] args) { // These scopes are required to access information about the // authenticated user&amp;#39;s YouTube channel as well as Analytics // data for that channel.</description></item><item><title>Hello Google Analytics</title><link>https://mryqu.github.io/post/hello_google_analytics/</link><pubDate>Mon, 28 Sep 2015 05:57:14 +0000</pubDate><guid>https://mryqu.github.io/post/hello_google_analytics/</guid><description>Google Credential设置见我之前的博文Google Analytics API Error 403: &amp;ldquo;User does not have any Google Analytics Account&amp;rdquo;。
示例代码：
package com.yqu.ga; import java.io.File; import java.io.IOException; import java.io.InputStream; import java.util.List; import com.google.api.client.googleapis.auth.oauth2.GoogleCredential; import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport; import com.google.api.client.http.HttpRequest; import com.google.api.client.http.HttpRequestInitializer; import com.google.api.client.http.HttpTransport; import com.google.api.client.json.JsonFactory; import com.google.api.client.json.gson.GsonFactory; import com.google.api.services.analytics.Analytics; import com.google.api.services.analytics.AnalyticsScopes; import com.google.api.services.analytics.model.Accounts; import com.google.api.services.analytics.model.GaData; import com.google.api.services.analytics.model.GaData.ColumnHeaders; import com.google.api.services.analytics.model.GaData.Query; import com.google.api.services.analytics.model.Profiles; import com.google.api.services.analytics.model.Webproperties; public class HelloAnalytics { // I18NOK:CLS private static enum AuthType { SERVICE_ACCOUNT, SERVICE_ACCOUNT_P12, OAUTH }; protected static final String APPLICATION_NAME = &amp;#34;Hello Analytics&amp;#34;; protected static final JsonFactory JSON_FACTORY = GsonFactory .</description></item><item><title>SocialMedia API Policy and Terms</title><link>https://mryqu.github.io/post/socialmedia_api_policy_and_terms/</link><pubDate>Sat, 26 Sep 2015 07:01:32 +0000</pubDate><guid>https://mryqu.github.io/post/socialmedia_api_policy_and_terms/</guid><description>Facebook Facebook Terms and Policies: https://www.facebook.com/policies Statement of Rights and Responsibilities: https://www.facebook.com/legal/terms Data Policy: https://www.facebook.com/about/privacy
Twitter Twitter Terms of Service: https://twitter.com/tos?lang=en Twitter Privacy Policy: https://twitter.com/privacy?lang=en Twitter Developer Agreement: https://dev.twitter.com/overview/terms/agreement Twitter Developer Policy: https://dev.twitter.com/overview/terms/policy
Google (Google Analytics &amp;amp; YouTube Analytics) Google APIs Terms of Service: https://developers.google.com/terms/ Google Privacy Policy: https://www.google.com/intl/en/policies/privacy/
LinkedIn User Agreement: https://www.linkedin.com/legal/user-agreement Privacy Policy: https://www.linkedin.com/legal/privacy-policy API Terms of Use: https://developer.linkedin.com/legal/api-terms-of-use Cookies on the LinkedIn site: https://www.linkedin.com/legal/cookie_policy
微博 开发者协议: http://open.weibo.com/wiki/开发者协议 应用运营管理规范: http://open.</description></item><item><title>Google Analytics之segment（分块、分割、细分）</title><link>https://mryqu.github.io/post/google_analytics%E4%B9%8Bsegment%E5%88%86%E5%9D%97%E5%88%86%E5%89%B2%E7%BB%86%E5%88%86/</link><pubDate>Tue, 22 Sep 2015 06:44:04 +0000</pubDate><guid>https://mryqu.github.io/post/google_analytics%E4%B9%8Bsegment%E5%88%86%E5%9D%97%E5%88%86%E5%89%B2%E7%BB%86%E5%88%86/</guid><description>Segment是指你的GoogleAnalytics（分析）数据子集。例如，在你的整个用户群中，你可使用一个segment指定来自特定国家或城市的用户，使用另一个segment指定购买特定产品系列或访问网站上特定部分的用户。 Segment可让你隔离出这些数据子集并进行分析，从而检查并响应业务中的各个子趋势。例如，如果你发现特定地理区域的用户所购买的特定产品系列的数量低于正常水平，就可以查看是不是因为竞争对手在以更低的价格销售同类型的产品。如果是这样，你可以通过向那些用户提供忠诚度折扣来弱化竞争对手在价格方面的优势。 你还可以使用segment作为再营销受众群体的基础。例如，您可针对男装页面的访问者创建一个用户细分，然后利用重点宣传您添加到这些页面上的新产品的再营销广告系列来专门定位这些用户（再营销受众群体）。
Segment类型 Segment代表会话子集或用户子集：
会话子集：例如，源自广告系列 A 的所有会话；发生购买行为的所有会话 用户子集：例如，之前有过购买行为的用户；向其购物车添加了商品，但未完成购买的用户 先了解一下 Google Analytics（分析）用户模型有助于了解segment的工作原理。 GoogleAnalytics（分析）用户模型由三大要素构成：
用户 会话 - 用户到达您的网站资源并与之互动。所有这些用户互动都会被划组到所谓的会话中。 点击（Hit）-在会话中，用户会与您的网站资源互动。每次互动都被称为一次点击。这些点击包括网页浏览、事件、交易等等。 一个用户可以有多个会话，每个会话可以有多次点击。下图直观显示了这一关系： Google Analytics（分析）用户模型
使用Segment Segment是非破坏性的过滤器，不会更改您的基础数据。应用segment之后，它会在您浏览报告的过程中始终保持有效状态，直到您将其移除。您一次最多可以应用四个细分，并可在报告中将各个细分的结果放在一起比较。 除分析数据之外，Segment还可以用于构建再营销受众群体。 GoogleAnalytics（分析）包含预定义segment（系统segment），您可以按原样使用这些segment，也可以通过复制并修改这些segment来创建新的自定义segment。您也可以从头开始构建自己的segment。另外，您可以从 Google Analytics（分析）解决方案库导入segment，这是一个免费的市场，GoogleAnalytics（用户）可在其中分享各种segment以及开发的其他解决方案。
Segment的定义和范围 在 Google Analytics（分析）报告中，您可以通过创建基于维度和指标的过滤器来定义segment：
用户类型完全匹配“回访用户” 国家/地区完全匹配“美国” 电子商务转化率&amp;gt;“0.2%” 除了您在过滤器中使用的维度和指标之外，您还可以为过滤器设置数据范围。您可以使用三种范围：
点击：单次操作中的行为，例如查看网页或播放视频。 会话：单次会话中的行为；例如在会话过程中用户完成的目标或产生的收入。 用户：在所用日期范围（最多 90天）内所有会话中的行为；例如，在日期范围内的所有会话中用户完成的所有目标或产生的所有收入。 你可以使用segment生成工具定义组成segment的过滤器。
Segment限制 Segment需要遵守以下限制：
Segment总数上限 每个帐户 1000个segment 每个数据视图中，每位用户 100个segment 每个数据视图，所有用户共享100个segment 这些限制适用于系统segment以及您创建或导入的所有segment。达到这些数量上限后，你就无法创建或导入更多segment。 应用于报告的segment 你一次最多可以在报告中应用4个segment。
日期范围 使用基于用户的segment时，您在报告中应用的日期范围不能超过90天。如果您已将日期范围设置为90天以上，那么当您创建基于用户的segment时，GoogleAnalytics（分析）会从开始日期算起，将该日期范围重置为90天。 基于“第一次会话的日期”的segment的最大范围是31天。
多渠道路径 请不要在多渠道路径报告中使用segment，你可以使用转化segment。
Segment与filter的区别 在Googleanalytics中，Segment与filter都侧重于对数据的切片。在很多情况下，应用这两者返回的结果是相同的，但其本质是不同的。那么，何时应该使用segment，何时应该使用filter呢？ 如果你想选择整个访问则使用segment，如果想查找所有访问中的特定事件、pageviews等则使用filter。 Segment：对于segment，每个访问都检查是否符合segment条件。对于满足条件的会话，所有行都会被获得。对于不满足条件的会话，不会获得任何行。 Filter：对于filter，所有访问的所有行都会检查是否满足条件，仅满足过滤器条件的行会被获得。 个人感受：Google analytics中的filter就像SQL中的where语句，而segment就像SQL中groupby相应的having语句。
参考 About Segments
The key difference between segments and filters</description></item></channel></rss>