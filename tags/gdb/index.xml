<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gdb on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/gdb/</link>
    <description>Recent content in Gdb on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 24 Oct 2017 05:59:46 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/gdb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Golang] 折腾一下Golang项目调试</title>
      <link>https://mryqu.github.io/post/golang_%E6%8A%98%E8%85%BE%E4%B8%80%E4%B8%8Bgolang%E9%A1%B9%E7%9B%AE%E8%B0%83%E8%AF%95/</link>
      <pubDate>Tue, 24 Oct 2017 05:59:46 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/golang_%E6%8A%98%E8%85%BE%E4%B8%80%E4%B8%8Bgolang%E9%A1%B9%E7%9B%AE%E8%B0%83%E8%AF%95/</guid>
      <description>想装个MinGW-W64玩玩64位GDB，才发现继上一博文MinGW安装和使用已三年了，不经意间到看到了下列帖子： - MinGW MinGW-w64 TDM-GCC等工具链之间的区别与联系 - 发现个新环境msys2 - MinGW、MinGW-w64 与TDM-GCC 应该如何选择？
对于mingw-w64、tdm-gcc、Win-builds这三个小纠结一会，觉得自己本身也就是用一下GDB，还是去https://sourceforge.net/projects/mingw-w64/直接下载MinGW-W64好了。
MinGW-W64安装 所用MinGW-W64安装配置：
| 配置项 | 配置值 | | - | - | | Architecture | x86_64 | | Threads | posix | | Exception | seh |
Golang项目编译 编译Golang项目采用 go build -gcflags “-N -l” 关闭内联优化。
GDB调试 载入runtime-gdb.py脚本以对Go运行时结构进行完美打印和转换(例如显示slice和map值、查看goroutine等)： - 参数载入：gdb -d $GCROOT - 手工载入：source C:\Go\src\runtime\runtime-gdb.py 折腾一会，最后还是折在GDB on windows with golang: buildsym_init Assertion &amp;ldquo;free_pendings == NULL&amp;rdquo; failed.这个问题上，一调试就DDB崩了，貌似目前无解。
Delve调试 不过Debugging Go Code with GDB里还介绍了另外一个对Golang支持更好的工具Delve。上手容易，有些命令跟GDB差不多。好了，就折腾到这里了。目前不太需要的东东就不花费力气了。</description>
    </item>
    
  </channel>
</rss>