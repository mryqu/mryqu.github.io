<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yaml on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/yaml/</link>
    <description>Recent content in Yaml on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 23 Oct 2017 05:47:58 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/yaml/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>学习一下TOML</title>
      <link>https://mryqu.github.io/post/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Btoml/</link>
      <pubDate>Mon, 23 Oct 2017 05:47:58 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Btoml/</guid>
      <description>TOML（Tom&amp;rsquo;s Obvious, Minimal Language）是（GitHub的联合创始人及前CEO）Tom Preston-Werner于2013年创建的语言，其目标是成为一个小规模的易于使用的语义化配置文件格式。TOML被设计为可以无二义性的转换为一个哈希表(Hash table)。它是YAML和JSON的替代品，跟JSON相对对人类更友好，比YAML更简单。 GitHub：toml-lang/toml
Learn toml in Y minutes
[](https://www.cnblogs.com/unqiang/p/6399136.html)
TOML简介 （转）</description>
    </item>
    
    <item>
      <title>Java解析YAML</title>
      <link>https://mryqu.github.io/post/java%E8%A7%A3%E6%9E%90yaml/</link>
      <pubDate>Wed, 01 Jul 2015 05:37:02 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/java%E8%A7%A3%E6%9E%90yaml/</guid>
      <description>继前博文YAML介绍了YAML语法，本文将着重研究Java解析YAML。当前还在维护的YAML解析器/生成器有： - SnakeYAML - 完整的YAML 1.1解析器，尤其是SnakeYAML能够分析来自于规范的所有示例 - 支持Unicode，包括UTF-8/UTF-16的输入/输出 - 为序列化和反序列化本地的Java对象提供了高级API - 支持YAML类型库中的所有类型 - 比较理性的错误信息 - YamlBeans：支持YAML 1.0和1.1 - FasterXML/jackson-dataformat-yaml：处于原型阶段
SnakeYAML和YamlBeans都在GoogleCode仓库时，SnakeYAML的使用人数和提交者均优于YamlBeans。目前大多数帖子还是推荐选用SnakeYAML，而SpringBoot读取YAML配置采用的就是SnakeYAML。为了测试SnakeYAML，我首先创建了一个HelloSnakeYAML项目。
conf.yaml spring: application: name: cruncher datasource: driverClassName: com.mysql.jdbc.Driver url: jdbc:mysql://localhost/test server: port: 9000  Contact.java package com.yqu.yaml; import java.util.List; public class Contact { private String name; private int age; private List phoneNumbers; public Contact(String name, int age, List phoneNumbers) { this.name = name; this.age = age; this.phoneNumbers = phoneNumbers; } public String getName() { return name; } public void setName(String name) { this.</description>
    </item>
    
    <item>
      <title>YAML</title>
      <link>https://mryqu.github.io/post/yaml/</link>
      <pubDate>Fri, 22 May 2015 22:55:52 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/yaml/</guid>
      <description>简介 YAML是一个可读性高的数据序列化格式。YAML参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822。ClarkEvans在2001年首次发表了这种语言 ，另外Ingy d?t Net与OrenBen-Kiki也是这语言的共同设计者。目前已经有数种编程语言或脚本语言支援（或者说解析）这种语言。 _YAML_是&amp;rdquo;YAML Ain&amp;rsquo;t a Markup Language&amp;rdquo;（YAML不是一种标记语言）的递回缩写。在开发的这种语言时，_YAML_的意思其实是：&amp;rdquo;Yet Another Markup Language&amp;rdquo;（仍是一种标记语言），但为了强调这种语言以数据做为中心，而不是以标记语言为重点，而用反向缩略语重新命名。
功能 YAML的语法和其他高阶语言类似，并且可以简单表达列表、哈希表，标量等数据形式。它使用空白符号缩排和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、调试时的转储内容、文件标题（例如：许多电子邮件标题格式和YAML非常接近）。尽管它比较适合用来表达分层数据，不过也有紧凑的语法可以表示关联性数据。由于YAML使用空白字符和分行来分隔数据，使得它特别适合用grep／Python／Perl／Ruby操作。其让人最容易上手的特色是巧妙避开各种封闭符号，如：引号、各种括号等，这些符号在嵌套结构时会变得复杂而难以辨认。
范例 简单的文件 数据结构可以用类似大纲的缩排方式呈现
--- receipt: Oz-Ware Purchase Invoice date: 2007-08-06 customer: given: Dorothy family: Gale items: - part_no: A4786 descrip: Water Bucket (Filled) price: 1.47 quantity: 4 - part_no: E1628 descrip: High Heeled &amp;quot;Ruby&amp;quot; Slippers price: 100.27 quantity: 1 bill-to: &amp;amp;id001 street: | 123 Tornado Alley Suite 16 city: East Westville state: KS ship-to: *id001 specialDelivery: &amp;gt; Follow the Yellow Brick Road to the Emerald City.</description>
    </item>
    
  </channel>
</rss>