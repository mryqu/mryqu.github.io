<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>model/view/controlle on Mryqu's Notes</title><link>https://mryqu.github.io/tags/model/view/controlle/</link><description>Recent content in model/view/controlle on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="https://mryqu.github.io/tags/model/view/controlle/index.xml" rel="self" type="application/rss+xml"/><item><title>重温MVC:一个很好的MVC图</title><link>https://mryqu.github.io/post/%E9%87%8D%E6%B8%A9mvc%E4%B8%80%E4%B8%AA%E5%BE%88%E5%A5%BD%E7%9A%84mvc%E5%9B%BE/</link><pubDate>Wed, 26 Mar 2014 22:28:35 +0000</pubDate><guid>https://mryqu.github.io/post/%E9%87%8D%E6%B8%A9mvc%E4%B8%80%E4%B8%AA%E5%BE%88%E5%A5%BD%E7%9A%84mvc%E5%9B%BE/</guid><description>今天看了一个帖子A terrific Model View Controller (MVC) diagram，感觉文中说的很对：一个技术如果能简洁地表达出来，才容易被人记住并记的牢。该文中的Model/View/ControllerUML图共有两个，第一个图非常简单，仅展示作者用于控制器、视图和模型的符号。第二个图展示了MVC模式允许的操作和禁止的操作。
用户与视图对象交互。 视图对象和控制器对象可以相互访问调用。 不同的控制器对象之间可以相互访问调用。 控制器对象可以访问调用模型对象。 除了上面这四种访问方式，禁止对象之间的其他通信方法。</description></item></channel></rss>