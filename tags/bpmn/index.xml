<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bpmn on Mryqu's Notes</title><link>https://mryqu.github.io/tags/bpmn/</link><description>Recent content in bpmn on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 31 Mar 2015 06:08:51 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/bpmn/index.xml" rel="self" type="application/rss+xml"/><item><title>粗览基于Eclipse RCP架构的Activiti Designer实现(图文版)</title><link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88%E5%9F%BA%E4%BA%8Eeclipse_rcp%E6%9E%B6%E6%9E%84%E7%9A%84activiti_designer%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E7%89%88/</link><pubDate>Tue, 31 Mar 2015 06:08:51 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88%E5%9F%BA%E4%BA%8Eeclipse_rcp%E6%9E%B6%E6%9E%84%E7%9A%84activiti_designer%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E7%89%88/</guid><description>org.activiti.designer.feature contains an Eclipse feature definition, which groups the variousprojects into the installable Activiti Designer feature.
org.activiti.designer.eclipse plug-in contains the main extensions of Eclipse extension points and a lotof shared code for working with the model, saving resources andutilities.
org.activiti.designer.eclipse.extension.ExportMarshallerextension-point Activiti Designer Export Marshaller: Use this extension point toprovide custom output marshallers when Activiti diagrams areexported.
org.activiti.designer.eclipse.extension.ProcessValidatorextension-point Activiti Designer Process Validator: Use this extension point toprovide validation when Activiti diagrams are validated.</description></item><item><title>粗览基于Eclipse RCP架构的Activiti Designer实现（思维导图版）</title><link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88%E5%9F%BA%E4%BA%8Eeclipse_rcp%E6%9E%B6%E6%9E%84%E7%9A%84activiti_designer%E5%AE%9E%E7%8E%B0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E7%89%88/</link><pubDate>Mon, 30 Mar 2015 05:02:44 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88%E5%9F%BA%E4%BA%8Eeclipse_rcp%E6%9E%B6%E6%9E%84%E7%9A%84activiti_designer%E5%AE%9E%E7%8E%B0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E7%89%88/</guid><description/></item><item><title>Activiti Designer开发环境配置</title><link>https://mryqu.github.io/post/activiti_designer%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 27 Mar 2015 08:51:10 +0000</pubDate><guid>https://mryqu.github.io/post/activiti_designer%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid><description>Download eclipse-modeling-juno-SR2-win32-x86_64.zip,eclipse-rcp-juno-SR2-win32-x86_64.zip and extract to the sameeclipse folder Use Eclipse juno instead of kepler which can easily consume your day!!! Add Eclipse Graphiti SDK 0.10.1 from update site http://archive.eclipse.org/graphiti/updates/0.10.1/ Add the following location as source code repository: https://github.com/Activiti/Activiti-Designer Import Maven project - Activiti Designer Open a console and navigate to the directory of your Eclipseworkspace and then into the org.activiti.designer.parent directory,which is of course the directory of the project with the same name.</description></item><item><title>GoJS BPMN元素界面实现分析</title><link>https://mryqu.github.io/post/gojs_bpmn%E5%85%83%E7%B4%A0%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</link><pubDate>Wed, 11 Mar 2015 20:10:35 +0000</pubDate><guid>https://mryqu.github.io/post/gojs_bpmn%E5%85%83%E7%B4%A0%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</guid><description>GoJS BPMN里面的BPMN元素采用过不是PNG/JPEG这样的静态图标，而是通过GoJS在Cavas绘出来的。 由BPMN.js可知，一个BPMN元素是一个go.Node，内部大致包含go.Panel、go.Shape、go.TextBlock等对象，用于绘制外层的正方形、填充内部颜色、添加图标和文字。 如果创建自己定制的BPMN元素，最麻烦的就是图标了。现在我来看一下GoJS BPMN扩展里面的图标是怎么保存和绘制的。 GoJS BPMN扩展里面大部分的图标都已经在go.js里面以源代码的形式定义了，只有四个是在BPMN.js里面通过go.Shape.defineFigureGenerator方法定制的，分别是Empty、Annotation、BpmnTaskManual和BpmnTaskService。这四个图标的内容是GoJS geometry的格式保存的。 所有这些图标可以通过与go.Shape的figure进行绑定，由GoJS驱动完成底层绘制。我自己做了一个简单样例，对这些内嵌图标和BPMN定制图标稍微玩了点花样 http://jsfiddle.net/mryqu/mywy0nhz/ 显示效果如下：</description></item><item><title>Activiti与GoJS BPMN支持的BPMN元素对比</title><link>https://mryqu.github.io/post/activiti%E4%B8%8Egojs_bpmn%E6%94%AF%E6%8C%81%E7%9A%84bpmn%E5%85%83%E7%B4%A0%E5%AF%B9%E6%AF%94/</link><pubDate>Tue, 03 Mar 2015 23:00:11 +0000</pubDate><guid>https://mryqu.github.io/post/activiti%E4%B8%8Egojs_bpmn%E6%94%AF%E6%8C%81%E7%9A%84bpmn%E5%85%83%E7%B4%A0%E5%AF%B9%E6%AF%94/</guid><description>首先抱怨一下,GoJS BPMN扩展中有两个图标和标题是一样的,我看了又看还是分不清.</description></item><item><title>浏览器的本地存储在GoJS BPMN样例中的使用</title><link>https://mryqu.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%9C%A8gojs_bpmn%E6%A0%B7%E4%BE%8B%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 02 Mar 2015 20:06:19 +0000</pubDate><guid>https://mryqu.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%9C%A8gojs_bpmn%E6%A0%B7%E4%BE%8B%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>GoJS BPMN样例中可以存储BPMN模型，它采用的存储媒体是浏览器的本地存储。Web Storage(W3C WebApps Working Group)中定义了如下的Storage接口：
interface Storage { readonly attribute unsigned long length; DOMString key(unsigned long index); getter DOMString getItem(DOMString key); setter creator void setItem(DOMString key, DOMString value); deleter void removeItem(DOMString key); void clear(); }; GoJS BPMN样例采用的方法如下：
function checkLocalStorage() { return (typeof (Storage) !== &amp;#34;undefined&amp;#34;) &amp;amp;&amp;amp; (window.localStorage !== undefined); } window.localStorage.setItem(key, value) window.localStorage.getItem(key) window.localStorage.removeItem(key) 我的测试是存储一个名为yqu_GoJSBPMN_Samp1的模型。 如果想清除我的小测试所用的本地存储，可以通过chrome://settings/cookies#cont页面来完成： 参考 MDN：DOM Storage guide DOM Storage</description></item><item><title>将GoJS和Activiti Explorer熬成一锅粥</title><link>https://mryqu.github.io/post/%E5%B0%86gojs%E5%92%8Cactiviti_explorer%E7%86%AC%E6%88%90%E4%B8%80%E9%94%85%E7%B2%A5/</link><pubDate>Fri, 27 Feb 2015 20:05:26 +0000</pubDate><guid>https://mryqu.github.io/post/%E5%B0%86gojs%E5%92%8Cactiviti_explorer%E7%86%AC%E6%88%90%E4%B8%80%E9%94%85%E7%B2%A5/</guid><description>熬粥时，一开始创建一个跟editor-app平行的独立目录gojs-editor-app，结果我的Chrome浏览器报“Resourceinterpreted as stylesheet but transferred with MIME typetext/html”错误，GoJS的所有Javascript和stylesheet文件(例如BPMN.js和BPMN.css)都被加了料从Tomcat发给浏览器变成了html格式。 看了下面两个帖子，没有丝毫头绪： http://stackoverflow.com/questions/3467404/chrome-says-resource-interpreted-as-script-but-transferred-with-mime-type-tex
thttp://stackoverflow.com/questions/22631158/resource-interpreted-as-stylesheet-but-transferred-with-mime-type-text-html-see
搜了一下ActivitiExplorer的配置，看到org.activiti.explorer.filter.ExplorerFilter里有六个路径(&amp;quot;/ui&amp;quot;、&amp;quot;/VAADIN&amp;quot;、&amp;quot;/modeler.html&amp;quot;、&amp;quot;/editor-app&amp;quot;、&amp;quot;/service&amp;quot;、&amp;quot;/diagram-viewer&amp;quot;)走了特殊的过滤器。只好将GoJS的内容都转到Activiti已有的editor-app目录，这下齐活了。</description></item><item><title>玩玩GoJS BPMN样例</title><link>https://mryqu.github.io/post/%E7%8E%A9%E7%8E%A9gojs_bpmn%E6%A0%B7%E4%BE%8B/</link><pubDate>Wed, 25 Feb 2015 19:50:09 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%8E%A9%E7%8E%A9gojs_bpmn%E6%A0%B7%E4%BE%8B/</guid><description>玩一玩GoJS，GoJS是Northwoods Software的产品。Northwoods Software创立于1995年，专注于交互图控件和类库。旗下四款产品：
GoJS：用于在HTML上创建交互图的纯javaSCript库，GoJS支持复杂的模板定义和数据绑定。 GoDiagram：用于WinForms的.NET图控件。 GoXam：用于WPF/Silverlight的图控件。 JGo：用于Swing/SWT中创建交互图的java库。 试了一下GoJS的BPMN样例，很容易导出SVG或PNG/JPEG等格式的图像数据。其中：
由于GoJS是经过代码混淆的，不能对makeSVG方法进行确定的分析，大概是采用HTMLCanvasElement.getContext(&amp;lsquo;2d&amp;rsquo;).drawImage(&amp;hellip;).getImageData(&amp;hellip;)获得的 makeImage和makeImageData方法通过HTMLCanvasElement.toDataURL()方法实现的 在控制台执行window.myDiagram.model.toJson()，返回如下结果：
{ &amp;#34;class&amp;#34;: &amp;#34;go.GraphLinksModel&amp;#34;, &amp;#34;linkFromPortIdProperty&amp;#34;: &amp;#34;fromPort&amp;#34;, &amp;#34;linkToPortIdProperty&amp;#34;: &amp;#34;toPort&amp;#34;, &amp;#34;nodeDataArray&amp;#34;: [ { &amp;#34;category&amp;#34;: &amp;#34;activity&amp;#34;, &amp;#34;item&amp;#34;: &amp;#34;User task&amp;#34;, &amp;#34;key&amp;#34;: 7, &amp;#34;loc&amp;#34;: &amp;#34;388.33645784919577 140.35229369949943&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;User Task&amp;#34;, &amp;#34;taskType&amp;#34;: 2, &amp;#34;boundaryEventArray&amp;#34;: [ ], &amp;#34;size&amp;#34;: &amp;#34;120 80&amp;#34; }, { &amp;#34;category&amp;#34;: &amp;#34;event&amp;#34;, &amp;#34;item&amp;#34;: &amp;#34;End&amp;#34;, &amp;#34;key&amp;#34;: 104, &amp;#34;loc&amp;#34;: &amp;#34;569.86545617508 140.90913111767696&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;End&amp;#34;, &amp;#34;eventType&amp;#34;: 1, &amp;#34;eventDimension&amp;#34;: 8 }, { &amp;#34;category&amp;#34;: &amp;#34;event&amp;#34;, &amp;#34;item&amp;#34;: &amp;#34;start&amp;#34;, &amp;#34;key&amp;#34;: 101, &amp;#34;loc&amp;#34;: &amp;#34;183.42028795985397 135.34075693590137&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;Start&amp;#34;, &amp;#34;eventType&amp;#34;: 1, &amp;#34;eventDimension&amp;#34;: 1 } ], &amp;#34;linkDataArray&amp;#34;: [ { &amp;#34;from&amp;#34;: 101, &amp;#34;to&amp;#34;: 7, &amp;#34;fromPort&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;toPort&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;points&amp;#34;: [ 204.</description></item><item><title>Activiti模型编辑器之前前身：Oryx editor</title><link>https://mryqu.github.io/post/activiti%E6%A8%A1%E5%9E%8B%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E5%89%8D%E5%89%8D%E8%BA%ABoryx_editor/</link><pubDate>Wed, 11 Feb 2015 21:57:18 +0000</pubDate><guid>https://mryqu.github.io/post/activiti%E6%A8%A1%E5%9E%8B%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E5%89%8D%E5%89%8D%E8%BA%ABoryx_editor/</guid><description>我的The history and commercial version of Activiti Modeler博文里提到Activiti建模器组件是由Signavio捐赠的Signavio Core Components project， 可以说Activiti模型组件的前身是Signavio Core Components project， 那么Signavio Core Components project的前身又是什么呢？ Signavio (wiki)里面提到了Signavio是德国波茨坦大学哈索普莱特纳研究院（HPI）毕业生团队创建的。在Signavio之前，Signavio的这些创始人在HPI从2006年开始开发了世界上第一个用于BPMN的web建模器Oryx，一个学术性开源项目。Oryx就是Signavio Core Components project开源版和Signavio Process Editor商业版的蓝图。随着Signavio公司的产生，Oryx项目被废弃了、不再进行维护。 Oryx开发团队
答案就是：Signavio Core Componentsproject的前身，即Activiti模型编辑器之前前身是Oryx。Oryx里面有一些设计文档，对学习Activiti建模器组件仍然有一定的帮助。
参考 http://en.wikipedia.org/wiki/Signavio http://bpt.hpi.uni-potsdam.de/Oryx/News https://github.com/Activiti http://code.google.com/p/signavio-core-components/ https://code.google.com/p/oryx-editor/</description></item><item><title>业务流程建模标注工具比较</title><link>https://mryqu.github.io/post/%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%BB%BA%E6%A8%A1%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83/</link><pubDate>Tue, 10 Feb 2015 20:03:36 +0000</pubDate><guid>https://mryqu.github.io/post/%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%BB%BA%E6%A8%A1%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83/</guid><description>原文http://en.wikipedia.org/wiki/Comparison_of_Business_Process_Modeling_Notation_tools ，留着学习参考、技术选型。
General References Alfresco. &amp;ldquo;Alfresco launches Activiti BPMN 2.0 Business Process Engine&amp;rdquo;.Retrieved 17September 2013. Activiti. &amp;ldquo;Activiti Readme&amp;rdquo;.Retrieved Activiti. &amp;ldquo;Activiti 5.13 User Guide&amp;rdquo;. Retrieved 17September 2013. Altova GmbH. &amp;ldquo;ALTOVA? END-USER LICENSE AGREEMENT&amp;rdquo;. Retrieved 17September 2013. Trisotech. &amp;ldquo;BPMN Web Modeler Releases&amp;rdquo;. Bonitasoft. &amp;ldquo;Download BPM Software And Documentation&amp;rdquo;.Retrieved 17September 2013. semture News. &amp;ldquo;News&amp;rdquo;.Retrieved 12March 2014. Sparx System&amp;rsquo;s EnterpriseArchitect. &amp;ldquo;Enterprise Architect End User License Agreement (EULA)&amp;rdquo;.Retrieved 18September 2013. http://sourceforge.net/projects/bpmn http://www.autonomy.com/products/process-automation http://www.visual-paradigm.com/product/lz/ http://www.showgen.com http://www.itp-commerce.com RunaWFE.</description></item><item><title>了解Activiti组件</title><link>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3activiti%E7%BB%84%E4%BB%B6/</link><pubDate>Sat, 07 Feb 2015 18:19:05 +0000</pubDate><guid>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3activiti%E7%BB%84%E4%BB%B6/</guid><description>Activiti 简介 Activiti作为一个遵从 Apache许可的工作流和业务流程管理开源平台，其核心是基于 Java 的超快速、超稳定的 BPMN 2.0流程引擎，强调流程服务的可嵌入性和可扩展性，同时更加强调面向业务人员。Activiti可以运行在任何JAVA程序中：单机、服务器、集群或云上。
Activiti 组件 Activiti Modeler—建模器Activiti建模器是基于开源的Signavio流程编辑器的一个定制版本，可以使用浏览器图形化地编辑BPMN2.0兼容流程，流程文件被存储在数据库模型仓库内。Activiti团队已经停止Activiti建模器的活跃开发，目前仍保留在ActivitiExplorer内。 Activiti Designer—设计器Activiti设计器是Eclipse插件形式的，除了可以建模BPMN2.0流程，还支持Activiti特定的扩展，可以发挥Activiti流程和引擎的全部潜能。 Activiti Kickstart—基于表格的流程设计在Activiti Explorer的Model workspace里新建模型时选择Table-drivendefination时就是所谓的ActivitiKickstart，现在Activiti Designer里也包含这一功能。 Activiti ExplorerExplorer是流程引擎的Web用户控制台。使用它来进行任务管理、流程实例检查、管理和基于历史统计数据查看报表等等。它不是一个的最终客户可用的成熟监控和管理应用程序，仅用于演示Activiti如何用于用户的应用中。 Activiti RestActiviti引擎的 REST API。此外，曾经存在过下面两个组件（至少 Activiti 5.0-alpha4版本）： ActivitiProbe：一个对流程引擎运行期实例提供管理及监控的web应用程序。包含部署的管理、流程定义的管理、数据库表的检视、日志查看、事务的平均执行时间、失败多次的工作等功能。已经变成ActivitiExplorer的一部分 Activiti Cycle：BPM协作用具，改用camunda Cycle了 参考 Activiti官方网站 Activiti用户指南 Activiti组件 Activiti开发指南 Activiti Javadoc Activiti源代码(GitHub) Adhoc workflow with Activiti: introducing Activiti KickStart Activiti Cycle explained Easy Workflows - Activiti Kickstart Activiti - 新一代的开源 BPM 引擎</description></item></channel></rss>