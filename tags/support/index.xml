<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Support on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/support/</link>
    <description>Recent content in Support on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 25 Dec 2015 06:10:29 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/support/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[C&#43;&#43;] 我服务器上的GCC版本不支持C&#43;&#43;11特性</title>
      <link>https://mryqu.github.io/post/c&#43;&#43;_%E6%88%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84gcc%E7%89%88%E6%9C%AC%E4%B8%8D%E6%94%AF%E6%8C%81c&#43;&#43;11%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 25 Dec 2015 06:10:29 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/c&#43;&#43;_%E6%88%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84gcc%E7%89%88%E6%9C%AC%E4%B8%8D%E6%94%AF%E6%8C%81c&#43;&#43;11%E7%89%B9%E6%80%A7/</guid>
      <description>用了点C++11特性，结果编译失败，编译参数加&amp;rdquo;-std=c++0x&amp;rdquo;，结果识别不出来。
$ g++ -v Using built-in specs. Target: amd64-undermydesk-freebsd Configured with: FreeBSD/amd64 system compiler Thread model: posix gcc version 4.2.1 20070719 [FreeBSD]  C++0x/C++11 Support in GCC提到GCC 4.3版本之后才支持C++11特性，白折腾一把！ 好吧，我用gcc docker!</description>
    </item>
    
    <item>
      <title>GoJS对浏览器和移动设备的支持</title>
      <link>https://mryqu.github.io/post/gojs%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8C%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E7%9A%84%E6%94%AF%E6%8C%81/</link>
      <pubDate>Wed, 04 Mar 2015 19:47:40 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/gojs%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8C%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E7%9A%84%E6%94%AF%E6%8C%81/</guid>
      <description>在其官网上没有发现GoJS对浏览器和移动设备的支持的详细报告，仅在http://www.nwoods.com/products/gojs/ 有粗略介绍： &amp;gt; GoJS takes advantage of the HTML Canvas to supporthigh-performance diagrams. For creating static documents andprintable resources, GoJS supports exporting Diagrams to images and SVG. &amp;gt; &amp;gt; GoJS supports all modern browsers (IE9+), including mobilebrowsers. &amp;gt; </description>
    </item>
    
    <item>
      <title>Activiti与GoJS BPMN支持的BPMN元素对比</title>
      <link>https://mryqu.github.io/post/activiti%E4%B8%8Egojs_bpmn%E6%94%AF%E6%8C%81%E7%9A%84bpmn%E5%85%83%E7%B4%A0%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Tue, 03 Mar 2015 23:00:11 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/activiti%E4%B8%8Egojs_bpmn%E6%94%AF%E6%8C%81%E7%9A%84bpmn%E5%85%83%E7%B4%A0%E5%AF%B9%E6%AF%94/</guid>
      <description>首先抱怨一下,GoJS BPMN扩展中有两个图标和标题是一样的,我看了又看还是分不清. ActivitiGoJS BPMNStartEventsStart Event Start Timer Event Start Signal Event Start Message Event Start Error Event ActivitiesAll Activiti activities support compensation optionAll GoJS BPMN activities support &amp;ldquo;Add Email Event&amp;rdquo;, &amp;ldquo;Add TimerEvent&amp;rdquo;, &amp;ldquo;Add Escalation Event&amp;rdquo; and &amp;ldquo;Add Error Event&amp;rdquo; options.User Task Service Task Looping Service TaskScript Task Business Rule Task Receive Task Manual Task Mail Task Camel Task Mule Task Generic TaskStructuralSub Process Event Sub Process Call Activity GatewaysExclusive Gateway Parallel Gateway Inclusive Gateway Event Gateway BoundaryEventsBoundary Error Event Boundary Timer Event Boundary Signal Event Boundary Message Event Intermediate Catching EventsIntermediate Timer Catching Event Intermediate Signal Catching Event Intermediate Message Catching Event Intermediate Throwing EventsIntermediate None Throwing Events Intermediate Signal Throwing Events EndEventsEnd Event End Error Event ?</description>
    </item>
    
    <item>
      <title>[C] GCC对UTF8 BOM的支持</title>
      <link>https://mryqu.github.io/post/c_gcc%E5%AF%B9utf8_bom%E7%9A%84%E6%94%AF%E6%8C%81/</link>
      <pubDate>Thu, 24 Oct 2013 20:31:28 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/c_gcc%E5%AF%B9utf8_bom%E7%9A%84%E6%94%AF%E6%8C%81/</guid>
      <description>最近玩些特俗字符，结果对yqutest.cpp源码文件编译时先碰到error:converting to execution character set: Illegal bytesequence错误。GCC的源码字符集与执行字符集默认是UTF-8编码，为了避免源码文件乱码，最好也是采用UTF-8编码来存储源码文件。将源码编码转成UTF-8，问题得以解决。 但是否需要UTF-8 BOM(byte-order mark)呢？ 我一时兴起添加了BOM，十六进制为EF BB BF，即对应八进制的357 273 277，编译结果如下：
mryqu&amp;gt; g++ yqutest.cpp -o yqutst123 yqutest.cpp:1: error: stray &#39;\357&#39; in program yqutest.cpp:1: error: stray &#39;\273&#39; in program yqutest.cpp:1: error: stray &#39;\277&#39; in program yqutest.cpp:1: error: stray &#39;#&#39; in program yqutest.cpp:1: error: expected constructor, destructor, or type conversion before &#39;&amp;lt;&#39; token mryqu&amp;gt; g++ -v Using built-in specs. Target: amd64-undermydesk-freebsd Configured with: FreeBSD/amd64 system compiler Thread model: posix gcc version 4.</description>
    </item>
    
  </channel>
</rss>