<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>demo on Mryqu's Notes</title><link>https://mryqu.github.io/tags/demo/</link><description>Recent content in demo on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 21 Oct 2015 05:55:32 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/demo/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello RestFB</title><link>https://mryqu.github.io/post/hello_restfb/</link><pubDate>Wed, 21 Oct 2015 05:55:32 +0000</pubDate><guid>https://mryqu.github.io/post/hello_restfb/</guid><description>RestFB是一个简单灵活的Facebook图谱API和REST客户端Java库。本演示用它来获取一个Facebook主页下的帖子、评论及回复。
获取Facebook AccessToken 示例代码 package com.yqu.restfb; import java.util.List; import com.restfb.Connection; import com.restfb.DefaultFacebookClient; import com.restfb.FacebookClient; import com.restfb.Parameter; import com.restfb.Version; import com.restfb.types.Comment; import com.restfb.types.Page; import com.restfb.types.Post; public class HelloRestFB { public static void main(String[] args) { FacebookClient facebookClient = new DefaultFacebookClient( MY_ACCESS_TOKEN, Version.VERSION_2_5); Page pageInfo = (Page) facebookClient.fetchObject(&amp;#34;YquTest&amp;#34;, Page.class, new Parameter[0]); Connection postConnection = facebookClient.fetchConnection( pageInfo.getId() + &amp;#34;/feed&amp;#34;, Post.class, new Parameter[] { Parameter.with(&amp;#34;limit&amp;#34;, 10), Parameter.with(&amp;#34;include_hidden&amp;#34;, &amp;#34;true&amp;#34;) }); if (postConnection.getData().size() &amp;lt;= 0) { System.</description></item><item><title>[Hadoop] MapReduce定制Counter实践</title><link>https://mryqu.github.io/post/hadoop_mapreduce%E5%AE%9A%E5%88%B6counter%E5%AE%9E%E8%B7%B5/</link><pubDate>Thu, 04 Sep 2014 21:11:13 +0000</pubDate><guid>https://mryqu.github.io/post/hadoop_mapreduce%E5%AE%9A%E5%88%B6counter%E5%AE%9E%E8%B7%B5/</guid><description>MapReduce除了有内建的Counter，还支持应用程序自身定制的Counter。实践如下：
CustomCounterDemo.java 执行 JobHistory显示</description></item></channel></rss>