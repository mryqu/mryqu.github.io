<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>配置 on Mryqu's Notes</title><link>https://mryqu.github.io/tags/%E9%85%8D%E7%BD%AE/</link><description>Recent content in 配置 on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 08 Aug 2016 05:58:43 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/%E9%85%8D%E7%BD%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>[RabbitMQ] Hello RabbitMQ Clustering</title><link>https://mryqu.github.io/post/rabbitmq_hello_rabbitmq_clustering/</link><pubDate>Mon, 08 Aug 2016 05:58:43 +0000</pubDate><guid>https://mryqu.github.io/post/rabbitmq_hello_rabbitmq_clustering/</guid><description>RabbitMQ集群文档的介绍是： 一个RabbitMQ代理（broker）是一或多个Erlang节点的逻辑组合，每个节点运行RabbitMQ应用并共享用户、虚拟主机、队列、交换器、绑定和运行时参数。有时我们将节点集合称之为集群。 对RabbitMQ代理操作所需的所有数据/状态都会在所有节点上复制。唯一的例外是消息队列，默认存在于创建队列的节点上，但是对所有其他节点可见并可访问。集群内节点通过主机名互相通信，所以这些主机名必须能被集群内所有节点解析。
在Ubuntu上安装RabbitMQ 我在三台Ubuntu服务器上安装了RabbitMQ，分别是node50064，node50069和node51054。
执行下列命令将APT仓库添加到/etc/apt/sources.list.d: echo &amp;#39;deb http://www.rabbitmq.com/debian/ testing main&amp;#39; | sudo tee /etc/apt/sources.list.d/rabbitmq.list (可选地)为了避免未签名包告警，使用 apt-key将RabbitMQ网站的公钥添加到信赖密钥列表： wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add - 执行下列命令更新包列表： sudo apt-get update 安装rabbitmq-server包： sudo apt-get install rabbitmq-server 配置RabbitMQ
修改/etc/rabbitmq/enabled_plugins使能管理插件： [rabbitmq_management]. 修改/etc/default/rabbitmq-server，增大每用户可打开文件数（我的系统不使用systemd，无需修改/etc/systemd/system/rabbitmq-server.service.d/limits.conf）： ulimit -S -n 4096 修改/etc/rabbitmq/rabbitmq-env.conf，激活长主机名并使用每个主机的完整域名作为本地节点名： USE_LONGNAME=true NODENAME=rabbit@`env hostname -f` 关闭RabbitMQ：
sudo /etc/init.d/rabbitmq-server stop 配置RabbitMQ集群 首先启动node50064上的RabbitMQ（注：会有告警，可忽略。-detached选项就会导致PID不写入PID文件。）：
sudo rabbitmq-server -detached RabbitMQ节点和CLI工具(例如rabbitmqctl)使用cookie来判断节点间是否可以通信。两个能够通信的节点必须拥有相同的共享密文，称之为Erlangcookie。集群中所有节点必须拥有相同cookie。必须在node50069和node51054关闭RabbitMQ的情况下，从node50064将其cookie复制到node50069（对node51054也做相同操作）： 更省事的方式，是在node50069和node51054没有安装RabbitMQ之前就将node50064上的cookie复制过来，这样node50069和node51054上的erlang节点就不会自己生成cookie了。
手工配置集群：
ubuntu@node50069:~$sudo rabbitmq-server -detached ubuntu@node50069:~$sudo rabbitmqctl stop_app ubuntu@node50069:~$sudo rabbitmqctl join_cluster rabbit@node50064.mryqu.com ubuntu@node50069:~$sudo rabbitmqctl start_app ubuntu@node51054:~$sudo rabbitmq-server -detached ubuntu@node51054:~$sudo rabbitmqctl stop_app ubuntu@node51054:~$sudo rabbitmqctl join_cluster rabbit@node50064.</description></item><item><title>我的IntelliJ IDEA配置</title><link>https://mryqu.github.io/post/%E6%88%91%E7%9A%84intellij_idea%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 29 Nov 2014 20:19:20 +0000</pubDate><guid>https://mryqu.github.io/post/%E6%88%91%E7%9A%84intellij_idea%E9%85%8D%E7%BD%AE/</guid><description> 安装完IntelliJIDEA，我首先切换到64位模式： 安装文件生成的快捷方式默认指向的是idea.exe，更改为idea64.exe。 更改默认内存配置：修改IntelliJ&amp;quot;bin&amp;quot;目录下的idea64.exe.vmoptions文件。 &amp;ldquo;-Xms&amp;quot;和&amp;rdquo;-Xmx&amp;quot;定义了Java分配给IntelliJ的最小和最大堆空间，将其更改为&amp;quot;-Xms256m&amp;quot;和&amp;quot;-Xmx1600m&amp;quot; 启动IntelliJ IDEA，通过File-&amp;gt;Setting菜单做如下修改： 更改编译器的构建过程堆大小为1024 设置代理为总动检测</description></item><item><title>Windows下MongoDB安装与配置</title><link>https://mryqu.github.io/post/windows%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 30 Mar 2014 07:57:15 +0000</pubDate><guid>https://mryqu.github.io/post/windows%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>到官网http://www.mongodb.org/downloads下载MongoDB并安装在c:\mongodb目录下，安装后需要进行配置才能启动MongoDB。首先创建如下目录：
md c:\mongodb\data md c:\mongodb\db md c:\mongodb\log md c:\mongodb\etc 接着创建MongoDB配置文件：c:\mongodb\etc\mongo.conf systemLog: destination: file path: C:/mongodb/log/mongo.log logAppend: true storage: dbPath: C:/mongodb/data/db journal: enabled: true net: http: enabled: true RESTInterfaceEnabled: true 通过如下命令启动MongoDB：
C:\mongodb\bin\mongod.exe --config C:\mongodb\etc\mongo.conf 可以通过以下三种方式验证MongoDB是否安装成功：
访问MongoDB监听端口 http://localhost:27017/ ，确认出现类似信息。 通过C:\mongodb\bin\mongo.exe登录Javascript shell并使用 访问HTTP接口 http://localhost:28017/ 并查看MongoDB服务器信息 在启动MongoDB的窗口通过Ctrl+ C停止MongoDB的运行。 最后通过如下命令将MongoDB配置成Windows服务：
C:\mongodb\bin\mongod.exe --config C:\mongodb\etc\mongo.conf--install 当然也可以通过如下命令手工配置Windows服务：
sc create MongoDB binPath= &amp;#34;C:\mongodb\bin\mongod.exe--config=C:\mongodb\etc\mongo.conf--service&amp;#34; start= demand DisplayName= &amp;#34;MongoDB&amp;#34; 参考 Install MongoDB on Windows MongoDB Configuration Options</description></item><item><title>JDK、Ant和Maven开发环境配置</title><link>https://mryqu.github.io/post/jdkant%E5%92%8Cmaven%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 07 Dec 2008 00:00:04 +0000</pubDate><guid>https://mryqu.github.io/post/jdkant%E5%92%8Cmaven%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid><description>JDK 下载JDK并安装到c:\tools下 设置Java环境变量：JAVA_HOME = c:\tools\Java\jdk1.x.0_xxCLASSPATH =.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;path变量 %JAVA_HOME%\bin 运行&amp;quot;java -version&amp;quot;进行验证 Ant 下载Ant并解压缩到c:\tools下 设置Ant环境变量：ANT_HOME = c:\tools\apache-ant-1.x.xpath变量 %ANT_HOME%\bin 运行&amp;quot;ant -version&amp;quot;进行验证 maven 下载Maven并解压缩到c:\tools下 设置Maven环境变量：M2_HOME = c:\tools\apache-maven-x.x.xpath变量 %M2_HOME%\bin 运行&amp;quot;mvn &amp;ndash;version&amp;quot;进行验证 m2eclipse 通过下列update site安装:http://download.eclipse.org/technology/m2e/releases 在Window - Preferences - Maven - Installations添加上一步安装的Maven</description></item></channel></rss>