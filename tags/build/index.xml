<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>build on Mryqu's Notes</title><link>https://mryqu.github.io/tags/build/</link><description>Recent content in build on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 13 Sep 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/build/index.xml" rel="self" type="application/rss+xml"/><item><title>折腾openui5-sample-app之使用Yarn替换Bower</title><link>https://mryqu.github.io/post/node_%E6%8A%98%E8%85%BEopenui5-sample-app%E4%B9%8B%E4%BD%BF%E7%94%A8yarn%E6%9B%BF%E6%8D%A2bower/</link><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><guid>https://mryqu.github.io/post/node_%E6%8A%98%E8%85%BEopenui5-sample-app%E4%B9%8B%E4%BD%BF%E7%94%A8yarn%E6%9B%BF%E6%8D%A2bower/</guid><description>SAP/openui5-sample-app是使用npm下载依赖的后端开发和构建模块，使用bower下载依赖的前端openui5库。 在npm install的过程中提示&amp;quot;npm WARN deprecated bower@1.8.4: We don&amp;rsquo;t recommend using Bower for new projects. Please consider Yarn and Webpack or Parcel. You can read how to migrate legacy project here: https://bower.io/blog/2017/how-to-migrate-away-from-bower/&amp;quot;。 对于SAP这个小示例，区分前端和后端使用包管理器有点浪费！对于所有的依赖模块，可以要么使用npm，要么使用yarn。
删除bower_components和dist目录
安装yarn：
npm install yarn -g 去掉bower.json 不过其中依赖的openui5/packaged-sap.ui.core、openui5/packaged-sap.m、openui5/packaged-themelib_sap_belize仅仅bower能够获取，在npm仓库里是找不到的。
修改package.json
去除bower模块 去除postinstall脚本 增加@openui5/sap.m依赖 增加@openui5/sap.ui.core依赖 增加@openui5/themelib_sap_belize依赖 修改Gruntfile.js npm仓库里的@openui5/sap.m、@openui5/sap.ui.core、@openui5/themelib_sap_belize仅包含openui5/packaged-sap.ui.core、openui5/packaged-sap.m、openui5/packaged-themelib_sap_belize中resources的部分，而不包含test-resources的部分。 对于openui5_connect任务，我认为无需test-resources部分即可。 将openui5库的定位从bower_components目录下改为node_modules目录下的相应位置 构建测试 yarn grunt build grunt serve 参考 SAP/grunt-openui5
JS新包管理工具yarn和npm的对比与使用入门</description></item><item><title>折腾openui5-sample-app之使用npm镜像</title><link>https://mryqu.github.io/post/node_%E6%8A%98%E8%85%BEopenui5-sample-app%E4%B9%8B%E4%BD%BF%E7%94%A8npm%E9%95%9C%E5%83%8F/</link><pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate><guid>https://mryqu.github.io/post/node_%E6%8A%98%E8%85%BEopenui5-sample-app%E4%B9%8B%E4%BD%BF%E7%94%A8npm%E9%95%9C%E5%83%8F/</guid><description>学习了一下SAP/openui5-sample-app，看看SAP是如何使用构建前端的。 SAP/openui5-sample-app中npm安装模块是从https://www.npmjs.com/下载的，不知道从淘宝NPM镜像下载是否会快些。
对npm使用镜像有以下几种方式，这里我使用第三种：
通过config命令 npm config set registry https://registry.npm.taobao.org npm info underscore 命令行指定 npm --registry https://registry.npm.taobao.org info underscore 在.npmrc文件中指定 registry = https://registry.npm.taobao.org 结果，速度上没什么感觉，都不快！</description></item><item><title>[Oozie] Oozie构建问题</title><link>https://mryqu.github.io/post/oozie_oozie%E6%9E%84%E5%BB%BA%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 05 Jul 2018 06:20:10 +0000</pubDate><guid>https://mryqu.github.io/post/oozie_oozie%E6%9E%84%E5%BB%BA%E9%97%AE%E9%A2%98/</guid><description>想定制Oozie构建，结果log4j总出错，移除了pig、sqoop和hive就好了。
root@node1:~# /vagrant/resources/oozie-5.0.0/bin/mkdistro.sh -DskipTests -Puber -Dhadoop.version=2.7.6 -Ptez -Dpig.version=0.17.0 -Dsqoop.version=1.4.7 -Dhive.version=2.3.3 -Dtez.version=0.9.1 ...... [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.7.0:testCompile (default-testCompile) on project oozie-core: Compilation failure: Compilation failure: [ERROR] /vagrant/resources/oozie-5.0.0/core/src/test/java/org/apache/oozie/sla/TestSLACalculatorMemory.java:[836,48] cannot find symbol [ERROR] symbol: method getLevel() [ERROR] location: variable firstLogEntry of type org.apache.log4j.spi.LoggingEvent [ERROR] /vagrant/resources/oozie-5.0.0/core/src/test/java/org/apache/oozie/sla/TestSLACalculatorMemory.java:[837,33] cannot find symbol [ERROR] symbol: method getMessage() [ERROR] location: variable firstLogEntry of type org.apache.log4j.spi.LoggingEvent [ERROR] /vagrant/resources/oozie-5.0.0/core/src/test/java/org/apache/oozie/sla/TestSLACalculatorMemory.java:[838,79] cannot find symbol [ERROR] symbol: method getLoggerName() [ERROR] location: variable firstLogEntry of type org.</description></item><item><title>[Gradle] 遭遇 Unable to process incoming event 'ProgressComplete' (ProgressCompleteEvent)</title><link>https://mryqu.github.io/post/gradle_%E9%81%AD%E9%81%87_unable_to_process_incoming_event_progresscomplete_progresscompleteevent/</link><pubDate>Thu, 30 Nov 2017 06:08:53 +0000</pubDate><guid>https://mryqu.github.io/post/gradle_%E9%81%AD%E9%81%87_unable_to_process_incoming_event_progresscomplete_progresscompleteevent/</guid><description>最近开始玩一个项目，结果gradle build总是报错：
FAILURE: Build failed with an exception. * What went wrong: Unable to process incoming event &amp;#39;ProgressComplete &amp;#39; (ProgressCompleteEvent) 参考了帖子Build fails with “Unable to process incoming event ‘ProgressComplete ’ (ProgressCompleteEvent)”：
The Workaround: use the --console plain gradle command line switch The Fix: If you use git + git-bash, upgrade to git 2.x.x (2.9.3 is current and works for me) If you use DOS, try increasing your screen buffer size.(mine is 1024 x 1024) 将Git Window从2.</description></item><item><title>[C++] Building twitcurl Library in Unix platform</title><link>https://mryqu.github.io/post/c++_building_twitcurl_library_in_unix_platform/</link><pubDate>Sat, 19 Dec 2015 05:47:33 +0000</pubDate><guid>https://mryqu.github.io/post/c++_building_twitcurl_library_in_unix_platform/</guid><description> Download twitcurl source from https://github.com/swatkat/twitcurl using Git client. git clone https://github.com/swatkat/twitcurl.git In Unix shell, cd into libtwitcurl directory. Compile all of the twitcurlsource files into object files. g++ -Wall -fPIC -c -I. twitcurl.cpp oauthlib.cpp urlencode.cpp base64.cpp HMAC_SHA1.cpp SHA1.cpp Building twitcurl asstatic library: Use the archive commandto build twitcurl library from object files. ar rvs libtwitcurl.a *.o</description></item><item><title>Gradle multi-project Builds on HelloSocialMedia</title><link>https://mryqu.github.io/post/gradle_multi-project_builds_on_hellosocialmedia/</link><pubDate>Thu, 22 Oct 2015 05:38:15 +0000</pubDate><guid>https://mryqu.github.io/post/gradle_multi-project_builds_on_hellosocialmedia/</guid><description>尝试对我的HelloSocialMedia演示代码集合使用Gradle的多项目构建，项目结构如下：
HelloSocialMedia/ build.gradle settings.gradle HelloYoutubeAnalytics/ build.gradle HelloGoogleAnalytics/ build.gradle HelloTwitter4J/ build.gradle HelloRestFB/ build.gradle settings.gradle
rootProject.name = &amp;#39;HelloSocialMedia&amp;#39; include &amp;#34;HelloYoutubeAnalytics&amp;#34; include &amp;#34;HelloGoogleAnalytics&amp;#34; include &amp;#34;HelloTwitter4J&amp;#34; include &amp;#34;HelloRestFB&amp;#34; project(&amp;#34;:HelloYoutubeAnalytics&amp;#34;).name = &amp;#34;HelloSocialMedia-YoutubeAnalytics&amp;#34; project(&amp;#34;:HelloGoogleAnalytics&amp;#34;).name = &amp;#34;HelloSocialMedia-GoogleAnalytics&amp;#34; project(&amp;#34;:HelloTwitter4J&amp;#34;).name = &amp;#34;HelloSocialMedia-Twitter4J&amp;#34; project(&amp;#34;:HelloRestFB&amp;#34;).name = &amp;#34;HelloSocialMedia-RestFB&amp;#34; build.gradle
buildscript { repositories { mavenCentral() } } subprojects { apply plugin: &amp;#39;java&amp;#39; apply plugin: &amp;#39;eclipse&amp;#39; apply plugin: &amp;#39;idea&amp;#39; repositories { mavenCentral() } sourceCompatibility = 1.8 targetCompatibility = 1.8 } HelloYoutubeAnalytics/build.gradle
jar { baseName = &amp;#39;hello-youbube-analytics&amp;#39; version = &amp;#39;0.</description></item><item><title>[Gradle] 创建含有依赖库的jar文件</title><link>https://mryqu.github.io/post/gradle_%E5%88%9B%E5%BB%BA%E5%90%AB%E6%9C%89%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84jar%E6%96%87%E4%BB%B6/</link><pubDate>Sun, 18 Oct 2015 05:54:13 +0000</pubDate><guid>https://mryqu.github.io/post/gradle_%E5%88%9B%E5%BB%BA%E5%90%AB%E6%9C%89%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84jar%E6%96%87%E4%BB%B6/</guid><description>想把自己的Gradle项目打成jar文件，但是&amp;rsquo;gradle build jar&amp;rsquo;生成的jar文件不含依赖库。
按照Gradle – Create a Jar file with dependencies改写了自己的build.gradle，成功包含了依赖库。但是依赖库不再是原来的jar文件，而是以目录的形式存在。
我的build.gradle
buildscript { repositories { mavenCentral() } } apply plugin: &amp;#39;java&amp;#39; apply plugin: &amp;#39;eclipse&amp;#39; apply plugin: &amp;#39;idea&amp;#39; jar { baseName = &amp;#39;HelloTwitter4J&amp;#39; version = &amp;#39;0.1.0&amp;#39; } task fatJar(type: Jar) { baseName = &amp;#39;HelloTwitter4J-all&amp;#39; version = &amp;#39;0.1.0&amp;#39; manifest { attributes &amp;#34;Main-Class&amp;#34;: &amp;#34;com.yqu.cdfwebtool.twitter.TwitterRateInfo&amp;#34; } from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } with jar } repositories { mavenCentral() } sourceCompatibility = 1.</description></item><item><title>Jenkins超时设置</title><link>https://mryqu.github.io/post/jenkins%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE/</link><pubDate>Tue, 21 Apr 2015 05:15:55 +0000</pubDate><guid>https://mryqu.github.io/post/jenkins%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE/</guid><description>Jenkins在构建部署镜像时发生超时：
Build timed out (after 10 minutes). Marking the build as aborted. Build was aborted Finished: ABORTED 解决方法是在Jenkins当前项目下点击Configure菜单后，在BuildEnvironment配置项里修改超时策略。我把超时绝对值改大点就好了。</description></item><item><title>[Hadoop] Windows平台编译Hadoop2.6.0笔记</title><link>https://mryqu.github.io/post/hadoop_windows%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91hadoop2.6.0%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 02 Apr 2015 05:25:54 +0000</pubDate><guid>https://mryqu.github.io/post/hadoop_windows%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91hadoop2.6.0%E7%AC%94%E8%AE%B0/</guid><description>环境 64位虚拟机及64位 Windows Server 2008 R2
所需工具 JDK7 Maven .NET Framework 4 Microsoft Windows SDK 7.1 安装前一定要先卸载比Microsoft Visual C++ 2010 x86Redistributable - 10.0.30319 更高的版本。 Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1 Cygwin (x64) Protocol Buffers 2.5.0 CMake 3.2.1 安装时选择添加CMake到所有用户的PATH环境变量。 hadoop-2.6.0源文件压缩包 解压至c:\hadoop-2.6.0-src 编译Hadoop2.6.0 进入Windows SDK 7.1 Command Prompt 在c:\执行buildHadoop.bat，其内容如下： setlocal set Platform=x64 set CYGWIN_ROOT=C:\cygwin64 set JAVA_HOME=C:\tools\Java\jdk7 set M2_HOME=C:\tools\apache-maven set MS_BUILD_PATH=C:\Windows\Microsoft.NET\Framework64\v4.0.30319 set MS_SDK=C:\Program Files\Microsoft SDKs\Windows\v7.1 set CMAKE_PATH=C:\tools\CMake set PROTOBUF_PATH=C:\tools\protoc-2.</description></item><item><title>[C++] 编译OpenSSL和libCurl</title><link>https://mryqu.github.io/post/c++_%E7%BC%96%E8%AF%91openssl%E5%92%8Clibcurl/</link><pubDate>Sun, 01 Mar 2015 23:05:26 +0000</pubDate><guid>https://mryqu.github.io/post/c++_%E7%BC%96%E8%AF%91openssl%E5%92%8Clibcurl/</guid><description>准备工作 登录一台Linux服务器，并完成下列工作：
在目录/home/mryqu/创建子目录out，在out目录下创建子目录ssl和curl； 从OpenSSL项目下载openssl-1.0.2.tar.gz，并解压； 从curl项目下载curl-7.40.0.tar.gz，并解压 编译OpenSSL 进入openssl-1.0.2目录; 完成OpenSSL配置，仅支持静态库不支持动态库： ./config no-shared --openssldir=/home/mryqu/out/ssl 对Makefile文件中的FGLAG和DEPFLAG变量进行修改，增加-fPIC。 编译： make depend make make install 编译产生如下内容： 编译libCurl 进入curl-7.40.0目录; 首先设定pkg-config路径，指定为上一步OpenSSL编译结果。由于我们的OpenSSL编译结果不在编译器/链接器默认搜索路径，通过pkg-config路径和&amp;ndash;with-ssl让libCurl查找到OpenSSL。通过&amp;ndash;without-zlib禁止掉即时解压缩。 export PKG_CONFIG_PATH=/home/mryqu/out/ssl/lib/pkgconfig ./configure --prefix=/home/mryqu/out/curl --with-ssl --without-zlib make make install 编译产生如下内容： 参考 OpenSSL Compilation and Installation how to install curl and libcurl OpenSSL Cookbook Everything curl</description></item><item><title>[HBase] Java客户端程序构建脚本</title><link>https://mryqu.github.io/post/hbase_java%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A8%8B%E5%BA%8F%E6%9E%84%E5%BB%BA%E8%84%9A%E6%9C%AC/</link><pubDate>Fri, 03 Jan 2014 00:05:34 +0000</pubDate><guid>https://mryqu.github.io/post/hbase_java%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A8%8B%E5%BA%8F%E6%9E%84%E5%BB%BA%E8%84%9A%E6%9C%AC/</guid><description>上一博文[HBase] 原始数据类型存储中所用到的构建脚本build.sh如下：
#!/bin/bash HADOOP_HOME=/usr/local/hadoop HBASE_HOME=/usr/local/hbase CLASSPATH=.:$HBASE_HOME/conf:$(hbase classpath) javac -cp $CLASSPATH HBasePrimitiveDataTypeTest.java java -cp $CLASSPATH HBasePrimitiveDataTypeTest</description></item></channel></rss>