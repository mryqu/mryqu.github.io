<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gc on Mryqu's Notes</title><link>https://mryqu.github.io/tags/gc/</link><description>Recent content in gc on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 30 Jul 2013 20:33:07 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/gc/index.xml" rel="self" type="application/rss+xml"/><item><title>Java线程是否会被垃圾回收？</title><link>https://mryqu.github.io/post/java%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E4%BC%9A%E8%A2%AB%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link><pubDate>Tue, 30 Jul 2013 20:33:07 +0000</pubDate><guid>https://mryqu.github.io/post/java%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E4%BC%9A%E8%A2%AB%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid><description>如果将线程启动后，然后线程变量置空，线程会怎么样？
import java.lang.ref.WeakReference; public class TestThread { public static void testUnreferencedThread() { // anonymous class extends Thread Thread t = new Thread() { public void run() { // infinite loop while (true) { try { Thread.sleep(1000); } catch (InterruptedException e) {} // as long as this line printed out, you know it is alive. System.out.println(&amp;#34;thread is running...&amp;#34;); } } }; t.start(); WeakReference&amp;lt;Thread&amp;gt; wr = new WeakReference&amp;lt;Thread&amp;gt;(t); t = null; // no more references for Thread t // another infinite loop while (true) { try { Thread.</description></item></channel></rss>