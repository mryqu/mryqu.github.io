<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>multi-container on Mryqu's Notes</title><link>https://mryqu.github.io/tags/multi-container/</link><description>Recent content in multi-container on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 06 Jun 2015 05:33:22 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/multi-container/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Compose笔记</title><link>https://mryqu.github.io/post/docker_compose%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 06 Jun 2015 05:33:22 +0000</pubDate><guid>https://mryqu.github.io/post/docker_compose%E7%AC%94%E8%AE%B0/</guid><description>Docker Compose概述 **DockerCompose**
**前身 Fig**
Compose是用于在Docker内定义和运行多容器应用程序的工具。使用Compose，可以在一个文件内定义多容器应用程序，然后使用一个命令运行应用。 Compose对开发环境、交付准备服务器（stagingservers）和持续集成（CI）很有帮助，不建议用于生产环境。 使用Compose基本上是三步流程： - 通过一个`Dockerfile`定义应用环境，以便在其他地方复制； - 在`docker-compose.yml`中定义组成应用的服务，因此他们可以在一个隔离的环境一起运行； - 最后，运行`docker-compose up`，Compose将启动并运行整个应用。 docker-compose.yml大概是这个样子的:
web: build: . ports: - &amp;#34;5000:5000&amp;#34; volumes: - .:/code links: - redis redis: image: redis Compose包含管理应用整个生命周期的命令:
启动、停止和重建服务 查看运行的服务状态 对运行的服务的日志输出生成数据流 对一个服务运行一次性命令 Docker Compose安装 curl -L https://github.com/docker/compose/releases/download/VERSION_NUM/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose $ chmod +x /usr/local/bin/docker-compose Docker Compose命令 更新整个应用 mryqu$ docker-compose stop # stop the containers mryqu$ docker-compose pull # download updated images mryqu# docker-compose up -d # creates new containers and starts them 更新单个服务 mryqu$ docker-compose stop foo # stop the foo service mryqu$ docker-compose pull foo # download foo service mryqu$ docker-compose up -d foo # start the new foo service 参考 Overview of Docker Compose</description></item></channel></rss>