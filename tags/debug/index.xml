<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>debug on Mryqu's Notes</title><link>https://mryqu.github.io/tags/debug/</link><description>Recent content in debug on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 25 Dec 2016 21:22:31 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/debug/index.xml" rel="self" type="application/rss+xml"/><item><title>[C++] 调试libcurl程序</title><link>https://mryqu.github.io/post/c++_%E8%B0%83%E8%AF%95libcurl%E7%A8%8B%E5%BA%8F/</link><pubDate>Sun, 25 Dec 2016 21:22:31 +0000</pubDate><guid>https://mryqu.github.io/post/c++_%E8%B0%83%E8%AF%95libcurl%E7%A8%8B%E5%BA%8F/</guid><description>最近在调试通过libcurl发送GoogleSheets API POST请求时，增加了一点经验，特此总结。
GoogleSheets API 请求 POST /v4/spreadsheets?access_token={YOUR_ACCESSTOKEN}&amp;amp;fields=spreadsheetId HTTP/1.1 Host: sheets.googleapis.com Content-Type: application/json;charset=UTF-8 Accept: application/json Cache-Control: no-cache {&amp;#34;properties&amp;#34;:{&amp;#34;title&amp;#34;:&amp;#34;newhaha&amp;#34;},&amp;#34;sheets&amp;#34;:[{&amp;#34;properties&amp;#34;:{&amp;#34;title&amp;#34;:&amp;#34;Sheet1&amp;#34;}}]} libcurl调试 当GoogleSheets API 请求失败时，仅能获得返回的状态码和消息。感觉没有更多信息可以研究！后来通过CURLOPT_VERBOSE和CURLOPT_DEBUGFUNCTION获得了更多调试信息。
使用CURLOPT_VERBOSE curl_easy_setopt(m_curl, CURLOPT_VERBOSE, 1L); 这样就可以看到请求报头、响应报头和消息体了。
使用CURLOPT_DEBUGFUNCTION 使用libcurl API指南中CURLOPT_DEBUGFUNCTION示例代码即可。这样就可以看到完整的请求和响应内容了。</description></item><item><title>Remote debugging on microservice at docker container inside vagrant box</title><link>https://mryqu.github.io/post/remote_debugging_on_microservice_at_docker_container_inside_vagrant_box/</link><pubDate>Mon, 05 Oct 2015 05:59:07 +0000</pubDate><guid>https://mryqu.github.io/post/remote_debugging_on_microservice_at_docker_container_inside_vagrant_box/</guid><description>Docker compose configuration foo-service: image: foo-service:latest hostname: foo-service dns: 127.0.0.1 restart: always Vagrant configuration config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 8787, host: 8787, auto_correct: true Consul configuration curl -X PUT -H &amp;#39;application/json&amp;#39; -d &amp;#39;java_option_server_port:java_option_xms:java_option_xmx:java_option_debug&amp;#39; http://localhost:8500/v1/kv/config/foo-service/jvm/java_options curl -X PUT -H &amp;#39;application/json&amp;#39; -d &amp;#39;-Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n&amp;#39; http://localhost:8500/v1/kv/config/foo-service/jvm/java_option_debug IntelliJ IDEA configuration</description></item><item><title>[C++] addr2line使用</title><link>https://mryqu.github.io/post/c++_addr2line%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 11 Sep 2015 05:33:28 +0000</pubDate><guid>https://mryqu.github.io/post/c++_addr2line%E4%BD%BF%E7%94%A8/</guid><description>GNU Binutils的Addr2line工具是一个可以将指令的地址和可执行程序转换成文件名、函数名和源代码行数的工具。这种功能对于将跟踪地址转换成更有意义的内容来说简直是太棒了。
下面是一个小示例testAddr2line.c：
#include &amp;#34;stdio.h&amp;#34; void test() { printf(&amp;#34;Hello Addr2line\n&amp;#34;); } int main() { test(); return 0; } 编译时使用-g选项包含调试符号条，使用-Wl,-Map=testAddr2line.map选项输出MapFile。
gcc -Wl,-Map=testAddr2line.map -g -o testAddr2line testAddr2line.c testAddr2line.map部分内容如下： testAddr2line中也包含符号表信息，因而可以使用objdump查找：
hadoop@node51054:~/ctest$ objdump -t testAddr2line | grep &amp;#39;main\|test&amp;#39; testAddr2line: file format elf64-x86-64 0000000000000000 l df *ABS* 0000000000000000 testAddr2line.c 0000000000000000 F *UND* 0000000000000000 __libc_start_main@@GLIBC_2.2.5 0000000000400547 g F .text 0000000000000015 main 0000000000400536 g F .text 0000000000000011 test 使用addr2line：
hadoop@node51054:~/ctest$ addr2line -e testAddr2line 400536 /home/hadoop/ctest/testAddr2line.c:3 hadoop@node51054:~/ctest$ addr2line -e testAddr2line -f 400536 test /home/hadoop/ctest/testAddr2line.</description></item><item><title>[OpenUI5] 打开web应用调试模式的方法</title><link>https://mryqu.github.io/post/openui5_%E6%89%93%E5%BC%80web%E5%BA%94%E7%94%A8%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 22 Dec 2014 23:27:31 +0000</pubDate><guid>https://mryqu.github.io/post/openui5_%E6%89%93%E5%BC%80web%E5%BA%94%E7%94%A8%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>OpenUI5 web应用调试模式无需服务器端支持，完全可在浏览器上进行设置。下面列举了四种打开调试模式的方法：
URL指定参数sap-ui-debug=true例如：http://localhost:8080/fmwebstudio/?sap-ui-debug=true 在浏览器控制台执行jQuery.sap.debug(true) 在加载了OpenUI5 web应用页面执行CTRL-SHIFT-ALT-P快捷键调出技术信息进行设置。 在加载了OpenUI5web应用页面执行CTRL-SHIFT-ALT-S快捷键调出OpenUI5诊断页面进行设置。</description></item><item><title>[Linux] 判断可执行文件或动态库是否包含符号表</title><link>https://mryqu.github.io/post/linux_%E5%88%A4%E6%96%AD%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%88%96%E5%8A%A8%E6%80%81%E5%BA%93%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E7%AC%A6%E5%8F%B7%E8%A1%A8/</link><pubDate>Thu, 24 Oct 2013 22:48:09 +0000</pubDate><guid>https://mryqu.github.io/post/linux_%E5%88%A4%E6%96%AD%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%88%96%E5%8A%A8%E6%80%81%E5%BA%93%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E7%AC%A6%E5%8F%B7%E8%A1%A8/</guid><description>在Linux下生成一个可执行文件或动态库，可以使用gcc/g++的&amp;quot;-g&amp;quot;选项使文件包含调试符号表。 要在Linux下判断一个第三方的可执行文件或动态库是否包含调试符号表，可以通过file命令实现：
srv01&amp;gt; file libcurl.so.6 libcurl.so.6: ELF 64-bit LSB shared object, x86-64, version 1 (FreeBSD), dynamically linked, not stripped srv01&amp;gt; file /usr/bin/X11/curl /usr/bin/X11/curl: ELF 64-bit LSB executable, x86-64, version 1 (FreeBSD), dynamically linked (uses shared libs), for FreeBSD 8.0 (800107), stripped 显示not stripped，表明文件带调试符号表；而显示stripped，表明文件已去除符号表。
如果文件包含调试符号表，可以通过objdump -t命令及选项打印文件的符号表：
srv01&amp;gt; objdump -t libcurl.so.6 libcurl.so.6: file format elf64-x86-64 SYMBOL TABLE: 0000000000000120 l d .hash 0000000000000000 00000000000012b0 l d .dynsym 0000000000000000 0000000000004b08 l d .dynstr 0000000000000000 0000000000006f36 l d .</description></item><item><title>Eclipse中解决远程调试超时的设置</title><link>https://mryqu.github.io/post/eclipse%E4%B8%AD%E8%A7%A3%E5%86%B3%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E8%B6%85%E6%97%B6%E7%9A%84%E8%AE%BE%E7%BD%AE/</link><pubDate>Fri, 07 Sep 2012 20:55:16 +0000</pubDate><guid>https://mryqu.github.io/post/eclipse%E4%B8%AD%E8%A7%A3%E5%86%B3%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E8%B6%85%E6%97%B6%E7%9A%84%E8%AE%BE%E7%BD%AE/</guid><description>主要是加大调试器超时和启动超时设置 Tomcat设置 catalina.bat中添加如下：
:doStart shift if &amp;#34;%TITLE%&amp;#34; == &amp;#34;&amp;#34; set TITLE=Tomcat set _EXECJAVA=start &amp;#34;%TITLE%&amp;#34; %_RUNJAVA% set CATALINA_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,address=5558,server=y,suspend=n if not &amp;#34;&amp;#34;%1&amp;#34;&amp;#34; == &amp;#34;&amp;#34;-security&amp;#34;&amp;#34; goto execCmd shift echo Using Security Manager set &amp;#34;SECURITY_POLICY_FILE=%CTALINA_BASE%\conf\catalina.policy&amp;#34; goto execCmd Eclipse设置</description></item></channel></rss>