<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>datatype on Mryqu's Notes</title><link>https://mryqu.github.io/tags/datatype/</link><description>Recent content in datatype on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 28 Apr 2017 06:11:11 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/datatype/index.xml" rel="self" type="application/rss+xml"/><item><title>YouTube Analytics Dimensions And Mitrics Research</title><link>https://mryqu.github.io/post/youtube_analytics_dimensions_and_mitrics_research/</link><pubDate>Fri, 28 Apr 2017 06:11:11 +0000</pubDate><guid>https://mryqu.github.io/post/youtube_analytics_dimensions_and_mitrics_research/</guid><description>Dimensions GroupCore
Dim?DimensionData
TypeExampleTest
URLResourcesXvideoSTRINGNO_FORMAT
KHqrLhJPdtETestplaylistSTRINGNO_FORMAT
TestXchannelSTRINGNO_FORMAT
???group
(filter only)Time periodsXdaySTRINGYYYY-MM-DD
2016-05-03TestX7DayTotalsSTRINGYYYY-MM-DD
2014-01-01TestX30DayTotalsSTRINGYYYY-MM-DD
2014-01-01TestXmonthSTRINGYYYY-MM
2016-05TestGeographic areasXcountrySTRING2-letter ISO-3166-1 code
USTestprovince
[use country==US in filter]STRINGISO 3166-2 code
US-ZZTestcontinent
(filter only)subContinent
(filter only)Playback locationsinsightPlaybackLocationTypeSTRINGPossible Value:BROWSECHANNELEMBEDDEDEXTERNAL_APPMOBILESEARCHWATCHYT_OTHER
WATCHTestinsightPlaybackLocationDetail
[use insightPlaybackLocationType
==EMBEDDED in filter]STRINGTestPlayback detailsliveOrOnDemandSTRINGPossible Value:LIVEON_DEMAND
ON_DEMANDTestsubscribedStatusSTRINGPossible Value:SUBSCRIBEDUNSUBSCRIBEDTest?youtubeProductSTRINGPossible Values:COREGAMINGKIDSUNKNOWN
CORETestTraffic sourcesinsightTrafficSourceTypeSTRINGPossible Values:ADVERTISINGANNOTATIONCAMPAIGN_CARDEND_SCREENEXT_URLNO_LINK_EMBEDDEDNO_LINK_OTHERNOTIFICATIONPLAYLISTPROMOTEDRELATED_VIDEOSUBSCRIBERYT_CHANNELYT_OTHER_PAGEYT_PLAYLIST_PAGEYT_SEARCH
YT_CHANNELTestinsightTrafficSourceDetail
[use insightTrafficSourceType in filter]STRINGNO_FORMAT
UC-OpYDuNCwCt-AIHC6xNYdwTestDevicesdeviceTypeSTRINGPossible Values:DESKTOPGAME_CONSOLEMOBILETABLETTVUNKNOWN_PLATFORM
DESKTOPTestoperatingSystemSTRINGPossible Values:ANDROIDBADABLACKBERRYCHROMECASTDOCOMOFIREFOXHIPTOPIOSLINUXMACINTOSHMEEGONINTENDO_3DSOTHERPLAYSTATIONPLAYSTATION_VITAREALMEDIASMART_TVSYMBIANTIZENWEBOSWIIWINDOWSWINDOWS_MOBILEXBOX
WINDOWSTestDemographicsXageGroup
[use specific metric]STRINGPossible Values:age13-17age18-24age25-34age35-44age45-54age55-64age65-TestXgender
[use specific metric]STRINGPossible Values:femalemaleTestEngagement and content sharingXsharingServiceSTRINGPossible Values:AMEBAANDROID_EMAILANDROID_MESSENGERANDROID_MMSBBMBLOGGERCOPY_PASTECYWORLDDIGGDROPBOXEMBEDMAILFACEBOOKFACEBOOK_MESSENGERFACEBOOK_PAGESFOTKAGMAILGOOGOOGLEPLUSGO_SMSGROUPMEHANGOUTSHI5HTC_MMSINBOXIOS_SYSTEM_ACTIVITY_DIALOGKAKAO_STORYKIKLGE_EMAILLINELINKEDINLIVEJOURNALMENEAMEMIXIMOTOROLA_MESSAGINGMYSPACENAVERNEARBY_SHARENUJIJOTHERPINTERESTREDDITSKYPESKYBLOGSONY_CONVERSATIONSSTUMBLEUPONTELEGRAMTEXT_MESSAGETUENTITUMBLRTWITTERUNKNOWNVERIZON_MMSVIBERWECHATWEIBOWHATS_APPWYKOPYAHOOVKONTAKTEODNOKLASSNIKIRAKUTENKAKAOTestAudience retentionelapsedVideoTimeRatio
[use video in filter]FLOATrange from 0.</description></item><item><title>[Hive] Hive数据类型</title><link>https://mryqu.github.io/post/hive_hive%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Thu, 13 Aug 2015 06:14:56 +0000</pubDate><guid>https://mryqu.github.io/post/hive_hive%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Hive支持的数据类型 原始数据类型 TINYINT SMALLINT INT BIGINT BOOLEAN FLOAT DOUBLE STRING BINARY TIMESTAMP DECIMAL DECIMAL(precision, scale) DATE VARCHAR CHAR 复杂数据类型 array_type map_type struct_type union_type 原始数据类型 在理解原始数据类型时，耗时最多的是TIMESTAMP和BINARY，下文会着重介绍我对这两种类型的理解。 首先创建表primitive_dataytpes_example，字段之间的分隔符没有采用默认的ctrlA，而是使用逗号分隔：
create table primitive_dataytpes_example ( a TINYINT, b SMALLINT, c INT, d BIGINT, e BOOLEAN, f FLOAT, g DOUBLE, h STRING, i BINARY, j TIMESTAMP, k DECIMAL, l DECIMAL (10,2), m DATE, n VARCHAR(20), o CHAR(20) ) ROW FORMAT DELIMITED FIELDS TERMINATED BY &amp;#39;,&amp;#39; LINES TERMINATED BY &amp;#39;\n&amp;#39;; 接下来插入一条记录（dummy表的使用见参考三）：</description></item><item><title>[HBase] HBase Shell中的put操作解析</title><link>https://mryqu.github.io/post/hbase_hbase_shell%E4%B8%AD%E7%9A%84put%E6%93%8D%E4%BD%9C%E8%A7%A3%E6%9E%90/</link><pubDate>Fri, 03 Jan 2014 23:20:51 +0000</pubDate><guid>https://mryqu.github.io/post/hbase_hbase_shell%E4%B8%AD%E7%9A%84put%E6%93%8D%E4%BD%9C%E8%A7%A3%E6%9E%90/</guid><description>阅读了HBase Shell datatype conversion一贴，感觉下列两个操作结果中的单元格数据值都像是文本类型的：
put &amp;#39;mytable&amp;#39;, &amp;#39;2342&amp;#39;, &amp;#39;cf:c1&amp;#39;, &amp;#39;67&amp;#39; put &amp;#39;mytable&amp;#39;, &amp;#39;2341&amp;#39;, &amp;#39;cf:c1&amp;#39;, 23 预知真相，看来只好看HBase Shell代码了。HBase Shell是Ruby代码，首先找到这些代码的位置：
cd $HBASE_HOME find . -name &amp;#39;*.rb&amp;#39; -print 找到了$HBASE_HOME/lib/ruby/shell/commands/put.rb，其GitHub代码库位置为https://github.com/apache/hbase/commits/master/hbase-shell/src/main/ruby/shell/commands/put.rb：
def command(table, row, column, value, timestamp=nil, args = {}) put table(table), row, column, value, timestamp, args end def put(table, row, column, value, timestamp = nil, args = {}) format_simple_command do table._put_internal(row, column, value, timestamp, args) end end 继而找到了$HBASE_HOME/lib/ruby/hbase/table.rb，其GitHub代码库位置为https://github.com/apache/hbase/blob/master/hbase-shell/src/main/ruby/hbase/table.rb：
def _put_internal(row, column, value, timestamp = nil, args = {}) p = org.</description></item><item><title>[HBase] 原始数据类型存储</title><link>https://mryqu.github.io/post/hbase_%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8/</link><pubDate>Thu, 02 Jan 2014 22:37:53 +0000</pubDate><guid>https://mryqu.github.io/post/hbase_%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8/</guid><description>对原始数据类型如何在HBase中存储，如何在HBaseShell中如何显示尚不了解，做一下小实验满足一下好奇心。使用下列代码存放和读取原始数据类型：
byte[] cf = Bytes.toBytes(CF_DEFAULT); Put put = new Put(Bytes.toBytes(&amp;#34;test&amp;#34;)); byte[] val = Bytes.toBytes(&amp;#34;123&amp;#34;); System.out.println(&amp;#34;Bytes for str: &amp;#34;+ bytesToHex(val)+&amp;#34;,len=&amp;#34;+val.length); put.addColumn(cf, Bytes.toBytes(&amp;#34;str&amp;#34;), val); short shortVal = 123; val = Bytes.toBytes(shortVal); System.out.println(&amp;#34;Bytes for short:&amp;#34;+ bytesToHex(val)+&amp;#34;,len=&amp;#34;+val.length); put.addColumn(cf, Bytes.toBytes(&amp;#34;short&amp;#34;), val); int intVal = 123; val = Bytes.toBytes(intVal); System.out.println(&amp;#34;Bytes for int:&amp;#34;+ bytesToHex(val)+&amp;#34;,len=&amp;#34;+val.length); put.addColumn(cf, Bytes.toBytes(&amp;#34;int&amp;#34;), val); long longVal = 123L; val = Bytes.toBytes(longVal); System.out.println(&amp;#34;Bytes for long:&amp;#34;+ bytesToHex(val)+&amp;#34;,len=&amp;#34;+val.length); put.addColumn(cf, Bytes.toBytes(&amp;#34;long&amp;#34;), val); float floatVal = 123; val = Bytes.</description></item></channel></rss>