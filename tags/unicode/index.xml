<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>unicode on Mryqu's Notes</title><link>https://mryqu.github.io/tags/unicode/</link><description>Recent content in unicode on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 26 Dec 2015 06:06:24 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/unicode/index.xml" rel="self" type="application/rss+xml"/><item><title>表情符号之Unicode和UTF-8编码</title><link>https://mryqu.github.io/post/%E8%A1%A8%E6%83%85%E7%AC%A6%E5%8F%B7%E4%B9%8Bunicode%E5%92%8Cutf-8%E7%BC%96%E7%A0%81/</link><pubDate>Sat, 26 Dec 2015 06:06:24 +0000</pubDate><guid>https://mryqu.github.io/post/%E8%A1%A8%E6%83%85%E7%AC%A6%E5%8F%B7%E4%B9%8Bunicode%E5%92%8Cutf-8%E7%BC%96%E7%A0%81/</guid><description>最近在玩表情符号，这个表情符号Unicode表格，还挺全： http://apps.timwhitlock.info/emoji/tables/unicode 此外也常用这个在线编码转换工具进行验证：http://tool.oschina.net/encode 表情符号的Unicode范围在Android - How to filter emoji (emoticons) from a string?有提到过：
U+2190 to U+21FF U+2600 to U+26FF U+2700 to U+27BF U+3000 to U+303F U+1F300 to U+1F64F U+1F680 to U+1F6FF</description></item><item><title>Visual Studio: 使用简体中文（GB2312）编码加载文件, 有些字节已用Unicode替换字符更换</title><link>https://mryqu.github.io/post/visual_studio_%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87gb2312%E7%BC%96%E7%A0%81%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6_%E6%9C%89%E4%BA%9B%E5%AD%97%E8%8A%82%E5%B7%B2%E7%94%A8unicode%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E6%9B%B4%E6%8D%A2/</link><pubDate>Mon, 21 Dec 2015 05:55:02 +0000</pubDate><guid>https://mryqu.github.io/post/visual_studio_%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87gb2312%E7%BC%96%E7%A0%81%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6_%E6%9C%89%E4%BA%9B%E5%AD%97%E8%8A%82%E5%B7%B2%E7%94%A8unicode%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E6%9B%B4%E6%8D%A2/</guid><description>遭遇下列VS2010错误: Some bytes have been replaced with the Unicodesubstitution character while loading file base64.cpp with ChineseSimplified (GB2312) encoding. Saving the file will not preserve theoriginal file contents. 我的Visual Studio已经勾选了Auto-detect UTF-8 encoding withoutsignature: Ultraedit不能正常显示base64.cpp，但Sublime Text能正常显示。 原因是base64.cpp并不是UTF-8编码，但是包含一个十六进制为&amp;quot;E9&amp;quot;的字符，即带重音符的e。由于我的系统locale是RPC，所以显示不正常，估计系统locale改成CP1252 - Windows 拉丁语1代码页就可以了。用Sublime Text将其转存为UTF-8编码当然也可以。</description></item><item><title>ICU4J介绍</title><link>https://mryqu.github.io/post/icu4j%E4%BB%8B%E7%BB%8D/</link><pubDate>Thu, 02 Jul 2015 00:08:26 +0000</pubDate><guid>https://mryqu.github.io/post/icu4j%E4%BB%8B%E7%BB%8D/</guid><description>ICU (International Components for Unicode)是为软件应用提供Unicode和全球化支持的一套成熟、广泛使用的C/C++和Java类库集，可在所有平台的C/C++和Java软件上获得一致的结果。 ICU首先是由Taligent公司开发的，Taligent公司被合并为IBM公司全球化认证中心的Unicode研究组后，ICU由IBM和开源组织合作继续开发。开始ICU只有Java平台的版本，后来这个平台下的ICU类被吸纳入SUN公司开发的JDK1.1，并在JDK以后的版本中不断改进。 C++和C平台下的ICU是由JAVA平台下的ICU移植过来的，移植过的版本被称为ICU4C，来支持这C/C++两个平台下的国际化应用。ICU4J和ICU4C区别不大，但由于ICU4C是开源的，并且紧密跟进Unicode标准，ICU4C支持的Unicode标准总是最新的；同时，因为JAVA平台的ICU4J的发布需要和JDK绑定，ICU4C支持Unicode标准改变的速度要比ICU4J快的多。 ICU的功能主要有:
代码页转换:对文本数据进行Unicode、几乎任何其他字符集或编码的相互转换。ICU的转化表基于IBM过去几十年收集的字符集数据，在世界各地都是最完整的。 排序规则（Collation）:根据特定语言、区域或国家的管理和标准比较字数串。ICU的排序规则基于Unicode排序规则算法加上来自公共区域性数据仓库（Commonlocale data repository）的区域特定比较规则。 格式化:根据所选区域设置的惯例，实现对数字、货币、时间、日期、和利率的格式化。包括将月和日名称转换成所选语言、选择适当缩写、正确对字段进行排序等。这些数据也取自公共区域性数据仓库。 时间计算: 在传统格里历基础上提供多种历法。提供一整套时区计算API。 Unicode支持:ICU紧密跟进Unicode标准，通过它可以很容易地访问Unicode标准制定的很多Unicode字符属性、Unicode规范化、大小写转换和其他基础操作。 正则表达式: ICU的正则表达式全面支持Unicode并且性能极具竞争力。 Bidi: 支持不同文字书写顺序混合文字（例如从左到右书写的英语，或者从右到左书写的阿拉伯文和希伯来文）的处理。 文本边界: 在一段文本内定位词、句或段落位置、或标识最适合显示文本的自动换行位置。 下面的示例是使用ICU4J检测文本编码：
package com.yqu.icu4j; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import com.ibm.icu.text.CharsetDetector; import com.ibm.icu.text.CharsetMatch; public class EncodingDetector { public static void tryEncoding(String fileName) throws IOException { System.out.println(&amp;#34;===Getting encoding of &amp;#34; + fileName); Path path = Paths.get(fileName); byte[] data = Files.readAllBytes(path); CharsetDetector detector = new CharsetDetector(); detector.setText(data); CharsetMatch match = detector.</description></item><item><title>在Vi中搜索多字节unicode字符</title><link>https://mryqu.github.io/post/%E5%9C%A8vi%E4%B8%AD%E6%90%9C%E7%B4%A2%E5%A4%9A%E5%AD%97%E8%8A%82unicode%E5%AD%97%E7%AC%A6/</link><pubDate>Sun, 20 Oct 2013 09:00:49 +0000</pubDate><guid>https://mryqu.github.io/post/%E5%9C%A8vi%E4%B8%AD%E6%90%9C%E7%B4%A2%E5%A4%9A%E5%AD%97%E8%8A%82unicode%E5%AD%97%E7%AC%A6/</guid><description>使用Vi编辑unicode字符文本文件时，可以通过下列方式搜索和替换字符：
\%d 匹配特定十进制字符 (例如 \%d 123) \%x 匹配特定十六进制字符 (例如 \%x2a) \%o 匹配特定八进制字符 (例如 \%o040) \%u 匹配特定多字节字符 (例如 \%u20ac) \%U 匹配特定大的多字节字符(例如 \%U12345678) 为了在文本中查看任何字符的unicode或十六机制格式内容，将光标置于该字符上之后输入ga 命令。这会以十进制、十六机制和八进制显示显示字符值：</description></item></channel></rss>