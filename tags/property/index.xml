<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>property on Mryqu's Notes</title><link>https://mryqu.github.io/tags/property/</link><description>Recent content in property on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 13 Nov 2015 06:04:43 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/property/index.xml" rel="self" type="application/rss+xml"/><item><title>[OpenUI5] 控件的Property、Aggregation和Association如何自动具有的Getter和Setter？</title><link>https://mryqu.github.io/post/openui5_%E6%8E%A7%E4%BB%B6%E7%9A%84propertyaggregation%E5%92%8Cassociation%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E5%85%B7%E6%9C%89%E7%9A%84getter%E5%92%8Csetter/</link><pubDate>Fri, 13 Nov 2015 06:04:43 +0000</pubDate><guid>https://mryqu.github.io/post/openui5_%E6%8E%A7%E4%BB%B6%E7%9A%84propertyaggregation%E5%92%8Cassociation%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E5%85%B7%E6%9C%89%E7%9A%84getter%E5%92%8Csetter/</guid><description>定义了OpenUI5控件的Property、Aggregation、Association和Event后，该控件就会出现这些Property、Aggregation和Association的Getter和Setter，是什么机制自动生成的这些Getter和Setter的？
OpenUI5控件都继承自sap.ui.core.Control，其父类为sap.ui.core.Element，在祖父类为sap.ui.base.ManagedObject。sap.ui.base.ManagedObject类定义了Properties、Aggregations、Associations和Events这些管理特性。
Getter和Setter的生成机制都在sap.ui.core.ManagedObjectMetadata中实现的。首先我们看一下sap.ui.core.ManagedObjectMetadata这个类的源代码片段：
ManagedObjectMetadata.prototype.generateAccessors = function() { var proto = this.getClass().prototype, prefix = this.getName() + &amp;#34;.&amp;#34;, methods = this._aPublicMethods, n; function add(name, fn, info) { if ( !proto[name] ) { proto[name] = (info &amp;amp;&amp;amp; info.deprecated) ? deprecation(fn, prefix + info.name) : fn; } methods.push(name); } for (n in this._mProperties) { this._mProperties[n].generate(add); } for (n in this._mAggregations) { this._mAggregations[n].generate(add); } for (n in this._mAssociations) { this._mAssociations[n].generate(add); } for (n in this._mEvents) { this.</description></item><item><title>[Gradle] 在子项目中共享项目属性</title><link>https://mryqu.github.io/post/gradle_%E5%9C%A8%E5%AD%90%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%85%B1%E4%BA%AB%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7/</link><pubDate>Fri, 22 May 2015 06:09:34 +0000</pubDate><guid>https://mryqu.github.io/post/gradle_%E5%9C%A8%E5%AD%90%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%85%B1%E4%BA%AB%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7/</guid><description>build.gradle:
buildscript { repositories { mavenCentral() } } subprojects { apply plugin: &amp;#39;java&amp;#39; apply plugin: &amp;#39;eclipse&amp;#39; apply plugin: &amp;#39;idea&amp;#39; repositories { mavenCentral() } sourceCompatibility = 1.8 targetCompatibility = 1.8 ext { HadoopVersion = &amp;#39;2.7.x&amp;#39; JUnitVersion = &amp;#39;4.11&amp;#39; ...... } } HelloHadoopClient/build.gradle：
jar { baseName = &amp;#39;hello-hadoopclient&amp;#39; version = &amp;#39;0.1.0&amp;#39; } dependencies { compile &amp;#34;org.apache.hadoop:hadoop-common:${HadoopVersion}&amp;#34; testCompile &amp;#34;junit:junit:${JUnitVersion}&amp;#34; } HelloMapReduce/build.gradle：
jar { baseName = &amp;#39;hello-mapreduce&amp;#39; version = &amp;#39;0.1.0&amp;#39; } dependencies { compile &amp;#34;org.</description></item><item><title>[Gradle] 设置项目属性的三种方式</title><link>https://mryqu.github.io/post/gradle_%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</link><pubDate>Tue, 07 Apr 2015 05:36:16 +0000</pubDate><guid>https://mryqu.github.io/post/gradle_%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid><description>命令行 gradle bootRun -PyquPropKey=yquPropValue build.properties yquPropKey=yquPropValue gradle.properties 添加ext块：
ext { yquPropKey=yquPropValue }</description></item></channel></rss>