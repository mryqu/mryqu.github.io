<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>html on Mryqu's Notes</title><link>https://mryqu.github.io/tags/html/</link><description>Recent content in html on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 09 Mar 2018 05:50:21 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/html/index.xml" rel="self" type="application/rss+xml"/><item><title>使用Fetch_API</title><link>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8fetch_api/</link><pubDate>Fri, 09 Mar 2018 05:50:21 +0000</pubDate><guid>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8fetch_api/</guid><description>今天又学了一招在Chrome developer tool中通过Fetch_API发起HTTP请求。 代码示例：
fetch(&amp;#39;https://jsonplaceholder.typicode.com/posts/1&amp;#39;) .then(response =&amp;gt; response.json()) .then(json =&amp;gt; console.log(json))</description></item><item><title>[OpenUI5] Theme加载</title><link>https://mryqu.github.io/post/openui5_theme%E5%8A%A0%E8%BD%BD/</link><pubDate>Thu, 28 Dec 2017 05:37:36 +0000</pubDate><guid>https://mryqu.github.io/post/openui5_theme%E5%8A%A0%E8%BD%BD/</guid><description>瞄了一下OpenUI5中UI主题加载，关键点在sap.ui.core.Core.includeLibraryTheme方法。其调用者主要为：
sap.ui.core.Core._boot：启动OpenUI5核心时加载必要的主题 sap.ui.core.Core.initLibrary：加载某个库时会尝试加载其主题 假定config.js内容如下： window[&amp;#39;sap-ui-config&amp;#39;] = { bindingSyntax: &amp;#39;complex&amp;#39;, modules: [ &amp;#34;sap.m.library&amp;#34;, &amp;#34;sap.ui.commons.library&amp;#34;, &amp;#34;sap.ui.table.library&amp;#34;, &amp;#34;sap.ui.layout.library&amp;#34;, &amp;#34;yqu.ui.kexiao.library&amp;#34; ] } }; OpenUI5在加载yqu.ui.kexiao.library库时会尝试加载其主题。
Core.includeLibraryTheme (Core.js?eval:xxxx) Core.initLibrary (Core.js?eval:xxxx) (anonymous) (Interface.js?eval:xx) (anonymous) (library.js?eval:xx) evalModuleStr (sap-ui-core-dbg.js:xxxxx) execModule (sap-ui-core-dbg.js:xxxxx) requireModule (sap-ui-core-dbg.js:xxxxx) jQuery.sap.require (sap-ui-core-dbg.js:xxxxx) Core.loadLibrary (Core.js?eval:xxxx) .............</description></item><item><title>[OpenUI5] 快速定位OpenUI5问题的一个方法</title><link>https://mryqu.github.io/post/openui5_%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8Dopenui5%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%80%E4%B8%AA%E6%96%B9%E6%B3%95/</link><pubDate>Fri, 09 Jan 2015 16:30:12 +0000</pubDate><guid>https://mryqu.github.io/post/openui5_%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8Dopenui5%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%80%E4%B8%AA%E6%96%B9%E6%B3%95/</guid><description>sap.ui.base.Object是所有OpenUI5对象的父类，它的某些方法对快速定位OpenUI5问题很有帮助。我写了一个小函数通过OpenUI5对象的元数据获得类名，并且获得OpenUI5对象的ID信息。
traceUI5Object: function(obj) { if(obj instanceof sap.ui.base.Object) console.log(obj.getMetadata().getName()+&amp;#34;{id:\&amp;#39;&amp;#34;+obj.getId()+&amp;#34;\&amp;#39;}&amp;#34;); } traceUI5EventProviders: function(obj) { var that = obj; while (that &amp;amp;&amp;amp; that instanceof sap.ui.base.EventProvider) { console.log(that.getMetadata().getName()+&amp;#34;{id:\&amp;#39;&amp;#34;+that.getId()+&amp;#34;\&amp;#39;}&amp;#34;); that = that.getEventingParent(); } } traceUI5EventProviders函数运行结果示例： sap.ui.commons.CheckBox{id:&amp;#39;check1&amp;#39;} sap.ui.commons.Panel{id:&amp;#39;panel1&amp;#39;} sap.ui.core.mvc.JSView{id:&amp;#39;leftView&amp;#39;} sap.ui.commons.Splitter{id:&amp;#39;Splitter1&amp;#39;} sap.ui.core.mvc.JSView{id:&amp;#39;__jsview0&amp;#39;} sap.ui.core.UIArea{id:&amp;#39;content&amp;#39;} 在编写和调试OpenUI5时，有时会有Exception抛出。 假定上面图中代码会抛出Exception，通过this我们看到的的是一个Factory，通过sId我们可以找到发生问题的定义了ID的控件。但是如果控件ID是自生成的，就不太容易了。我们可以通过监视表达式获取（组件链上所有的）组件类名及ID，这样就可以更快定位导致抛出Exception的OpenUI5视图/控件了。</description></item><item><title>HTML Busy Indicator</title><link>https://mryqu.github.io/post/html_busy_indicator/</link><pubDate>Sun, 04 Jan 2015 20:13:28 +0000</pubDate><guid>https://mryqu.github.io/post/html_busy_indicator/</guid><description>看了一下OpenUI5的LocalBusyIndicator效果，感觉跟自己想的转圈圈的那种spinner不一样:https://sapui5.hana.ondemand.com/sdk/test-resources/sap/ui/core/demokit/LocalBusyIndicator.html 想看看bootstrap的busy indicator，竟然没有，不过找到了开发组的讨论：https://github.com/twbs/bootstrap/issues/12598 不止一次有人建议开发busy indicator，不过Mark Otto（Bootstrap是Mark Otto和JacobThornton共同开发的）没同意。因为满足不了下列条件：
It needs to be retina-ready Needs to work in IE8+ Needs to work on light backgrounds and dark—alphatransparencywould be bomb Would be cool if it was a font, but PNG or GIF is fine,too Available in multiple sizes 开发一款满意的控件容易吗！！！还好我就用用而已 下面是我找到的一些Busy Indicator资源： http://fgnass.github.io/spin.js/
http://semantic-ui.com/elements/loader.html
http://w3lessons.info/2014/01/26/showing-busy-loading-indicator-during-an-ajax-request-using-jquery/</description></item><item><title>接触字体图标(Icon Font)</title><link>https://mryqu.github.io/post/%E6%8E%A5%E8%A7%A6%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87icon_font/</link><pubDate>Tue, 09 Dec 2014 19:47:38 +0000</pubDate><guid>https://mryqu.github.io/post/%E6%8E%A5%E8%A7%A6%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87icon_font/</guid><description>最近玩SAP的OpenUI5，碰到了sap-icon://协议，接触了字体图标。 字体图标流行了有两年了，现在已经不是什么新鲜概念啦。主要是因为 CSS3 增加了一个非常实用的属性@font-face。传统的网页中的字体设置，使用font-family属性来定义，而且受限于浏览者电脑上所安装的字体，如果浏览者电脑上没有安装对应字体，那么网页渲染起来就会使用其他字体来代替。而新增的@font-face改变了这一现状，使用该属性，可以指定服务器上的一个字体，当浏览者访问的时候，会优先下载服务器上的字体，然后再使用该字体渲染网页。这样就可以发挥设计师的想象，灵活的任意应用字体，同时不需要考虑不同平台的差异。该属性的兼容性也非常好。详细兼容性见http://caniuse.com/#feat=fontface 。 @font-face功能不仅仅可以用在改变文章的字体样式上，还可以来做字体图标。字体其实就是一种图标，把对应的基础的文字，渲染成有棱有角的文字。如果某个文字的字体，并不设计成那个文字的变形，而设计成截然不同的图标，那么当网页中出现这个文字，就会渲染出一个图标。
字体图标与像素位图的对比 优点：
兼容性：各个平台浏览器基本都可以使用，而且在某些老版本浏览器中，效果比图片更好。 轻量性：相对于同效果的位图相比，体积要小。一旦图标字体加载了，图标就会马上渲染出来，不需要下载一个图像。可以减少HTTP请求，增强前端性能，还可以配合HTML5离线存储做性能优化。 灵活性：图标字体可以用过font-size属性设置其任何大小，还可以加各种文字效果，包括颜色、Hover状态、透明度、阴影和翻转等效果。可以在任何背景下显示。使用位图的话，必须得为每个不同大小和不同效果的图像输出一个不同文件。 劣势：
图标字体只能被渲染成单色或者CSS3的渐变色。 免费开源的精美字体图标资源还是不够多。 创作自已的字体图标很费时间，重构人员后期维护的成本偏高。 常用字库文件格式 TTF(TrueTypeFont)格式：TTF是Apple公司和Microsoft公司推出的字体文件格式,随着windows的流行,已经变成最常用的一种字体文件表示方式。truetype字体的最大优点是可以很方便地把字体轮廓转换成曲线，可以对曲线进行填充，制成各种颜色和效果，字款丰富。 OTF(OpenType Font)格式：OpenType，是一种可缩放字型（scalablefont），微软公司与Adobe公司联合开发，用来替代TrueType字型的新字型。 WOFF格式：Web开放字体格式（Web Open FontFormat，简称WOFF），是一种网页所采用的字体格式标准。此字体格式不但能够有效利用压缩来减少档案大小，并且不包含加密。WOFF得到许多主要字体制造公司的支持。 EOT格式：EOT是一种压缩字库，目的是解决在网页中嵌入特殊字体的难题。例如：网页前端开发人员在网页中使用了很多种特殊的精美的字体，当网友浏览时，却因没有安装相应的字库，只能看到默认的宋体字，效果惨不忍睹。利用EOT字库即可解决此难题。 网上一些字体图标资源 OpenUI5 Icon Explorer
confont.cn：由阿里巴巴UX部门推出的矢量图标管理网站，也是国内首家推广Webfont形式图标的平台。
Font Awesome：An iconic font and CSS framework project at GitHub
在OpenUI5里使用字体图标 SAPUI5提供了sap.ui.core.icon控件和sap.ui.core.IconPool力提供的一套预定义图标。通过学习https://github.com/SAP/openui5/blob/master/src/sap.ui.core/src/sap/ui/core/IconPool.js ，大致可以找到OpenUI5里的字体库。
/resources/sap/ui/core/themes/base/fonts/SAP-icons.eot /resources/sap/ui/core/themes/base/fonts/SAP-icons.ttf /resources/sap/ui/core/themes/sap_bluecrystal/fonts/bluecrystal_icons.ttf /resources/sap/ui/core/themes/sap_bluecrystal/fonts/SAP-icons.eot /resources/sap/ui/core/themes/sap_bluecrystal/fonts/SAP-icons.ttf /resources/sap/ui/core/themes/sap_goldreflection/fonts/SAP-icons.eot /resources/sap/ui/core/themes/sap_goldreflection/fonts/SAP-icons.ttf /resources/sap/ui/core/themes/sap_hcb/fonts/SAP-icons.eot /resources/sap/ui/core/themes/sap_hcb/fonts/SAP-icons.ttf</description></item><item><title>用Python清理XMind生成的html文件</title><link>https://mryqu.github.io/post/%E7%94%A8python%E6%B8%85%E7%90%86xmind%E7%94%9F%E6%88%90%E7%9A%84html%E6%96%87%E4%BB%B6/</link><pubDate>Sun, 20 Jul 2014 06:42:59 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%94%A8python%E6%B8%85%E7%90%86xmind%E7%94%9F%E6%88%90%E7%9A%84html%E6%96%87%E4%BB%B6/</guid><description>XMind思维导图可以导出成html文件，但是每个Topic都被a标签包着，然后外面再被h1、h2&amp;hellip;h5标题标签包着，看着就难受。此外h1、h2&amp;hellip;h5和p标签都加了class属性，没什么用。 写一段小程序，将XMind生成的html文件进行格式清理。
from bs4 import BeautifulSoup as BeautifulSoup soup = BeautifulSoup(open(&amp;#34;c:/qutemp/123.html&amp;#34;)) for a in soup(&amp;#39;a&amp;#39;): a.parent.string = a.string a.clear() for tag in [&amp;#39;h1&amp;#39;,&amp;#39;h2&amp;#39;,&amp;#39;h3&amp;#39;,&amp;#39;h4&amp;#39;,&amp;#39;h5&amp;#39;,&amp;#39;p&amp;#39;]: for tag in soup(tag): del tag[&amp;#39;class&amp;#39;] print soup</description></item><item><title>lxml.html.soupparser引入BeautifulSoup 4的work-around</title><link>https://mryqu.github.io/post/lxml.md.soupparser%E5%BC%95%E5%85%A5beautifulsoup_4%E7%9A%84work-around/</link><pubDate>Sun, 22 Jun 2014 15:51:50 +0000</pubDate><guid>https://mryqu.github.io/post/lxml.md.soupparser%E5%BC%95%E5%85%A5beautifulsoup_4%E7%9A%84work-around/</guid><description>想用一下python的xpath功能分析一个html文件，lxml是比较不错的xml/html解析库，lxml功能强大，性能也不错，此外也包含了ElementTree，html5lib ，beautfulsoup 等库。 可惜我的html文件格式不是很严谨，lxml的ElementTree处理不了，就转而想用lxml的beautfulsoup来处理。 结果lxml找不到BeautifulSoup库。
查了一下Anaconda装的库里面明明有Beautiful Soup 4.3.1，感觉很奇怪！! lxml.html.soupparser引入BeautifulSoup 4的work-around 原来Beautiful Soup 3目前已经停止开发，Beautiful Soup 4移植到了BS4。
下面的语句就可以引入Beautiful Soup 4了，可是lxml还是无法引入beautfulsoup。
from bs4 import BeautifulSoup stackoverflow有一个帖子import error due to bs4 vs BeautifulSoup讲了一个work-around，可以欺骗lxml从而引入beautfulsoup。测试一下，果然工作正常了。
import sys, bs4 sys.modules[&amp;#39;BeautifulSoup&amp;#39;] = bs4 import lxml.html.soupparser as soupparser</description></item><item><title>玩玩无序列表ul和有序列表ol</title><link>https://mryqu.github.io/post/%E7%8E%A9%E7%8E%A9%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8ul%E5%92%8C%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8ol/</link><pubDate>Fri, 18 Oct 2013 19:19:21 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%8E%A9%E7%8E%A9%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8ul%E5%92%8C%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8ol/</guid><description>写博客有时候用到列表，这里好好玩一玩。
CSS list-style-type 属性 属性介绍 |值|描述 |&amp;mdash;&amp;ndash; |none|无标记。 |disc|默认。标记是实心圆。 |circle|标记是空心圆。 |square|标记是实心方块。 |decimal|标记是数字。 |decimal-leading-zero|0开头的数字标记。(01, 02, 03, 等。) |lower-roman|小写罗马数字(i, ii, iii, iv, v, 等。) |upper-roman|大写罗马数字(I, II, III, IV, V, 等。) |lower-alpha|小写英文字母The marker is lower-alpha (a, b, c, d, e, 等。) |upper-alpha|大写英文字母The marker is upper-alpha (A, B, C, D, E, 等。) |lower-greek|小写希腊字母(alpha, beta, gamma, 等。) |lower-latin|小写拉丁字母(a, b, c, d, e, 等。) |upper-latin|大写拉丁字母(A, B, C, D, E, 等。) |hebrew|传统的希伯来编号方式 |armenian|传统的亚美尼亚编号方式 |georgian|传统的乔治亚编号方式(an, ban, gan, 等。) |cjk-ideographic|简单的表意数字 |hiragana|标记是：a, i, u, e, o, ka, ki, 等。（日文片假名） |katakana|标记是：A, I, U, E, O, KA, KI, 等。（日文片假名） |hiragana-iroha|标记是：i, ro, ha, ni, ho, he, to, 等。（日文片假名） |katakana-iroha|标记是：I, RO, HA, NI, HO, HE, TO, 等。（日文片假名） |inherit|规定应该从父元素继承 list-style-type 属性的值。</description></item><item><title>常用HTML转义字符</title><link>https://mryqu.github.io/post/%E5%B8%B8%E7%94%A8html%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</link><pubDate>Tue, 25 Jun 2013 10:23:39 +0000</pubDate><guid>https://mryqu.github.io/post/%E5%B8%B8%E7%94%A8html%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</guid><description>最常用的字符实体 |显示|说明|实体名称|实体编号 |&amp;mdash;&amp;ndash; | |半方大的空白|&amp;amp; ensp;|&amp;amp; #8194; | |全方大的空白|&amp;amp; emsp;|&amp;amp; #8195; | |不断行的空白格|&amp;amp; nbsp;|&amp;amp; #160; |&amp;lt; |小于|&amp;amp; lt;|&amp;amp; #60; |&amp;gt;|大于|&amp;amp; gt;|&amp;amp; #62; |&amp;amp;|&amp;amp; 符号|&amp;amp; amp;|&amp;amp; #38; |&amp;quot;|双引号|&amp;amp; quot;|&amp;amp; #34; |©|版权|&amp;amp; copy;|&amp;amp; #169; |®|已注册商标|&amp;amp; reg;|&amp;amp; #174; |™|商标（美国）|&amp;amp; trade;|&amp;amp; #8482; |×|乘号|&amp;amp; times;|&amp;amp; #215; |÷|除号|&amp;amp; divide;|&amp;amp; #247;
ISO 8859-1 (Latin-1)字符集 HTML 4.01 支持 ISO 8859-1 (Latin-1) 字符集。
备注：为了方便起见，以下表格中，“实体名称”简称为“名称”，“实体编号”简称为“编号”
|显示|名称|编号|显示|名称|编号|显示|名称|编号 |&amp;mdash;&amp;ndash; | |&amp;amp; nbsp;|&amp;amp; #160;|¡|&amp;amp; iexcl;|&amp;amp; #161;|¢|&amp;amp; cent;|&amp;amp; #162; |£|&amp;amp; pound;|&amp;amp; #163;|¤|&amp;amp; curren;|&amp;amp; #164;|¥|&amp;amp; yen;|&amp;amp; #165; |¦|&amp;amp; brvbar;|&amp;amp; #166;|§|&amp;amp; sect;|&amp;amp; #167;|¨|&amp;amp; uml;|&amp;amp; #168; |©|&amp;amp; copy;|&amp;amp; #169;|ª|&amp;amp; ordf;|&amp;amp; #170;|«|&amp;amp; laquo;|&amp;amp; #171; |¬|&amp;amp; not;|&amp;amp; #172;|­|&amp;amp; shy;|&amp;amp; #173;|®|&amp;amp; reg;|&amp;amp; #174; |¯|&amp;amp; macr;|&amp;amp; #175;|°|&amp;amp; deg;|&amp;amp; #176;|±|&amp;amp; plusmn;|&amp;amp; #177; |²|&amp;amp; sup2;|&amp;amp; #178;|³|&amp;amp; sup3;|&amp;amp; #179;|´|&amp;amp; acute;|&amp;amp; #180; |µ|&amp;amp; micro;|&amp;amp; #181;|¶|&amp;amp; para;|&amp;amp; #182;|·|&amp;amp; middot;|&amp;amp; #183; |¸|&amp;amp; cedil;|&amp;amp; #184;|¹|&amp;amp; sup1;|&amp;amp; #185;|º|&amp;amp; ordm;|&amp;amp; #186; |»|&amp;amp; raquo;|&amp;amp; #187;|¼|&amp;amp; frac14;|&amp;amp; #188;|½|&amp;amp; frac12;|&amp;amp; #189; |¾|&amp;amp; frac34;|&amp;amp; #190;|¿|&amp;amp; iquest;|&amp;amp; #191;|À|&amp;amp; Agrave;|&amp;amp; #192; |Á|&amp;amp; Aacute;|&amp;amp; #193;|Â|&amp;amp; Acirc;|&amp;amp; #194;|Ã|&amp;amp; Atilde;|&amp;amp; #195; |Ä|&amp;amp; Auml;|&amp;amp; #196;|Å|&amp;amp; Aring;|&amp;amp; #197;|Æ|&amp;amp; AElig;|&amp;amp; #198; |Ç|&amp;amp; Ccedil;|&amp;amp; #199;|È|&amp;amp; Egrave;|&amp;amp; #200;|É|&amp;amp; Eacute;|&amp;amp; #201; |Ê|&amp;amp; Ecirc;|&amp;amp; #202;|Ë|&amp;amp; Euml;|&amp;amp; #203;|Ì|&amp;amp; Igrave;|&amp;amp; #204; |Í|&amp;amp; Iacute;|&amp;amp; #205;|Î|&amp;amp; Icirc;|&amp;amp; #206;|Ï|&amp;amp; Iuml;|&amp;amp; #207; |Ð|&amp;amp; ETH;|&amp;amp; #208;|Ñ|&amp;amp; Ntilde;|&amp;amp; #209;|Ò|&amp;amp; Ograve;|&amp;amp; #210; |Ó|&amp;amp; Oacute;|&amp;amp; #211;|Ô|&amp;amp; Ocirc;|&amp;amp; #212;|Õ|&amp;amp; Otilde;|&amp;amp; #213; |Ö|&amp;amp; Ouml;|&amp;amp; #214;|×|&amp;amp; times;|&amp;amp; #215;|Ø|&amp;amp; Oslash;|&amp;amp; #216; |Ù|&amp;amp; Ugrave;|&amp;amp; #217;|Ú|&amp;amp; Uacute;|&amp;amp; #218;|Û|&amp;amp; Ucirc;|&amp;amp; #219; |Ü|&amp;amp; Uuml;|&amp;amp; #220;|Ý|&amp;amp; Yacute;|&amp;amp; #221;|Þ|&amp;amp; THORN;|&amp;amp; #222; |ß|&amp;amp; szlig;|&amp;amp; #223;|à|&amp;amp; agrave;|&amp;amp; #224;|á|&amp;amp; aacute;|&amp;amp; #225; |â|&amp;amp; acirc;|&amp;amp; #226;|ã|&amp;amp; atilde;|&amp;amp; #227;|ä|&amp;amp; auml;|&amp;amp; #228; |å|&amp;amp; aring;|&amp;amp; #229;|æ|&amp;amp; aelig;|&amp;amp; #230;|ç|&amp;amp; ccedil;|&amp;amp; #231; |è|&amp;amp; egrave;|&amp;amp; #232;|é|&amp;amp; eacute;|&amp;amp; #233;|ê|&amp;amp; ecirc;|&amp;amp; #234; |ë|&amp;amp; euml;|&amp;amp; #235;|ì|&amp;amp; igrave;|&amp;amp; #236;|í|&amp;amp; iacute;|&amp;amp; #237; |î|&amp;amp; icirc;|&amp;amp; #238;|ï|&amp;amp; iuml;|&amp;amp; #239;|ð|&amp;amp; eth;|&amp;amp; #240; |ñ|&amp;amp; ntilde;|&amp;amp; #241;|ò|&amp;amp; ograve;|&amp;amp; #242;|ó|&amp;amp; oacute;|&amp;amp; #243; |ô|&amp;amp; ocirc;|&amp;amp; #244;|õ|&amp;amp; otilde;|&amp;amp; #245;|ö|&amp;amp; ouml;|&amp;amp; #246; |÷|&amp;amp; divide;|&amp;amp; #247;|ø|&amp;amp; oslash;|&amp;amp; #248;|ù|&amp;amp; ugrave;|&amp;amp; #249; |ú|&amp;amp; uacute;|&amp;amp; #250;|û|&amp;amp; ucirc;|&amp;amp; #251;|ü|&amp;amp; uuml;|&amp;amp; #252; |ý|&amp;amp; yacute;|&amp;amp; #253;|þ|&amp;amp; thorn;|&amp;amp; #254;|ÿ|&amp;amp; yuml;|&amp;amp; #255;</description></item><item><title>Meta的http-equiv属性详解</title><link>https://mryqu.github.io/post/%E4%BB%8A%E5%A4%A9%E7%9C%8B%E7%9A%84%E4%B8%9C%E4%B8%9Cmeta%E7%9A%84http-equiv%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/</link><pubDate>Fri, 03 Oct 2008 19:25:51 +0000</pubDate><guid>https://mryqu.github.io/post/%E4%BB%8A%E5%A4%A9%E7%9C%8B%E7%9A%84%E4%B8%9C%E4%B8%9Cmeta%E7%9A%84http-equiv%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/</guid><description>http-equiv顾名思义，相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值。 meta标签的http-equiv属性语法格式是：＜meta http-equiv=&amp;ldquo;参数&amp;rdquo; content=&amp;ldquo;参数变量值&amp;quot;＞；其中http-equiv属性主要有以下几种参数：
Expires(期限) 说明：可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。 用法：＜meta http-equiv=&amp;ldquo;expires&amp;rdquo; content=&amp;ldquo;Wed, 20 Jun 2007 22:33:00 GMT&amp;quot;＞ 注意：必须使用GMT的时间格式。 Pragma(cache模式) 说明：禁止浏览器从本地计算机的缓存中访问页面内容。 用法：＜meta http-equiv=&amp;ldquo;Pragma&amp;rdquo; content=&amp;ldquo;no-cache&amp;quot;＞ 注意：这样设定，访问者将无法脱机浏览。 Refresh(刷新) 说明：自动刷新并指向新页面。 用法：＜meta http-equiv=&amp;ldquo;Refresh&amp;rdquo; content=&amp;ldquo;2；URL=http://www.net.cn/&amp;ldquo;＞ 注意：其中的2是指停留2秒钟后自动刷新到URL网址。 Set-Cookie(cookie设定) 说明：如果网页过期，那么存盘的cookie将被删除。 用法：＜meta http-equiv=&amp;ldquo;Set-Cookie&amp;rdquo; content=&amp;ldquo;cookievalue=xxx; expires=Wednesday, 20-Jun-2007 22:33:00 GMT； path=/&amp;ldquo;＞ 注意：必须使用GMT的时间格式。 Window-target(显示窗口的设定) 说明：强制页面在当前窗口以独立页面显示。 用法：＜meta http-equiv=&amp;ldquo;Window-target&amp;rdquo; content=&amp;quot;_top&amp;quot;＞ 注意：用来防止别人在框架里调用自己的页面。 content-Type(显示字符集的设定) 说明：设定页面使用的字符集。 用法：＜meta http-equiv=&amp;ldquo;content-Type&amp;rdquo; content=&amp;ldquo;text/html; charset=gb2312&amp;quot;＞ Pics-label(网页等级评定) 用法：网页等级评定 说明：在IE的internet选项中有一项内容设置，可以防止浏览一些受限制的网站，而网站的限制级别就是通过meta属性来设置的。 还有Page_Enter、Page_Exit…… 补充： 设定进入页面时的特殊效果
设定离开页面时的特殊效果
Duration的值为网页动态过渡的时间，单位为秒。
Transition是过渡方式，它的值为0到23，分别对应24种过渡方式。如下表： 0 盒状收缩 1 盒状放射
2 圆形收缩 3 圆形放射
4 由下往上 5 由上往下</description></item></channel></rss>