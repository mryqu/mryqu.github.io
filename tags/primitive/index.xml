<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>primitive on Mryqu's Notes</title><link>https://mryqu.github.io/tags/primitive/</link><description>Recent content in primitive on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 02 Jan 2014 22:37:53 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/primitive/index.xml" rel="self" type="application/rss+xml"/><item><title>[HBase] 原始数据类型存储</title><link>https://mryqu.github.io/post/hbase_%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8/</link><pubDate>Thu, 02 Jan 2014 22:37:53 +0000</pubDate><guid>https://mryqu.github.io/post/hbase_%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8/</guid><description>对原始数据类型如何在HBase中存储，如何在HBaseShell中如何显示尚不了解，做一下小实验满足一下好奇心。使用下列代码存放和读取原始数据类型：
byte[] cf = Bytes.toBytes(CF_DEFAULT); Put put = new Put(Bytes.toBytes(&amp;#34;test&amp;#34;)); byte[] val = Bytes.toBytes(&amp;#34;123&amp;#34;); System.out.println(&amp;#34;Bytes for str: &amp;#34;+ bytesToHex(val)+&amp;#34;,len=&amp;#34;+val.length); put.addColumn(cf, Bytes.toBytes(&amp;#34;str&amp;#34;), val); short shortVal = 123; val = Bytes.toBytes(shortVal); System.out.println(&amp;#34;Bytes for short:&amp;#34;+ bytesToHex(val)+&amp;#34;,len=&amp;#34;+val.length); put.addColumn(cf, Bytes.toBytes(&amp;#34;short&amp;#34;), val); int intVal = 123; val = Bytes.toBytes(intVal); System.out.println(&amp;#34;Bytes for int:&amp;#34;+ bytesToHex(val)+&amp;#34;,len=&amp;#34;+val.length); put.addColumn(cf, Bytes.toBytes(&amp;#34;int&amp;#34;), val); long longVal = 123L; val = Bytes.toBytes(longVal); System.out.println(&amp;#34;Bytes for long:&amp;#34;+ bytesToHex(val)+&amp;#34;,len=&amp;#34;+val.length); put.addColumn(cf, Bytes.toBytes(&amp;#34;long&amp;#34;), val); float floatVal = 123; val = Bytes.</description></item><item><title>[JavaScript] 原始数据类型</title><link>https://mryqu.github.io/post/javascript_%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sat, 07 Dec 2013 10:09:54 +0000</pubDate><guid>https://mryqu.github.io/post/javascript_%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>原始数据类型 JavaScript共有5种原始数据类型：
|原始数据类型|包装对象|介绍 |&amp;mdash;&amp;ndash; |string|String|字符串遇到加号之外的计算操作符，会转换成数值。内容为不为数值的字符串转换成NaN。当用比较操作符比较两个字符串时，比较的是第一个字母的unicode。 |number|Number|十进制数：123八进制数：0123十六进制数：0x123指数：1e1、1E+1、2E-3无穷：Infinity、-Infinity非数字：NaN |Boolean|Boolean| |null||与undefined的区别在于，已定义但没有值 |undefined||
typeof操作符 typeof的返回值有六种可能：number、string、boolean、object、function、undefined。
条件判断或3元条件运算符(?:)判断 |值|Boolean结果 |&amp;mdash;&amp;ndash; |undefined|false |null|false |number|0和NaN为false，其他为true |string|空字符串&amp;quot;&amp;ldquo;为false，其他为true |对象|不为null的对象始终为true
参考 MDN：Primitive data type MDN：typeof operator</description></item></channel></rss>