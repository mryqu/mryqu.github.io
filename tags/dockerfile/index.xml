<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dockerfile on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/dockerfile/</link>
    <description>Recent content in Dockerfile on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 05 Jul 2015 21:32:25 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/dockerfile/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>apt-get在基于Ubuntu基础镜像Dockerfile中的常见用法</title>
      <link>https://mryqu.github.io/post/apt-get%E5%9C%A8%E5%9F%BA%E4%BA%8Eubuntu%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8Fdockerfile%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 05 Jul 2015 21:32:25 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/apt-get%E5%9C%A8%E5%9F%BA%E4%BA%8Eubuntu%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8Fdockerfile%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</guid>
      <description>首先，在Ubuntu的Docker官方镜像中是没有缓存Apt的软件包列表的。因此在做其他任何基础软件的安装前，都需要至少先做一次apt-get update。 有时为了加快apt-get安装软件的速度，还需要修改Apt源的列表文件/etc/apt/sources.list。相应的操作用命令表示如下：
# 使用Ubuntu官方的Apt源，也可以根据实际需要修改为国内源的地址 echo &amp;quot;deb http://archive.ubuntu.com/ubuntu trusty main universe\n&amp;quot; &amp;gt; /etc/apt/sources.list echo &amp;quot;deb http://archive.ubuntu.com/ubuntu trusty-updates main universe\n&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list  在容器构建时，为了避免使用apt-get install安装基础软件的过程中需要进行的交互操作，使用-y参数来避免安装非必须的文件，从而减小镜像的体积。
apt-get -y --no-install-recommends install  使用apt-get autoremove命令移除为了满足包依赖而安装的、但不再需要的包；使用apt-get clean命令清除所获得包文件的本地仓库。 DEBIAN_FRONTEND这个环境变量，告知操作系统应该从哪儿获得用户输入。如果设置为&amp;rdquo;noninteractive&amp;rdquo;，你就可以直接运行命令，而无需向用户请求输入（所有操作都是非交互式的）。这在运行apt-get命令的时候格外有用，因为它会不停的提示用户进行到了哪步并且需要不断确认。非交互模式会选择默认的选项并以最快的速度完成构建。请确保只在Dockerfile中调用的RUN命令中设置了该选项，而不是使用ENV命令进行全局的设置。因为ENV命令在整个容器运行过程中都会生效，所以当你通过BASH和容器进行交互时，如果进行了全局设置那就会出问题。
# 正确的做法 - 只为这个命令设置ENV变量 RUN DEBIAN_FRONTEND=noninteractive apt-get install -y python3 # 错误地做法 - 为接下来的任何命令都设置ENV变量，包括正在运行地容器 ENV DEBIAN_FRONTEND noninteractive RUN apt-get install -y python3  我的示例如下：
FROM ubuntu:trusty MAINTAINER mryqu RUN \ DEBIAN_FRONTEND=noninteractive apt-get update &amp;amp;&amp;amp; \ DEBIAN_FRONTEND=noninteractive apt-get -y install wget curl &amp;amp;&amp;amp; \ DEBIAN_FRONTEND=noninteractive apt-get -y autoremove &amp;amp;&amp;amp; \ DEBIAN_FRONTEND=noninteractive apt-get clean  参考 Ubuntu manuals: apt-get man page</description>
    </item>
    
    <item>
      <title>Docker速查笔记</title>
      <link>https://mryqu.github.io/post/docker%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 02 Jun 2015 22:16:06 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/docker%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0/</guid>
      <description>常用命令 登入运行的docker容器内 docker exec -it $dockerContainerName /bin/bash  查看docker日志 docker logs --tail=&amp;quot;5&amp;quot; -f $dockerContainerName  清除容器及镜像 docker stop $(docker ps -a -q) #停止所有容器 docker rm $(docker ps -a -q) #删除所有容器 docker rmi $(docker images -q) #删除所有镜像  参考 Docker Cheat Sheet
Docker Command Line
Dockerfile reference
The Docker Book</description>
    </item>
    
  </channel>
</rss>