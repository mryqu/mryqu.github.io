<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mysql on Mryqu's Notes</title><link>https://mryqu.github.io/tags/mysql/</link><description>Recent content in mysql on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 04 Jul 2018 06:36:25 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>[Spark] 使用Spark2.30读写MySQL</title><link>https://mryqu.github.io/post/spark_%E4%BD%BF%E7%94%A8spark2.30%E8%AF%BB%E5%86%99mysql/</link><pubDate>Wed, 04 Jul 2018 06:36:25 +0000</pubDate><guid>https://mryqu.github.io/post/spark_%E4%BD%BF%E7%94%A8spark2.30%E8%AF%BB%E5%86%99mysql/</guid><description>本博文是[Spark] 使用Spark2.30读写Hive2.3.3的姊妹篇，环境及Java项目也是使用上一博文中的。
Spark项目 目录结构 vagrant@node1:~/HelloSparkHive$ ls build build.gradle src vagrant@node1:~/HelloSparkHive$ rm -rf build vagrant@node1:~/HelloSparkHive$ tree . ├── build.gradle └── src └── main └── java └── com └── yqu └── sparkhive ├── HelloSparkHiveDriver.java └── HelloSparkMysqlDriver.java 6 directories, 3 files src/main/java/com/yqu/sparkhive/HelloSparkMysqlDriver.java 该范例加载Hive中的emp表，存储到MySQL的test数据库中，然后读取MySQL数据库加载emp表，由此完成MySQL读写示例。
package com.yqu.sparkhive; import org.apache.spark.sql.Dataset; import org.apache.spark.sql.Row; import org.apache.spark.sql.SparkSession; import java.io.File; import java.sql.*; public class HelloSparkMysqlDriver { private static boolean setup() { Connection conn = null; Statement stmt = null; try { Class.</description></item><item><title>[MySQL] 将空返回值转换成NULL</title><link>https://mryqu.github.io/post/mysql_%E5%B0%86%E7%A9%BA%E8%BF%94%E5%9B%9E%E5%80%BC%E8%BD%AC%E6%8D%A2%E6%88%90null/</link><pubDate>Sat, 01 Apr 2017 06:17:43 +0000</pubDate><guid>https://mryqu.github.io/post/mysql_%E5%B0%86%E7%A9%BA%E8%BF%94%E5%9B%9E%E5%80%BC%E8%BD%AC%E6%8D%A2%E6%88%90null/</guid><description>当MySQL没有搜索到任何匹配行时，会返回空返回值，如何转换成NULL呢？
方法一 select (original_select_statement) as Alias 这种方法仅对一个单值有效，即：
原语句返回单值，该值将被返回 原语句返回单列零行，将返回NULL 原语句返回多列或多行，查询失败 方法二 使用IFNULL或COALESCE函数。</description></item><item><title>[Hue] 清空MySQL数据库的hue.django_content_type表时遇到由于外键约束无法删除错误!</title><link>https://mryqu.github.io/post/hue_%E6%B8%85%E7%A9%BAmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84hue.django_content_type%E8%A1%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%94%B1%E4%BA%8E%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E9%94%99%E8%AF%AF/</link><pubDate>Fri, 26 Aug 2016 05:24:54 +0000</pubDate><guid>https://mryqu.github.io/post/hue_%E6%B8%85%E7%A9%BAmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84hue.django_content_type%E8%A1%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%94%B1%E4%BA%8E%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E9%94%99%E8%AF%AF/</guid><description>Hue （Hadoop User Experience）是一个使用ApacheHadoop分析数据的Web界面。它可以：
将数据加载到Hadoop 查看数据、处理数据或准备数据 分析数据、搜索数据、对数据进行可视化分析 默认Hue服务器使用嵌入式数据库SQLite存储元数据和查询信息。当我将其迁移到MySQL时，按照Cloudera - Hue Installation Guide的步骤同步数据库时后清空MySQL中的django_content_type表时遭遇下列问题：
hadoop@node50064:~$ $HUE_HOME/build/env/bin/hue syncdb --noinput Syncing... Creating tables ... Creating table auth_permission Creating table auth_group_permissions Creating table auth_group Creating table auth_user_groups Creating table auth_user_user_permissions Creating table auth_user Creating table django_openid_auth_nonce Creating table django_openid_auth_association Creating table django_openid_auth_useropenid Creating table django_content_type Creating table django_session Creating table django_site Creating table django_admin_log Creating table south_migrationhistory Creating table axes_accessattempt Creating table axes_accesslog Installing custom SQL .</description></item><item><title>Activiti 5.17 JNDI数据源配置</title><link>https://mryqu.github.io/post/activiti_5.17_jndi%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 12 Feb 2015 20:18:53 +0000</pubDate><guid>https://mryqu.github.io/post/activiti_5.17_jndi%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</guid><description>Activiti演示环境采用的是h2内存数据库。为了便于研究代码，所以将其迁移到我已有的MySQL/PostgreSQL数据库上去。
MySQL MySQL配置 activiti数据库DDL文件位于activiti-engine-5.17.0.jar\org\activiti\db\create\，MySQL 5.6.4及其之后版本与之前的版本使用的是不同的DDL文件。将下列用于MySQL5.6.4+的DDL文件提取保存到某一目录下。
activiti.mysql.create.engine.sql activiti.mysql.create.identity.sql activiti.mysql.create.history.sql MySQL命令如下：
create database ActivitiDB character set utf8 collate utf8_general_ci; use ActivitiDB; source c:/activiti.mysql.create.engine.sql; source c:/activiti.mysql.create.identity.sql; source c:/activiti.mysql.create.history.sql; Tomcat配置 删除下列MyBatis配置文件：
apache-tomcat-7\webapps\activiti-explorer\WEB-INF\classes\db.properties apache-tomcat-7\webapps\activiti-rest\WEB-INF\classes\db.properties 修改下列Spring配置文件：
apache-tomcat-7\webapps\activiti-explorer\WEB-INF\classes\activiti-custom-context.xml apache-tomcat-7\webapps\activiti-rest\WEB-INF\classes\activiti-custom-context.xml 去掉XMl注释，删除&amp;quot;dbProperties&amp;quot;bean，将&amp;quot;dataSource&amp;quot;bean改成JNDI数据源。 修改下列Tomcat上下文，配置Tomcat JNDI资源：
apache-tomcat-7\webapps\activiti-explorer\META-INF\context.xml apache-tomcat-7\webapps\activiti-rest\META-INF\context.xml PostgreSQL PostgreSQL配置 activiti数据库DDL文件位于activiti-engine-5.17.0.jar\org\activiti\db\create\，将下列用于PostgreSQL的DDL文件提取保存到某一目录下。
activiti.postgres.create.engine.sql activiti.postgres.create.identity.sql activiti.postgres.create.history.sql PostgreSQL命令如下：
CREATE DATABASE ActivitiDB WITH ENCODING &amp;#39;UTF8&amp;#39; TEMPLATE=template0; \c ActivitiDB; \i c:/activiti.postgres.create.engine.sql; \i c:/activiti.postgres.create.identity.sql; \i c:/activiti.postgres.create.history.sql; Tomcat配置 删除下列MyBatis配置文件：
apache-tomcat-7\webapps\activiti-explorer\WEB-INF\classes\db.properties apache-tomcat-7\webapps\activiti-rest\WEB-INF\classes\db.properties 修改下列Spring配置文件：
apache-tomcat-7\webapps\activiti-explorer\WEB-INF\classes\activiti-custom-context.xml apache-tomcat-7\webapps\activiti-rest\WEB-INF\classes\activiti-custom-context.xml 去掉XMl注释，删除&amp;quot;dbProperties&amp;quot;bean，将&amp;quot;dataSource&amp;quot;bean改成JNDI数据源。 修改下列Tomcat上下文，配置Tomcat JNDI资源：
apache-tomcat-7\webapps\activiti-explorer\META-INF\context.xml apache-tomcat-7\webapps\activiti-rest\META-INF\context.</description></item><item><title>创建MySQL表失败，“show tables”命令显示表存在却无法删除</title><link>https://mryqu.github.io/post/%E5%88%9B%E5%BB%BAmysql%E8%A1%A8%E5%A4%B1%E8%B4%A5show_tables%E5%91%BD%E4%BB%A4%E6%98%BE%E7%A4%BA%E8%A1%A8%E5%AD%98%E5%9C%A8%E5%8D%B4%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4/</link><pubDate>Sun, 19 Oct 2014 07:41:26 +0000</pubDate><guid>https://mryqu.github.io/post/%E5%88%9B%E5%BB%BAmysql%E8%A1%A8%E5%A4%B1%E8%B4%A5show_tables%E5%91%BD%E4%BB%A4%E6%98%BE%E7%A4%BA%E8%A1%A8%E5%AD%98%E5%9C%A8%E5%8D%B4%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4/</guid><description>在MySQL表中创建一个表table_c失败了，返回错误ERROR 1146(42S02)；结果发现MySQL显示有这个表，却无法查询和删除。```
mysql&amp;gt; create table table_c (&amp;hellip;&amp;hellip;&amp;hellip;); ERROR 1146 (42S02): Table &amp;lsquo;yqutesting.table_c&amp;rsquo; doesn&amp;rsquo;t exist mysql&amp;gt; show tables; +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+ | Tables_in_yqutesting | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+ | table_a | | table_b | | table_c | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+ 3 rows in set (0.00 sec)
mysql&amp;gt; select * from table_c; ERROR 1146 (42S02): Table &amp;lsquo;yqutesting.table_c&amp;rsquo; doesn&amp;rsquo;t exist mysql&amp;gt; drop table table_c; ERROR 1051 (42S02): Unknown table &amp;rsquo;table_c&amp;rsquo;
结果还是drop掉yqutesting数据库，修正了table_c的定义重新创建数据库和所有表完事。 参考：[ MySQL Create Table Error - Table Doesn&amp;#39;t Exist](http://stackoverflow.com/questions/18034485/mysql-create-table-error-table-doesnt-exist)[ MySQL &amp;gt; Table doesn&amp;#39;t exist.</description></item><item><title>MySQL Workbench的安全更新模式</title><link>https://mryqu.github.io/post/mysql_workbench%E7%9A%84%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 16 Jul 2014 21:08:37 +0000</pubDate><guid>https://mryqu.github.io/post/mysql_workbench%E7%9A%84%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E6%A8%A1%E5%BC%8F/</guid><description>最近在MySQLWorkbench上使用&amp;quot;DELETE FROM TABLE_E;&amp;ldquo;清空一个表时返回错误： Error Code: 1175. You are using safe update mode and you triedto update a table without a WHERE that uses a KEY column To disablesafe mode, toggle the option in Preferences -&amp;gt; SQL Queries andreconnect.
结果在MySQL命令行上却一切正常。
这是由于MySQL Workbench打开了安全更新模式，其有助于初学者使用DELETE FROM tbl_name 语句但是忘记了WHERE子句造成不必要的麻烦。解决方法就是关闭安全更新模式。
解决方法1：
SET SQL_SAFE_UPDATES = 0; DELETE FROM TABLE_E; SET SQL_SAFE_UPDATES = 1; 解决方法2：
参考： mysql delete under safe mode
mysql Tips</description></item><item><title>Tomcat中使用Connector/J连接MySQL的超时问题</title><link>https://mryqu.github.io/post/tomcat%E4%B8%AD%E4%BD%BF%E7%94%A8connectorj%E8%BF%9E%E6%8E%A5mysql%E7%9A%84%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 05 May 2014 20:58:54 +0000</pubDate><guid>https://mryqu.github.io/post/tomcat%E4%B8%AD%E4%BD%BF%E7%94%A8connectorj%E8%BF%9E%E6%8E%A5mysql%E7%9A%84%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/</guid><description>最近玩的一个Web项目，上一个晚上做一些操作，第二天超时需要再登陆，却总是报密码不正确。需要重启tomcat才能解决。异常如下：
Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: The last packet successfully received from the server was 442,814,107 milliseconds ago. The last packet sent successfully to the server was 442,814,107 milliseconds ago. is longer than the server configured value of &amp;#39;wait_timeout&amp;#39;. You should consider either expiring and/or testing connection validity before use in your application, increasing the server configured values for client timeouts, or using the Co nnector/J connection property &amp;#39;autoReconnect=true&amp;#39; to avoid this problem.</description></item><item><title>MySQL:清空具有外键约束的表</title><link>https://mryqu.github.io/post/mysql%E6%B8%85%E7%A9%BA%E5%85%B7%E6%9C%89%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E7%9A%84%E8%A1%A8/</link><pubDate>Wed, 20 Nov 2013 20:30:18 +0000</pubDate><guid>https://mryqu.github.io/post/mysql%E6%B8%85%E7%A9%BA%E5%85%B7%E6%9C%89%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E7%9A%84%E8%A1%A8/</guid><description>最近在MySQL Workbench上使用&amp;quot;TRUNCATE TABLE TABLE_E;&amp;ldquo;清空一个表时返回错误：Error Code: 1701. Cannot truncate a table referenced in a foreignkey constraint (yqutesting.table_f, CONSTRAINT table_f_ibfk_4FOREIGN KEY (old_id) REFERENCES yqutesting.table_e(ID))解决方法1:
删除约束 清空表 手工删除引用该表的记录 创建约束解决方法2: SET FOREIGN_KEY_CHECKS = 0; TRUNCATE TABLE TABLE_E; SET FOREIGN_KEY_CHECKS = 1; 参考: truncate foreign key constrained table</description></item><item><title>Ubuntu下安装部署MySQL数据库</title><link>https://mryqu.github.io/post/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Fri, 11 Oct 2013 21:52:52 +0000</pubDate><guid>https://mryqu.github.io/post/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>安装MySQL mysql-server是MySQL数据库服务器，必选安装。mysql-client是MySQL数据库客户端，提供对MySQL服务器的查询工具及备份/恢复数据工具；libmysqlclient-dev是MySQL的C语言开发接口，libmysql-java是MySQL的JDBC驱动，按需安装。
sudo apt-get update sudo apt-get install mysql-server sudo apt-get isntall mysql-client sudo apt-get install libmysqlclient-dev sudo apt-get install libmysql-java 查看是否安装成功:
sudo netstat -tap | grep mysql 查看上述软件包所提供的文件:
dpkg -L mysql-server dpkg -L mysql-client dpkg -L libmysqlclient-dev 通过上述命令检查之后，如果看到有MySQL的socket处于LISTEN状态则表示安装成功。
MySQL服务操作 查看状态
使用service查看状态：sudo service mysql status 使用mysql脚本查看状态：/etc/inint.d/mysql status 使用mysqladmin查看状态：mysqladmin -u root -p status 启动
使用service启动：sudo service mysql start 使用mysql脚本启动：/etc/inint.d/mysql start 使用mysqld_safe启动：mysqld_safe&amp;amp; 停止
使用service停止：sudo service mysql stop 使用mysql脚本停止：/etc/inint.d/mysql stop 使用mysqladmin停止：mysqladmin -u root -p shutdown 重启</description></item><item><title>PostgreSQL与MySQL数据库分区</title><link>https://mryqu.github.io/post/postgresql%E4%B8%8Emysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA/</link><pubDate>Tue, 16 Jul 2013 21:10:39 +0000</pubDate><guid>https://mryqu.github.io/post/postgresql%E4%B8%8Emysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA/</guid><description>数据库分区是逻辑数据库的分割。分区可以通过创建独立的较小数据库（每个有自己的表、索引和事物日志）或分割所选的元素（例如一个表）来实现。数据库分区通常是为了易管理性、性能和数据有效性。
分类 分区主要有两种形式：
水平分区 水平分区是将不同的行放入不同的表中。比如将邮编小于50000的客户放入“东部客户”表中，将邮编等于或大于50000的客户放入“西部客户”表中。该例中有两个分区表“东部客户”和“西部客户”，其合集视图就是所有客户的完整视图。 通过这样的方式不同分区里面的物理列分割的数据集得以组合，从而进行个体分割（单分区）或集体分割（1个或多个分区）。所有在表中定义的列在每个数据集中都能找到，所以表的特性依然得以保持。
垂直分区 垂直分区创建含有（主键加上）较少列的表并使用额外的表存储（主键加上）剩余的列，每个分区表中都含有其中列所对应的行。范式化是内在包含垂直分区的过程。 垂直分区被称为“行分割”，通常用于分割表中（查找很慢的）动态数据和（查找很快的、使用较动态数据更频繁的）静态数据。这样在保证数据相关性的同时，在诸如统计分析之类的查询中访问静态数据还能提高性能。 不同的物理存储也可以用于垂直分区，例如不频繁使用的列或者宽列被存入不同的设备。 其缺点是需要管理冗余列，查询所有数据需要join操作。
分区标准 当前高端关系数据库管理系统提供分割数据库的不同标准。这些标准使用分区键基于一定标准分配分区。常用的标准为：
基于范围的分区 通过判断分区键是否在一定范围内选择分区。例如所有邮编列在70000和79999之间的行可以是一个分区。
基于列表的分区 一个分区分配给一列数值。如果分区键为这些值之一，该分区被选中。例如所有国家列为冰岛、挪威、瑞典、芬兰或丹麦的行可以是一个北欧国家分区。
基于哈希的分区 哈希函数的返回值决定分区归属。假设有四个分区，哈希函数返回值为0到3。 组合分区允许上述分区方案的一定组合。例如先使用基于范围的分区，然后使用基于哈希的分区。
PostgreSQL数据库分区 PostgreSQL支持基本的数据库分区，本文以PostgreSQL 9.1为例介绍一下PostgreSQL数据库分区。
优点 分区具有下列优点：
在某些情况下查询性能能显著提升，特别是表中频繁访问的行在一个单独分区或者少数量分区中。分区替代索引起始列会减少索引大小，使频繁使用的索引更有可能放入内存。 当查询或更新访问单个分区的大部分记录时，通过对分区的顺序扫描取代对全表的索引读或随机读，也会提升性能。 如果批量加载和删除需求付诸于分区设计，这些需求可以通过添加或删除分区来完成。ALTER TABLE NOINHERIT和DROP TABLE都比批量操作更快，而且完全可以避免批量删除导致的VACUUM负担。 很少使用的数据可被移往更便宜更慢的存储媒体。 这些优点仅在表非常大时是真正有价值的。对表采用分区的收益取决于应用程序，一般经验法则是表超过了数据库服务器的物理内存时使用分区。
表继承 PostgreSQL通过表继承支持分区，每个分区作为单个父表的子表创建。父表本身通常为空，仅用于代表整个数据集。
CREATE TABLE cities ( name text, population float, altitude int -- in feet ); CREATE TABLE capitals ( state char(2) ) INHERITS (cities); 父表的所有check约束和not-null约束自动被子表继承，其他类型的约束（unique、主键和外键约束）不会被继承。
SELECT name, altitude FROM cities WHERE altitude &amp;gt; 500; SELECT name, altitude FROM ONLY cities WHERE altitude &amp;gt; 500; -- 通过ONLY关键词，第二个查询仅作用于表cities而不会用于cities的子表。 支持的分区标准 PostgreSQL数据库支持基于范围的分区和基于列表的分区。</description></item><item><title>MySQL、Postgres、Oracle、SQL server、DB2、Teradata、Netezza数据类型比较</title><link>https://mryqu.github.io/post/mysqlpostgresoraclesql_serverdb2teradatanetezza%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/</link><pubDate>Mon, 24 Jun 2013 20:49:03 +0000</pubDate><guid>https://mryqu.github.io/post/mysqlpostgresoraclesql_serverdb2teradatanetezza%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/</guid><description/></item><item><title>数据库常用操作笔记</title><link>https://mryqu.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 18 Aug 2012 07:10:28 +0000</pubDate><guid>https://mryqu.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</guid><description>GreenPlum/PostGreSQL操作 Create a new database: createdb medb Drop database: dropdb medb Access database: psql -h gpserver -d gpdatabase -U gpuser -W Get help: medb=# \h Quit: medb=# \q Read command from file: medb=# \i input.sql To dump a database: pg_dump medb &amp;gt; db.out To reload the database: psql -d database -f db.out Dump all database: pg_dumpall &amp;gt; /var/lib/pgsql/backups/dumpall.sql Restore database: psql -f /var/lib/pgsql/backups/dumpall.sql medb Show databases: psql -l medb=# \l; Show users: medb=# select * from &amp;quot;pg_user&amp;quot;; Show tables: medb=# select * from &amp;quot;pg_tables&amp;quot;; Set password: medb=# upadte pg_shadow set passwd = 'new_password' where usename = 'username'; Clean all databases (Should be done via a daily cron): vacuumdb --quiet --all check column of table medb=# select * from INFORMATION_SCHEMA.</description></item><item><title>实践记录：将MDF MSSQL数据库内容导入MySQL</title><link>https://mryqu.github.io/post/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95%E5%B0%86mdf_mssql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E5%AE%B9%E5%AF%BC%E5%85%A5mysql/</link><pubDate>Thu, 24 Sep 2009 10:37:58 +0000</pubDate><guid>https://mryqu.github.io/post/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95%E5%B0%86mdf_mssql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E5%AE%B9%E5%AF%BC%E5%85%A5mysql/</guid><description>玩一个例程源码，它使用的是SQL server数据库，虽然我机子装了VS2005带的SQL server2005，我还是想用MySQL。 把自己的转换过程草草记录下来，也不算太无聊吧。
【环境】VS2005附带的SQL server 2005 &amp;amp; MySQL 5.1
1、下载并安装Microsoft SQL Server Management StudioExpress（SSMSE） http://www.microsoft.com/downloadS/details.aspx?familyid=C243A5AE-4BD1-4E3D-94B8-5A0F62BF7796&amp;amp;displaylang=en
2、 配置SQL2005
==SQL server configuration manager== SQL server service -&amp;gt; 选择SQL serverbrower属性，修改模式为手动，然后启动SQL server brower
==SQL Server Surface Area Configuration -&amp;gt;Surface Area Configuration for Services and Connections== SQLEXPRESS -&amp;gt; Database Engine -&amp;gt;Remote connection -&amp;gt; Local and remote connection&amp;amp; using both tcp/ip and named pipes
==SQL server configuration manager== SQL server 2005 network configuration -&amp;gt; protocolsfor SQLEXPRESS -&amp;gt; 选择TCP/TP属性中IPAddresses，删掉动态端口，设定端口为1433</description></item><item><title>org.gjt.mm.mysql.Driver和com.mysql.jdbc.Driver的区别</title><link>https://mryqu.github.io/post/org.gjt.mm.mysql.driver_%E5%92%8Ccom.mysql.jdbc.driver%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Sun, 05 Oct 2008 11:43:53 +0000</pubDate><guid>https://mryqu.github.io/post/org.gjt.mm.mysql.driver_%E5%92%8Ccom.mysql.jdbc.driver%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>org.gjt.mm.mysql.Driver是早期的驱动名称，后来就改名为com.mysql.jdbc.Driver，现在一般都推荐使用com.mysql.jdbc.Driver。在最新版本的mysqljdbc驱动中，为了保持对老版本的兼容，仍然保留了org.gjt.mm.mysql.Driver，但是实际上org.gjt.mm.mysql.Driver中调用了com.mysql.jdbc.Driver，因此现在这两个驱动没有什么区别。
//org.gjt.mm.mysql.Driver的源代码 package org.gjt.mm.mysql; import java.sql.SQLException; public class Driver extends com.mysql.jdbc.Driver { // ~Constructors//----------------------------------------------------------- public Driver() throws SQLException {super();} } 由源代码可以看出，仅仅是为了兼容，才保留了该名字，所以建议直接使用com.mysql.jdbc.Driver</description></item></channel></rss>