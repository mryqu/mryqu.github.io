<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>windows on Mryqu's Notes</title><link>https://mryqu.github.io/tags/windows/</link><description>Recent content in windows on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 14 Jan 2019 18:07:31 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/windows/index.xml" rel="self" type="application/rss+xml"/><item><title>使用了Widnows包管理器Chocolatey</title><link>https://mryqu.github.io/post/use-chocolatey/</link><pubDate>Mon, 14 Jan 2019 18:07:31 +0000</pubDate><guid>https://mryqu.github.io/post/use-chocolatey/</guid><description>系统由于升级微软安全补丁起不来了，在IT同事的帮助下重装了系统。
然后就开始重装大量软件，看到有些软件可以用Widnows包管理器Chocolatey安装，一时轻浮，按捺不住对新事物的向往，就装了Chocolatey。
通过Chocolatey安装了Gradle，后来IntelliJ问我Gradle装哪里了，我一时就蒙了。
想想Linux下的软件都不问，为啥到Windows就不成了？估计还是Linux下包管理是主流，判断依赖软件装没装直接先问deb/apt-get。
估计Windows下用Chocolatey的太少，不但人而且软件的习惯都还没培养起来。这是我的不对，赶紧自己搜出来“C:\ProgramData\chocolatey\lib\gradle\tools\gradle-5.1.1”应付交差了。</description></item><item><title>[Golang] Glide的安装和使用</title><link>https://mryqu.github.io/post/golang_glide/</link><pubDate>Mon, 16 Oct 2017 15:47:55 +0000</pubDate><guid>https://mryqu.github.io/post/golang_glide/</guid><description>不论是开发Java还是你正在学习的Golang，都会遇到依赖管理问题。Java有牛逼轰轰的Maven和Gradle。 Golang亦有Godep、Govendor、Glide、dep等等。本文主要给大家介绍Glide。 Glide 是Golang的包管理工具，是为了解决Golang依赖问题的。 为什么需要Glide ？ 原因很简单，Go语言原生包管理的缺陷。罗列一下Golang的get子命令管理依赖有很多大缺陷：
能拉取源码的平台很有限，绝大多数依赖的是 github.com 不能区分版本，以至于令开发者以最后一项包名作为版本划分 依赖 列表/关系 无法持久化到本地，需要找出所有依赖包然后一个个 go get 只能依赖本地全局仓库（GOPATH/GOROOT），无法将库放置于项目局部仓库（$PROJECT_HOME/vendor） Glide 是有下列几大主要功能：
持久化依赖列表至配置文件中，包括依赖版本（支持范围限定）以及私人仓库等 持久化关系树至 lock 文件中（类似于 yarn 和 cargo），以重复拉取相同版本依赖 兼容 go get 所支持的版本控制系统：Git, Bzr, HG, and SVN 支持 GO15VENDOREXPERIMENT 特性，使得不同项目可以依赖相同项目的不同版本 可以导入其他工具配置，例如： Godep, GPM, Gom, and GB Glide 在Mac或Linux上是很容易安装的，但是在Win10 x64上据说最新版有问题。详见https://github.com/Masterminds/glide/issues/873 。 想多了没用，还是实干吧。从https://github.com/Masterminds/glide/releases 上下载了glide-v0.13.0-windows-amd64.zip，里面就一个glide.exe。 将glide.exe放入%GOPATH%/bin下，然后将%GOPATH%/bin加入环境变量Path中，由于我的Go版本是1.9所以GO15VENDOREXPERIMENT环境变量就不用管了。执行 glide --version ，开头没问题呀！ 进入我的项目目录%GOPATH%/src/helloglide，执行下列命令：
glide create #创建新的工作空间，生成glide.yaml glide get github.com/pborman/uuid #获取uui包 glide install #建立glide.lock版本 go build #构建项目 glide list #列举项目导入的所有包 INSTALLED packages: github.</description></item><item><title>[C++] Compile JsonCpp library using CMake</title><link>https://mryqu.github.io/post/c++_compile_jsoncpp_library_using_cmake/</link><pubDate>Thu, 23 Mar 2017 06:14:57 +0000</pubDate><guid>https://mryqu.github.io/post/c++_compile_jsoncpp_library_using_cmake/</guid><description>本文为升级JsonCpp库操作过程的备份笔记。
Linux/Unix平台 下载JsonCpp 从JsonCpp releases页面可知，当前最高版本为1.8.0。
wget https://github.com/open-source-parsers/jsoncpp/archive/1.8.0.tar.gz tar xzvf 1.8.0.tar.gz cd jsoncpp-1.8.0 mkdir build/release 升级gcc 这里我选择使用gcc 5:
sudo add-apt-repository ppa:ubuntu-toolchain-r/test sudo apt-get update sudo apt-get install gcc-5 g++-5 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 1 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 1 升级cmake JsonCpp 1.8.0要求cmake&amp;gt;=3.1
sudo apt-get install software-properties-common sudo add-apt-repository ppa:george-edison55/cmake-3.x sudo apt-get update sudo apt-get upgrade cmake 编译JsonCpp cmake -DCMAKE_BUILD_TYPE=release -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G &amp;#34;Unix Makefiles&amp;#34; ../.. make Windows平台 准备环境 首先下载JsonCpp 1.</description></item><item><title>[RabbitMQ] 在Widnows平台安装配置RabbitMQ</title><link>https://mryqu.github.io/post/rabbitmq_%E5%9C%A8widnows%E5%B9%B3%E5%8F%B0%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AErabbitmq/</link><pubDate>Sat, 06 Aug 2016 05:29:19 +0000</pubDate><guid>https://mryqu.github.io/post/rabbitmq_%E5%9C%A8widnows%E5%B9%B3%E5%8F%B0%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AErabbitmq/</guid><description>RabbitMQ介绍 RabbitMQ是基于高级消息队列协议的消息代理软件。RabiitMQ服务器由Erlang语言开发，客户端支持多种主流编程语言。 RabbitMQ由LShift和CohesiveFT合营公司Rabbit技术有限公司开发，在2010年4月被SpringSource收购，2013年5月归入Pivotal软件。 RabbitMQ项目包括：
RabbitMQ交换服务器自身 用于HTTP、流文本定向消息协议(STOMP)和消息队列遥测传输协议(MQTT)的网关 Java、.NET Framework和Erlang语言的AMQP客户端库 支持定制插件的插件平台，内建插件集合为: Shovel插件，负责从一个消息代理（broker）向另一个移动/复制消息。 Federation插件，在消息代理之间有效共享消息(基于exchange这一级) Management插件，监控和管理消息代理 STOMP插件，提供STOMP协议支持 MQTT插件，提供MQTT协议支持 LDAP插件，RabbitMQ通过外部LDAP服务器进行认证和授权 在Widnows平台安装RabbitMQ 根据http://www.rabbitmq.com/install-windows.html安装Erlang和RabbitMQ服务器，运行RabbitMQ安装程序时需要选择“Runas Administrator”，否则事后需要执行下列命令修正.erlang.cookie位置错误。
copy /Y %SystemRoot%\.erlang.cookie %HOMEDRIVE%%HOMEPATH% 设置环境变量（及安装并启动RabbitMQ服务）
SET　ERLANG_HOME=C:\tools\erl8.0 SET RABBITMQ_SERVER＝C:\tools\RabbitMQ_Server\rabbitmq_server-3.6.5 SET　RABBITMQ_BASE=C:\rabbitmq-data ECHO []. &amp;gt; C:\rabbitmq-data\rabbitmq.config %RABBITMQ_SERVER%\sbin\rabbitmq-service.bat install %RABBITMQ_SERVER%\sbin\rabbitmq-service.bat start 安装管理插件 rabbitmq-management插件提供用于管理和监控RabbitMQ服务器的基于HTTP的API，以及基于浏览器的界面和一个控制台工具rabbitmqadmin。功能包括：
声明、列举和删除exchange、queue、binding、用户、虚拟主机和权限。 监控队列长度、消息总速率和每通道速率、连接数据速率等。 发送和接受消息。 监控Erlang进程、文件描述符和内存使用。 导出/导入对象定义到JSON格式 强制关闭连接、清除队列。 重启RabbitMQ后登录http://guest:guest@localhost:15672/，即可见到管理页面。 rabbitmqctl 通过rabbitmqctl创建一个管理员用户admin和一个对虚拟主机有读写权限的普通用户mryqu： 自建管理员用户admin的默认用户guest的区别在于：guest仅能本机访问RabbitMQ，除非在rabbitmq.config增加loopback_users设置。
使用HTTP管理API 将配置导出成JSON格式：
curl -i -u guest:guest http://localhost:15672/api/definitions 激活其他插件 例如激活shovel插件：
%RABBITMQ_SERVER%\sbin\rabbitmq-plugins.bat enable rabbitmq_shovel %RABBITMQ_SERVER%\sbin\rabbitmq-plugins.bat enable rabbitmq_shovel_management 测试RabbitMQ 使用GETTING STARTED: Messaging with RabbitMQ中的代码即可，由于我想试验非本机访问RabbitMQ，因此添加了application.properties：</description></item><item><title>继续使用Win10的Windows defender</title><link>https://mryqu.github.io/post/%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8win10%E7%9A%84windows_defender/</link><pubDate>Sun, 04 Oct 2015 05:49:58 +0000</pubDate><guid>https://mryqu.github.io/post/%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8win10%E7%9A%84windows_defender/</guid><description>从Win7升级到了Win10，有一天忽然发现Microsoft SecurityEssentials不见了。上网一查，才知道被Win10内置了，改叫Windows defender。可是Windowsdefender也没见运行呀？
提示说“此应用已经关闭，不会监视你的计算机”。
开始追查！！！
通过“Windows键+X”进入控制面板 在安全中心，发现是腾讯的电脑管家导致Windows defender被禁用。 关闭电脑管家的实时系统防护。 收到安全性提示，选择启用Windows defender。 又见到小城墙了</description></item><item><title>[Hadoop] Windows平台编译Hadoop2.6.0笔记</title><link>https://mryqu.github.io/post/hadoop_windows%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91hadoop2.6.0%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 02 Apr 2015 05:25:54 +0000</pubDate><guid>https://mryqu.github.io/post/hadoop_windows%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91hadoop2.6.0%E7%AC%94%E8%AE%B0/</guid><description>环境 64位虚拟机及64位 Windows Server 2008 R2
所需工具 JDK7 Maven .NET Framework 4 Microsoft Windows SDK 7.1 安装前一定要先卸载比Microsoft Visual C++ 2010 x86Redistributable - 10.0.30319 更高的版本。 Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1 Cygwin (x64) Protocol Buffers 2.5.0 CMake 3.2.1 安装时选择添加CMake到所有用户的PATH环境变量。 hadoop-2.6.0源文件压缩包 解压至c:\hadoop-2.6.0-src 编译Hadoop2.6.0 进入Windows SDK 7.1 Command Prompt 在c:\执行buildHadoop.bat，其内容如下： setlocal set Platform=x64 set CYGWIN_ROOT=C:\cygwin64 set JAVA_HOME=C:\tools\Java\jdk7 set M2_HOME=C:\tools\apache-maven set MS_BUILD_PATH=C:\Windows\Microsoft.NET\Framework64\v4.0.30319 set MS_SDK=C:\Program Files\Microsoft SDKs\Windows\v7.1 set CMAKE_PATH=C:\tools\CMake set PROTOBUF_PATH=C:\tools\protoc-2.</description></item><item><title>[Hadoop] Failed to exec (compile-ms-winutils) on project hadoop-common</title><link>https://mryqu.github.io/post/hadoop_failed_to_exec_compile-ms-winutils_on_project_hadoop-common/</link><pubDate>Tue, 15 Apr 2014 22:16:23 +0000</pubDate><guid>https://mryqu.github.io/post/hadoop_failed_to_exec_compile-ms-winutils_on_project_hadoop-common/</guid><description>在Windows平台编译Hadoop时遇到了compile-ms-winutils执行失败的问题。Hadoop默认需要用VS2010编译，但是我的环境只有VS2013。
问题及解决方案如下：
Cannot run program &amp;ldquo;msbuild&amp;rdquo; 将C:\Windows\Microsoft.NET\Framework\v4.0.30319放入PATH环境变量 Command execution failed. Process exited with an error: 1(Exitvalue: 1) -&amp;gt; [Help 1] 打开hadoop-common\hadoop-hdfs-project\hadoop-hdfs\pom.xml，将&amp;rsquo;VisualStudio 10 Win64&amp;rsquo;改成&amp;rsquo;Visual Studio 12 Win64&amp;rsquo;。 将如下两个Visual Studio项目用VS2013打开，手动编译。 hadoop-common\hadoop-common-project\hadoop-common\src\main\winutils\winutils.sln hadoop-common\hadoop-common-project\hadoop-common\src\main\native\winutils.sln 重新执行：
C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\Tools\VsDevCmd.bat mvn install -DskipTests 上述问题不再出现。</description></item><item><title>Windows下MongoDB安装与配置</title><link>https://mryqu.github.io/post/windows%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 30 Mar 2014 07:57:15 +0000</pubDate><guid>https://mryqu.github.io/post/windows%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>到官网http://www.mongodb.org/downloads下载MongoDB并安装在c:\mongodb目录下，安装后需要进行配置才能启动MongoDB。首先创建如下目录：
md c:\mongodb\data md c:\mongodb\db md c:\mongodb\log md c:\mongodb\etc 接着创建MongoDB配置文件：c:\mongodb\etc\mongo.conf systemLog: destination: file path: C:/mongodb/log/mongo.log logAppend: true storage: dbPath: C:/mongodb/data/db journal: enabled: true net: http: enabled: true RESTInterfaceEnabled: true 通过如下命令启动MongoDB：
C:\mongodb\bin\mongod.exe --config C:\mongodb\etc\mongo.conf 可以通过以下三种方式验证MongoDB是否安装成功：
访问MongoDB监听端口 http://localhost:27017/ ，确认出现类似信息。 通过C:\mongodb\bin\mongo.exe登录Javascript shell并使用 访问HTTP接口 http://localhost:28017/ 并查看MongoDB服务器信息 在启动MongoDB的窗口通过Ctrl+ C停止MongoDB的运行。 最后通过如下命令将MongoDB配置成Windows服务：
C:\mongodb\bin\mongod.exe --config C:\mongodb\etc\mongo.conf--install 当然也可以通过如下命令手工配置Windows服务：
sc create MongoDB binPath= &amp;#34;C:\mongodb\bin\mongod.exe--config=C:\mongodb\etc\mongo.conf--service&amp;#34; start= demand DisplayName= &amp;#34;MongoDB&amp;#34; 参考 Install MongoDB on Windows MongoDB Configuration Options</description></item><item><title>MinGW安装和使用</title><link>https://mryqu.github.io/post/mingw%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 04 Feb 2014 18:17:07 +0000</pubDate><guid>https://mryqu.github.io/post/mingw%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid><description>MinGW简介 MinGW全称Minimalist GNU For Windows，，是将GCC编译器和GNUBinutils移植到Win32平台下的产物，包括一系列头文件（Win32API）、库和可执行文件。MinGW是从Cygwin1.3基础上发展而来，相比Cygwin而言体积更小、使用更方便。MinGW分两个分支，MinGW（即MinGW32）和MinGW-w64。 MinGW包括：
GNU编译器套件，包括C/C++、ADA语言和Fortran语言编译器 用于生成Windows二进制文件的GNU工具（编译器、链接器和档案管理器） 用于Windows平台安装和部署MinGW和MSYS的命令行安装器（mingw-get） 用于命令行安装器的GUI打包器（mingw-get-inst） MinGW安装和使用 我只想使用C/C++，所以仅安装mingw32-base、mingw32-gcc-g++。msys-base其实也是可以不用安装的，因为我可以使用已有的GitBash。 我选择了默认的安装路径c:\MinGW，可以将c:\MinGW\bin加入环境变量以便使用。 参考 MinGW 官方网站 SourceForge.net：MinGW - Minimalist GNU for Windows SourceForge.net：MinGW-w64 - for 32 and 64 bit Windows</description></item><item><title>Windows常用命令汇总</title><link>https://mryqu.github.io/post/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</link><pubDate>Sun, 22 Dec 2013 13:12:02 +0000</pubDate><guid>https://mryqu.github.io/post/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</guid><description>windows命令现在也就sysdm.cpl和mstsc用的比较多，很多还真不熟悉，搜了一篇备查。
appwiz.cpl：程序和功能 calc：启动计算器 certmgr.msc：证书管理实用程序 charmap：启动字符映射表 chkdsk.exe：Chkdsk磁盘检查（管理员身份运行命令提示符） cleanmgr: 打开磁盘清理工具 cliconfg：SQL SERVER 客户端网络实用工具 cmstp：连接管理器配置文件安装程序 cmd.exe：CMD命令提示符 自动关机命令 Shutdown -s -t600：表示600秒后自动关机 shutdown -a：可取消定时关机 Shutdown -r -t600：表示600秒后自动重启 rundll32user32.dll,LockWorkStation：表示锁定计算机 colorcpl：颜色管理，配置显示器和打印机等中的色彩 CompMgmtLauncher：计算机管理 compmgmt.msc：计算机管理 credwiz：备份或还原储存的用户名和密码 comexp.msc：打开系统组件服务 control：控制面版 dcomcnfg：打开系统组件服务 Dccw：显示颜色校准 devmgmt.msc：设备管理器 desk.cpl：屏幕分辨率 dfrgui：优化驱动器 Windows7→dfrg.msc：磁盘碎片整理程序 dialer：电话拨号程序 diskmgmt.msc：磁盘管理 dvdplay：DVD播放器 dxdiag：检查DirectX信息 eudcedit：造字程序 eventvwr：事件查看器 explorer：打开资源管理器 Firewall.cpl：Windows防火墙 FXSCOVER：传真封面编辑器 fsmgmt.msc：共享文件夹管理器 gpedit.msc：组策略 hdwwiz.cpl：设备管理器 inetcpl.cpl：Internet属性 intl.cpl：区域 iexpress：创建自解压/安装文件，系统自带 joy.cpl：游戏控制器 logoff：注销命令 lusrmgr.msc：本地用户和组 lpksetup：语言包安装/删除向导，安装向导会提示下载语言包 lusrmgr.msc：本机用户和组 main.cpl：鼠标属性 mmsys.cpl：声音 magnify：放大镜实用程序 MdSched:Windows内存诊断程序 mmc：打开控制台 mobsync：同步命令 mplayer2：简易widnows media player Msconfig.exe：系统配置实用程序 msdt：微软支持诊断工具 msinfo32：系统信息 mspaint：画图 Msra：Windows远程协助 mstsc：远程桌面连接 NAPCLCFG.</description></item><item><title>批处理：搜索Jar包中的类文件</title><link>https://mryqu.github.io/post/%E6%89%B9%E5%A4%84%E7%90%86%E6%90%9C%E7%B4%A2jar%E5%8C%85%E4%B8%AD%E7%9A%84%E7%B1%BB%E6%96%87%E4%BB%B6/</link><pubDate>Sun, 20 Oct 2013 15:55:59 +0000</pubDate><guid>https://mryqu.github.io/post/%E6%89%B9%E5%A4%84%E7%90%86%E6%90%9C%E7%B4%A2jar%E5%8C%85%E4%B8%AD%E7%9A%84%E7%B1%BB%E6%96%87%E4%BB%B6/</guid><description>网上转载的很多，原文出处不详。
批处理文件利用7z和findstr两个命令搜索当前目录下所有Jar包，分析是否有所要查找的类文件：
@echo off SETLOCAL set WHICH_CLASS=%1 echo WHICH_CLASS=%WHICH_CLASS% for /F %%i in (&amp;#39;dir /A:-D /S /B *.jar&amp;#39;) do 7z l %%i | findstr %WHICH_CLASS% &amp;amp;&amp;amp; echo %WHICH_CLASS% found in: &amp;#34;%%i&amp;#34; echo &amp;#34;Finished class finding...&amp;#34; echo &amp;#34;======================================&amp;#34; ENDLOCAL 命令运行格式：
findclass com\\yqu\\kxmt\\TestFindClass.class</description></item></channel></rss>