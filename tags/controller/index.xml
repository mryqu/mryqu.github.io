<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>controller on Mryqu's Notes</title><link>https://mryqu.github.io/tags/controller/</link><description>Recent content in controller on Mryqu's Notes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 27 May 2016 05:36:54 +0000</lastBuildDate><atom:link href="https://mryqu.github.io/tags/controller/index.xml" rel="self" type="application/rss+xml"/><item><title>[OpenUI5] 复习Controller lifecycle</title><link>https://mryqu.github.io/post/openui5_%E5%A4%8D%E4%B9%A0controller_lifecycle/</link><pubDate>Fri, 27 May 2016 05:36:54 +0000</pubDate><guid>https://mryqu.github.io/post/openui5_%E5%A4%8D%E4%B9%A0controller_lifecycle/</guid><description>昨天看到有同事添加了几个Controller的回调，对其中的onBeforeExit、beforeExit没一点印象。
sap.ui.controller(&amp;#34;kx123.foo&amp;#34;, { onInit: function () { console.info(&amp;#34;foo onInit called&amp;#34;); }, onBeforeExit: function(){ console.info(&amp;#34;foo onBeforeExit called&amp;#34;) ; } , beforeExit: function() { console.info(&amp;#34;foo beforeExit called&amp;#34;) ; }, onBeforeRendering: function() { console.info(&amp;#34;foo onBeforeRendering called&amp;#34;); }, onExit: function() { console.info(&amp;#34;foo onExit called&amp;#34;); } }); 查了一下如下OpenUI5开发指南 MVC中关于Controllers的介绍。
SAPUI5 provides predefined lifecycle hooks forimplementation. You can add event handlers or other functions tothe controller and the controller can fire events, for which othercontrollers or entities can register.</description></item><item><title>Spring 框架: @RestController vs @Controller</title><link>https://mryqu.github.io/post/spring%E6%A1%86%E6%9E%B6_@restcontroller_vs_@controller/</link><pubDate>Fri, 23 Oct 2015 05:57:46 +0000</pubDate><guid>https://mryqu.github.io/post/spring%E6%A1%86%E6%9E%B6_@restcontroller_vs_@controller/</guid><description>今天扫了一眼RestController注解的实现，它是@Controller和@ResponseBody的合体。
@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Controller @ResponseBody public @interface RestController { String value() default &amp;#34;&amp;#34;; } 至于@RestController与@Controller的所有区别，还不是完全明了。看了Srivatsan Sundararajan和Swapna Sagi的大作Spring Framework: @RestController vs @Controller，感觉豁然开朗。
Spring MVC框架和REST Spring基于MVC框架的注解简化了创建RESTful web服务流程。传统MVS控制器和RESTfulweb服务控制器关键区别在于HTTP响应体创建方式。传统MVC控制器依赖试图技术，而RESTfulweb服务控制器仅仅返回对象并将对象数据作为JSON/XML直接写到HTTP响应中。关于使用Spring框架创建RESTfulWEB服务的技术细节，点击这里。 图1: Spring MVC传统工作流
Spring MVC REST工作流 传统Spring MVC REST工作流步骤如下:
客户端以URI形式向web服务发送一个请求。The client sends a request to a webservice in URI form. 请求被DispatcherServlet拦截用于查找处理器映射（Handler Mappings）及类型。 在应用上下文文件中定义的处理器映射会告知DispatcherServlet用于基于请求查找控制器的策略。 Spring MVC支持三种类型的请求URI与控制器间的映射：注解、名称转换和显式映射。 请求由控制器处理后，响应返回给DispatcherServlet后分发给视图。 在图1中，注意在传统工作流中ModelAndView对象由控制器转发给客户端。在方法上使用@ResponseBody注解，Spring可让应用直接从控制器返回数据，不再查找视图。从第4版起，引入@RestController注解进一步简化处理流程。两种使用方式解释如下。
使用@ResponseBody注解 当对一个方法使用@ResponseBody注解后，Spring将返回值进行转换并自动写入Http响应中。控制器类的每个方法必须使用@ResponseBody进行注解。 图2: Spring 3.x MVC RESTful web服务工作流
幕后工作 Spring在幕后注册了一系列HttpMessageConverters。HTTPMessageConverter负责根据预先定义的MIME类型将请求体转换成特定类及将特定类转换成响应体。每次一个请求匹配上@ResponseBody，Spring遍历所有已注册的HTTPMessageConverter，查找到第一个匹配上给定MIME类型和类的HTTPMessageConverter用之进行实际转换。
代码示例 下面过一个使用@ResponseBody的简单示例。
创建名为Employee的Java POJO类。
package com.example.spring.model; import javax.</description></item><item><title>[OpenUI5] MVC：访问其他View/Controller的方法</title><link>https://mryqu.github.io/post/openui5_mvc%E8%AE%BF%E9%97%AE%E5%85%B6%E4%BB%96view%E6%88%96controller%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Thu, 08 Jan 2015 19:42:03 +0000</pubDate><guid>https://mryqu.github.io/post/openui5_mvc%E8%AE%BF%E9%97%AE%E5%85%B6%E4%BB%96view%E6%88%96controller%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>访问其他视图/控件的方法 在创建视图/控件实例时，设置ID：
var oViewLeft = sap.ui.jsview(&amp;#34;leftView&amp;#34;, &amp;#34;com.yqu.view.Left&amp;#34;); var oPanelRight = new sap.ui.commons.Panel(&amp;#34;panel2&amp;#34;); 通过sap.ui.getCore().byId(&amp;ldquo;compID&amp;rdquo;)获取上述视图/控件。控制器可以通过getView()函数获取自身对应的视图，但是该视图内部的控件还得通过这种方式获取：
var refViewLeft = sap.ui.getCore().byId(&amp;#34;leftView&amp;#34;); var refPanelRight = sap.ui.getCore().byId(&amp;#34;panel2&amp;#34;); 需要注意的是，上面讲的是JS视图最简单的一种情况。 对于使用了静态视图ID的XML、HTML和JSON视图，其内部的控件ID会自动添加视图ID做前缀。JS视图中，在动态实例化控件时通过oController.createId(&amp;ldquo;ID&amp;rdquo;)也可以生成用视图ID做前缀的唯一ID。
var refSubView = oViewParent.byId(&amp;#34;subViewId&amp;#34;); refSubView.byId(&amp;#34;ctrId&amp;#34;); JS、XML、HTML和JSON片断(Fragment)是更轻量级的分割和UI重用单元，每个片段示例化时为了保证唯一性，即使没有定义片段ID也会自动生成，其内部的控件ID会自动添加视图ID和片段ID做前缀。
当没有给定片段ID：myControl = sap.ui.getCore().byId(&amp;ldquo;myControl&amp;rdquo;) 当给定片段ID &amp;ldquo;myFrag&amp;rdquo; ：myControl =sap.ui.core.Fragment.byId(&amp;ldquo;myFrag&amp;rdquo;, &amp;ldquo;myControl&amp;rdquo;) 访问其他Controller的方法 最简单的方法是使用一个全局变量引用所需控制器 不推荐 通过获取其他控制器对应的视图来访问该控制器的函数：sap.ui.getCore().byId(&amp;ldquo;viewId&amp;rdquo;).getController().method(); 直接调用控制器的函数：sap.ui.controller(&amp;ldquo;namespace.Controllername&amp;rdquo;).method(); 最推荐的是在控制器(或应用组件)之间的通信使用sap.ui.core.EventBus，这种事件/消息总线模式可以更好进行解耦。 在jsbin上做了个Retrive other component示例：http://jsbin.com/xufeyo/1/edit?html,output 这个示例演示了一个视图如何控制另外一个视图的控件是否显示，一个视图调用了另外一个视图控制器的方法。但是它完全违反了我以前有篇学习帖子重温MVC:一个很好的MVC中的规则，不可以在实际工作中使用！
此外通过调试找到了sap.ui.core.Core里面ID与组件的映射表。</description></item></channel></rss>