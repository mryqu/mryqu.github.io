<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workflow on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/categories/workflow/</link>
    <description>Recent content in Workflow on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 31 Mar 2015 06:08:51 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/categories/workflow/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>粗览基于Eclipse RCP架构的Activiti Designer实现(图文版)</title>
      <link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88%E5%9F%BA%E4%BA%8Eeclipse_rcp%E6%9E%B6%E6%9E%84%E7%9A%84activiti_designer%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E7%89%88/</link>
      <pubDate>Tue, 31 Mar 2015 06:08:51 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88%E5%9F%BA%E4%BA%8Eeclipse_rcp%E6%9E%B6%E6%9E%84%E7%9A%84activiti_designer%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E7%89%88/</guid>
      <description>org.activiti.designer.feature contains an Eclipse feature definition, which groups the variousprojects into the installable Activiti Designer feature.
org.activiti.designer.eclipse plug-in contains the main extensions of Eclipse extension points and a lotof shared code for working with the model, saving resources andutilities.
org.activiti.designer.eclipse.extension.ExportMarshallerextension-point Activiti Designer Export Marshaller: Use this extension point toprovide custom output marshallers when Activiti diagrams areexported.
org.activiti.designer.eclipse.extension.ProcessValidatorextension-point Activiti Designer Process Validator: Use this extension point toprovide validation when Activiti diagrams are validated.</description>
    </item>
    
    <item>
      <title>粗览基于Eclipse RCP架构的Activiti Designer实现（思维导图版）</title>
      <link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88%E5%9F%BA%E4%BA%8Eeclipse_rcp%E6%9E%B6%E6%9E%84%E7%9A%84activiti_designer%E5%AE%9E%E7%8E%B0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E7%89%88/</link>
      <pubDate>Mon, 30 Mar 2015 05:02:44 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88%E5%9F%BA%E4%BA%8Eeclipse_rcp%E6%9E%B6%E6%9E%84%E7%9A%84activiti_designer%E5%AE%9E%E7%8E%B0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E7%89%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Activiti Designer开发环境配置</title>
      <link>https://mryqu.github.io/post/activiti_designer%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 27 Mar 2015 08:51:10 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/activiti_designer%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>Download eclipse-modeling-juno-SR2-win32-x86_64.zip,eclipse-rcp-juno-SR2-win32-x86_64.zip and extract to the sameeclipse folder Use Eclipse juno instead of kepler which can easily consume your day!!! Add Eclipse Graphiti SDK 0.10.1 from update site http://archive.eclipse.org/graphiti/updates/0.10.1/ Add the following location as source code repository: https://github.com/Activiti/Activiti-Designer  Import Maven project - Activiti Designer  Open a console and navigate to the directory of your Eclipseworkspace and then into the org.activiti.designer.parent directory,which is of course the directory of the project with the same name.</description>
    </item>
    
    <item>
      <title>Retrieve the status of an process instance in Activiti</title>
      <link>https://mryqu.github.io/post/retrieve_the_status_of_an_process_instance_in_activiti/</link>
      <pubDate>Fri, 13 Mar 2015 19:42:33 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/retrieve_the_status_of_an_process_instance_in_activiti/</guid>
      <description>Retrieve the status of an running process instance Use the executionQuery() or processInstanceQuery() to find out ifany result is returned or not when querying execution/process byId.
runtimeService.createProcessInstanceQuery().processInstanceId(specifiedProcessInstanceId).singleResult() runtimeService.createExecutionQuery().executionId(specifiedExecutionId).singleResult()  Specially when the history capabilities of Activiti engine isenabled: - Specified process/execution instance id:
 ProcessInstance inst = historyService.createHistoricProcessInstanceQuery().processInstanceId(specifiedProcessInstanceId).singleResult(); inst.isEnd()   Unspecified process/execution instance id:  historyService.createHistoricProcessInstanceQuery().finished().list() historyService.createHistoricProcessInstanceQuery().unfinished().list()   Retrieve the active node of an running process instance RuntimeService provide the API to retrieve the active node of anrunning process instance:</description>
    </item>
    
    <item>
      <title>粗览Activiti Explorer源代码</title>
      <link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_explorer%E6%BA%90%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Thu, 12 Mar 2015 08:52:17 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_explorer%E6%BA%90%E4%BB%A3%E7%A0%81/</guid>
      <description>ActivitiExplorer的应用程序为org.activiti.explorer.ExplorerApp，其界面配置文件为Activiti\modules\activiti-webapp-explorer2\src\main\resources\activiti-ui-context.xml。通过该配置文件创建主窗口org.activiti.explorer.ui.MainWindow类实例，并通过org.activiti.explorer.ViewManagerFactoryBean创建实现org.activiti.explorer.ViewManager接口的org.activiti.explorer.DefaultViewManager或org.activiti.explorer.ui.alfresco.AlfrescoViewManager类实例。 在Activiti演示中采用的是org.activiti.explorer.DefaultViewManager类实例，它对主窗口进行视图管理，完成视图切换、对应导航栏和功能菜单的设置。 主窗口org.activiti.explorer.ui.MainWindow类实例通过org.activiti.explorer.ui.mainlayout.MainLayout类进行界面布局。
下面列举了Activiti Explorer两级导航栏所对应的页面实现类。 - Tasks - Inboxorg.activiti.explorer.ui.task.InboxPage - My Tasksorg.activiti.explorer.ui.task.TasksPage - Queuedorg.activiti.explorer.ui.task.QueuedPage - Involvedorg.activiti.explorer.ui.task.InvolvedPage - Archivedorg.activiti.explorer.ui.task.ArchivedPage - Processes - My Instancesorg.activiti.explorer.ui.process.MyProcessInstancesPage - Deployed process definitionsorg.activiti.explorer.ui.process.ProcessDefinitionPage - Model workspaceorg.activiti.editor.ui.EditorProcessDefinitionPage - Reports - Generate reportsorg.activiti.explorer.ui.reports.RunReportsPage - Saved reportsorg.activiti.explorer.ui.reports.SavedReportsPage - Manage - Databaseorg.activiti.explorer.ui.management.db.DatabasePage - Deploymentsorg.activiti.explorer.ui.management.deployment.DeploymentPage - Active Processesorg.activiti.explorer.ui.management.processdefinition.ActiveProcessDefinitionPage - Suspend Processesorg.activiti.explorer.ui.management.processdefinition.SuspendedProcessDefinitionPage - Jobsorg.activiti.explorer.ui.management.job.JobPage - Usersorg.activiti.explorer.ui.management.identity.UserPage - Groupsorg.activiti.explorer.ui.management.identity.GroupPage - Administrationorg.activiti.explorer.ui.management.admin.AdministrationPage - Crystalballorg.activiti.explorer.ui.management.crystalball.CrystalBallPage</description>
    </item>
    
    <item>
      <title>GoJS BPMN元素界面实现分析</title>
      <link>https://mryqu.github.io/post/gojs_bpmn%E5%85%83%E7%B4%A0%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 11 Mar 2015 20:10:35 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/gojs_bpmn%E5%85%83%E7%B4%A0%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</guid>
      <description>GoJS BPMN里面的BPMN元素采用过不是PNG/JPEG这样的静态图标，而是通过GoJS在Cavas绘出来的。 由BPMN.js可知，一个BPMN元素是一个go.Node，内部大致包含go.Panel、go.Shape、go.TextBlock等对象，用于绘制外层的正方形、填充内部颜色、添加图标和文字。 如果创建自己定制的BPMN元素，最麻烦的就是图标了。现在我来看一下GoJS BPMN扩展里面的图标是怎么保存和绘制的。 GoJS BPMN扩展里面大部分的图标都已经在go.js里面以源代码的形式定义了，只有四个是在BPMN.js里面通过go.Shape.defineFigureGenerator方法定制的，分别是Empty、Annotation、BpmnTaskManual和BpmnTaskService。这四个图标的内容是GoJS geometry的格式保存的。 所有这些图标可以通过与go.Shape的figure进行绑定，由GoJS驱动完成底层绘制。我自己做了一个简单样例，对这些内嵌图标和BPMN定制图标稍微玩了点花样 http://jsfiddle.net/mryqu/mywy0nhz/ 显示效果如下： </description>
    </item>
    
    <item>
      <title>粗览Activiti Modeler属性显示和设置代码</title>
      <link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_modeler%E5%B1%9E%E6%80%A7%E6%98%BE%E7%A4%BA%E5%92%8C%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 06 Mar 2015 08:47:29 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_modeler%E5%B1%9E%E6%80%A7%E6%98%BE%E7%A4%BA%E5%92%8C%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81/</guid>
      <description>我的博文粗览Activiti Modeler操作和源代码介绍了Activiti ModelEditor组件的常用操作和对应源代码分析，本文接着介绍一下ActivitiModeler里BPMN元素属性的显示和设置。 粗览Activiti Modeler操作和源代码里提到的stencilset.json除了含有每个BPMN元素应该使用什么图标，也定义了每个BPMN元素的所有属性。以UserTask元素为例，它含有以下的属性包： - &amp;ldquo;overrideidpackage&amp;rdquo; - &amp;ldquo;namepackage&amp;rdquo; - &amp;ldquo;documentationpackage&amp;rdquo; - &amp;ldquo;asynchronousdefinitionpackage&amp;rdquo; - &amp;ldquo;exclusivedefinitionpackage&amp;rdquo; - &amp;ldquo;executionlistenerspackage&amp;rdquo; - &amp;ldquo;multiinstance_typepackage&amp;rdquo; - &amp;ldquo;multiinstance_cardinalitypackage&amp;rdquo; - &amp;ldquo;multiinstance_collectionpackage&amp;rdquo; - &amp;ldquo;multiinstance_variablepackage&amp;rdquo; - &amp;ldquo;multiinstance_conditionpackage&amp;rdquo; - &amp;ldquo;isforcompensationpackage&amp;rdquo; - &amp;ldquo;usertaskassignmentpackage&amp;rdquo; - &amp;ldquo;formkeydefinitionpackage&amp;rdquo; - &amp;ldquo;duedatedefinitionpackage&amp;rdquo; - &amp;ldquo;prioritydefinitionpackage&amp;rdquo; - &amp;ldquo;formpropertiespackage&amp;rdquo; - &amp;ldquo;tasklistenerspackage&amp;rdquo;
[tomcat]\webapps\activiti-explorer\editor-app\configuration\properties.js里提供了对各类BPMNstencil的所需要包含的HTML页面。 [tomcat]\webapps\activiti-explorer\editor-app\stencil-controller.js中对ORYX.CONFIG.EVENT_SELECTION_CHANGED事件注册了匿名函数监听器。当某一BPMN元素被选中后，该监听器会设置$scope.selectedItem和$scope.selectedShape，其中包含BPMN元素的所有属性，每个属性都有对应的stencilreadModeTemplateUrl、writeModeTemplateUrl和templateUrl。 [tomcat]\webapps\activiti-explorer\editor-app\editor.html是ActivitiModelEditor组件的显示页面，其ID为propertiesHelpWrapper的DIV元素内对所选择的BPMN元素的每个属性放置templateUrl、readModeTemplateUrl或writeModeTemplateUrl对应的HTML子页面用于显示和设置stencil属性。 用于设置BPMNstencil属性的页面都位于[tomcat]\webapps\activiti-explorer\editor-app\configuration\properties\下。 这些页面和Anjugar.JS控制器为： </description>
    </item>
    
    <item>
      <title>Activiti与GoJS BPMN支持的BPMN元素对比</title>
      <link>https://mryqu.github.io/post/activiti%E4%B8%8Egojs_bpmn%E6%94%AF%E6%8C%81%E7%9A%84bpmn%E5%85%83%E7%B4%A0%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Tue, 03 Mar 2015 23:00:11 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/activiti%E4%B8%8Egojs_bpmn%E6%94%AF%E6%8C%81%E7%9A%84bpmn%E5%85%83%E7%B4%A0%E5%AF%B9%E6%AF%94/</guid>
      <description>首先抱怨一下,GoJS BPMN扩展中有两个图标和标题是一样的,我看了又看还是分不清. ActivitiGoJS BPMNStartEventsStart Event Start Timer Event Start Signal Event Start Message Event Start Error Event ActivitiesAll Activiti activities support compensation optionAll GoJS BPMN activities support &amp;ldquo;Add Email Event&amp;rdquo;, &amp;ldquo;Add TimerEvent&amp;rdquo;, &amp;ldquo;Add Escalation Event&amp;rdquo; and &amp;ldquo;Add Error Event&amp;rdquo; options.User Task Service Task Looping Service TaskScript Task Business Rule Task Receive Task Manual Task Mail Task Camel Task Mule Task Generic TaskStructuralSub Process Event Sub Process Call Activity GatewaysExclusive Gateway Parallel Gateway Inclusive Gateway Event Gateway BoundaryEventsBoundary Error Event Boundary Timer Event Boundary Signal Event Boundary Message Event Intermediate Catching EventsIntermediate Timer Catching Event Intermediate Signal Catching Event Intermediate Message Catching Event Intermediate Throwing EventsIntermediate None Throwing Events Intermediate Signal Throwing Events EndEventsEnd Event End Error Event ?</description>
    </item>
    
    <item>
      <title>浏览器的本地存储在GoJS BPMN样例中的使用</title>
      <link>https://mryqu.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%9C%A8gojs_bpmn%E6%A0%B7%E4%BE%8B%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 02 Mar 2015 20:06:19 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%9C%A8gojs_bpmn%E6%A0%B7%E4%BE%8B%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>GoJS BPMN样例中可以存储BPMN模型，它采用的存储媒体是浏览器的本地存储。Web Storage(W3C WebApps Working Group)中定义了如下的Storage接口：
interface Storage { readonly attribute unsigned long length; DOMString key(unsigned long index); getter DOMString getItem(DOMString key); setter creator void setItem(DOMString key, DOMString value); deleter void removeItem(DOMString key); void clear(); };  GoJS BPMN样例采用的方法如下：
function checkLocalStorage() { return (typeof (Storage) !== &amp;quot;undefined&amp;quot;) &amp;amp;&amp;amp; (window.localStorage !== undefined); } window.localStorage.setItem(key, value) window.localStorage.getItem(key) window.localStorage.removeItem(key)  我的测试是存储一个名为yqu_GoJSBPMN_Samp1的模型。 如果想清除我的小测试所用的本地存储，可以通过chrome://settings/cookies#cont页面来完成： 参考 MDN：DOM Storage guide
DOM Storage</description>
    </item>
    
    <item>
      <title>Activiti Modeler中sid生成机制</title>
      <link>https://mryqu.github.io/post/activiti_modeler%E4%B8%ADsid%E7%94%9F%E6%88%90%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 28 Feb 2015 19:28:15 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/activiti_modeler%E4%B8%ADsid%E7%94%9F%E6%88%90%E6%9C%BA%E5%88%B6/</guid>
      <description>昨天跟同事说Activiti Modeler中的sid比GoJS中的元素ID讲究，估计是由时戳和随机数混合生成的。 今天看了一下，发现原来就是一个纯随机数。
[tomcat]\webapps\activiti-explorer\editor-app\editor.html里对类为stencil-item的HTML元素设置的拖拽处理函数在[tomcat]\webapps\activiti-explorer\editor-app\stencil-controller.js中定义。 sid生成方法在[tomcat]\webapps\activiti-explorer\editor-app\editor\oryx.debug.js中定义。
ORYX.Editor.provideId = function() { var res=[], hex=&#39;0123456789ABCDEF&#39;; for(var i=0; i&amp;lt;36; i ) res[i]=Math.floor(Math.random()*0x10); res[14]=4; res[19]=(res[19] &amp;amp; 0x3) | 0x8; for(var i=0; i&amp;lt;36; i ) res[i] = hex[res[i]]; res[8] = res[13] = res[18] = res[23] = &#39;-&#39;; return &amp;quot;sid-&amp;quot; res.join(&#39;&#39;); };  当然，GoJSBPMN样例中的ID就更简单的不得了，全都是预定义的简单数字。例如，userTask的key预定义为7，当一个BPMN元素加入GoJSmodel时，GoJS会让model中的key变成唯一的（代码混淆过，我猜估计没混淆前叫makeUniqueKeyFunction）。在我的小测试中，第一个userTask的key仍然为7，第二个userTask的key被改成了-3。 感觉要是借鉴MongoDB的ObjectId生成机制，ID的冲撞概率可能会更低。</description>
    </item>
    
    <item>
      <title>将GoJS和Activiti Explorer熬成一锅粥</title>
      <link>https://mryqu.github.io/post/%E5%B0%86gojs%E5%92%8Cactiviti_explorer%E7%86%AC%E6%88%90%E4%B8%80%E9%94%85%E7%B2%A5/</link>
      <pubDate>Fri, 27 Feb 2015 20:05:26 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%B0%86gojs%E5%92%8Cactiviti_explorer%E7%86%AC%E6%88%90%E4%B8%80%E9%94%85%E7%B2%A5/</guid>
      <description>熬粥时，一开始创建一个跟editor-app平行的独立目录gojs-editor-app，结果我的Chrome浏览器报“Resourceinterpreted as stylesheet but transferred with MIME typetext/html”错误，GoJS的所有Javascript和stylesheet文件(例如BPMN.js和BPMN.css)都被加了料从Tomcat发给浏览器变成了html格式。 看了下面两个帖子，没有丝毫头绪： http://stackoverflow.com/questions/3467404/chrome-says-resource-interpreted-as-script-but-transferred-with-mime-type-tex
thttp://stackoverflow.com/questions/22631158/resource-interpreted-as-stylesheet-but-transferred-with-mime-type-text-html-see
搜了一下ActivitiExplorer的配置，看到org.activiti.explorer.filter.ExplorerFilter里有六个路径(&amp;ldquo;/ui&amp;rdquo;、&amp;rdquo;/VAADIN&amp;rdquo;、&amp;rdquo;/modeler.html&amp;rdquo;、&amp;rdquo;/editor-app&amp;rdquo;、&amp;rdquo;/service&amp;rdquo;、&amp;rdquo;/diagram-viewer&amp;rdquo;)走了特殊的过滤器。只好将GoJS的内容都转到Activiti已有的editor-app目录，这下齐活了。</description>
    </item>
    
    <item>
      <title>试用GoJS BPMN生成Activiti支持的process.bpmn.xml</title>
      <link>https://mryqu.github.io/post/%E8%AF%95%E7%94%A8gojs_bpmn%E7%94%9F%E6%88%90activiti%E6%94%AF%E6%8C%81%E7%9A%84process.bpmn.xml/</link>
      <pubDate>Thu, 26 Feb 2015 16:37:24 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E8%AF%95%E7%94%A8gojs_bpmn%E7%94%9F%E6%88%90activiti%E6%94%AF%E6%8C%81%E7%9A%84process.bpmn.xml/</guid>
      <description>我在Activiti中建立一个简单的仅有startEvent、userTask和endEvent的BPMN模型，导出的process.bpmn.xml内容如下： 前一博文玩玩GoJS BPMN样例中我给出了类似 BPMN模型的JSON数据。通过分析可知，除了两者的ID生成机制不同（GoJSBPMN生成的ID太简单，很容易重复），完全可以通过GoJS的JSON数据构造上面的process.bpmn.xml文件内容。 试了一下在Javascript中生成上面的process.bpmn.xml文档，大致可行。从MDN查到的资料可知，仅支持IE9+浏览器。不支持低版本IE浏览器，估计现在不算什么问题。目前生成的XML文档有些瑕疵，第一个使用createElement_x方法创建的节点会自动添加命名空间xmlns=http://www.w3.org/1999/xhtml，但是应该可以避免。
|Chrome|Firefox (Gecko)|Internet Explorer|Opera|Safari |&amp;mdash;&amp;ndash; |(Yes)|1.0 (1.7 or earlier)|9.0|(Yes)|(Yes)
JS代码如下： </description>
    </item>
    
    <item>
      <title>玩玩GoJS BPMN样例</title>
      <link>https://mryqu.github.io/post/%E7%8E%A9%E7%8E%A9gojs_bpmn%E6%A0%B7%E4%BE%8B/</link>
      <pubDate>Wed, 25 Feb 2015 19:50:09 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%8E%A9%E7%8E%A9gojs_bpmn%E6%A0%B7%E4%BE%8B/</guid>
      <description>玩一玩GoJS，GoJS是Northwoods Software的产品。Northwoods Software创立于1995年，专注于交互图控件和类库。旗下四款产品： - GoJS：用于在HTML上创建交互图的纯javaSCript库，GoJS支持复杂的模板定义和数据绑定。 - GoDiagram：用于WinForms的.NET图控件。 - GoXam：用于WPF/Silverlight的图控件。 - JGo：用于Swing/SWT中创建交互图的java库。
试了一下GoJS的BPMN样例，很容易导出SVG或PNG/JPEG等格式的图像数据。其中： - 由于GoJS是经过代码混淆的，不能对makeSVG方法进行确定的分析，大概是采用HTMLCanvasElement.getContext(&amp;lsquo;2d&amp;rsquo;).drawImage(&amp;hellip;).getImageData(&amp;hellip;)获得的 - makeImage和makeImageData方法通过HTMLCanvasElement.toDataURL()方法实现的
在控制台执行window.myDiagram.model.toJson()，返回如下结果：
{ &amp;quot;class&amp;quot;: &amp;quot;go.GraphLinksModel&amp;quot;, &amp;quot;linkFromPortIdProperty&amp;quot;: &amp;quot;fromPort&amp;quot;, &amp;quot;linkToPortIdProperty&amp;quot;: &amp;quot;toPort&amp;quot;, &amp;quot;nodeDataArray&amp;quot;: [ { &amp;quot;category&amp;quot;: &amp;quot;activity&amp;quot;, &amp;quot;item&amp;quot;: &amp;quot;User task&amp;quot;, &amp;quot;key&amp;quot;: 7, &amp;quot;loc&amp;quot;: &amp;quot;388.33645784919577 140.35229369949943&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;User Task&amp;quot;, &amp;quot;taskType&amp;quot;: 2, &amp;quot;boundaryEventArray&amp;quot;: [ ], &amp;quot;size&amp;quot;: &amp;quot;120 80&amp;quot; }, { &amp;quot;category&amp;quot;: &amp;quot;event&amp;quot;, &amp;quot;item&amp;quot;: &amp;quot;End&amp;quot;, &amp;quot;key&amp;quot;: 104, &amp;quot;loc&amp;quot;: &amp;quot;569.86545617508 140.90913111767696&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;End&amp;quot;, &amp;quot;eventType&amp;quot;: 1, &amp;quot;eventDimension&amp;quot;: 8 }, { &amp;quot;category&amp;quot;: &amp;quot;event&amp;quot;, &amp;quot;item&amp;quot;: &amp;quot;start&amp;quot;, &amp;quot;key&amp;quot;: 101, &amp;quot;loc&amp;quot;: &amp;quot;183.</description>
    </item>
    
    <item>
      <title>粗览Activiti Modeler操作和源代码</title>
      <link>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_modeler%E6%93%8D%E4%BD%9C%E5%92%8C%E6%BA%90%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Sun, 15 Feb 2015 20:24:21 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E7%B2%97%E8%A7%88activiti_modeler%E6%93%8D%E4%BD%9C%E5%92%8C%E6%BA%90%E4%BB%A3%E7%A0%81/</guid>
      <description>Activiti Model Editor组件 我的了解Activiti Explorer及其Vaadin实现方式博文里提到ActivitiExplorer使用的是Vaadin架构，但是Activiti 模型编辑器组件却没用使用Vaadin架构，而是采用Angular.JS的MVC模式。Activiti模型编辑器组件的客户端代码位于Activiti\modules\activiti-webapp-explorer2\src\main\webapp\editor-app\。 该目录下的editor.html是Activiti Modeler Editor的主界面HTML代码 其中palette区是通过Angular.JS使用stencilsets\bpmn2.0\icons下多个子目录内的PNG图像形成的多组列表。其节点层次关系获取相关代码为： - stencil-controller.js - Activiti\modules\activiti-modeler\src\main\java\org\activiti\rest\editor\main\StencilsetRestResource.java - Activiti\modules\activiti-webapp-explorer2\src\main\resources\stencilset.json
editor.html中的视图与两个控制器进行了绑定: - stencil-controller.js：处理对canvas中BPMN元素的操作，很多处理是通过editor目录下的QRYX库完成的 - toolbar-controller.js：处理对工具栏的操作，很多处理由configuration\toolbar-default-actions.js完成
保存模型操作 保存模型操作，是通过toolbar-default-actions.js中的SaveModel方法完成的，它需要将三部分信息传给服务器： - 模型的元数据：例如模型名称、分类、创建时间、最后一次更新时间等等 - 模型JSON数据：将canvas内的图像数据转换成JSON数据UTF8字符串
 { &amp;quot;resourceId&amp;quot;: 53, &amp;quot;properties&amp;quot;: { &amp;quot;process_id&amp;quot;: &amp;quot;process&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;documentation&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;process_author&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;process_version&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;process_namespace&amp;quot;: &amp;quot;http://www.activiti.org/processdef&amp;quot;, &amp;quot;executionlisteners&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;eventlisteners&amp;quot;: &amp;quot;&amp;quot; }, &amp;quot;stencil&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;BPMNDiagram&amp;quot; }, &amp;quot;childShapes&amp;quot;: [ { &amp;quot;resourceId&amp;quot;: &amp;quot;sid-4F7484B9-11EC-4FCE-8950-FEFFB723D88B&amp;quot;, &amp;quot;properties&amp;quot;: { &amp;quot;overrideid&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;documentation&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;executionlisteners&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;initiator&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;formkeydefinition&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;formproperties&amp;quot;: &amp;quot;&amp;quot; }, &amp;quot;stencil&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;StartNoneEvent&amp;quot; }, &amp;quot;childShapes&amp;quot;: [], &amp;quot;outgoing&amp;quot;: [ { &amp;quot;resourceId&amp;quot;: &amp;quot;sid-B589A0D9-FA79-4C12-95B7-253E72480384&amp;quot; } ], &amp;quot;bounds&amp;quot;: { &amp;quot;lowerRight&amp;quot;: { &amp;quot;x&amp;quot;: 259, &amp;quot;y&amp;quot;: 139 }, &amp;quot;upperLeft&amp;quot;: { &amp;quot;x&amp;quot;: 229, &amp;quot;y&amp;quot;: 109 } }, &amp;quot;dockers&amp;quot;: [] }, { &amp;quot;resourceId&amp;quot;: &amp;quot;sid-1A762474-62B9-4F3D-A81C-1ADD46AF7D2F&amp;quot;, &amp;quot;properties&amp;quot;: { &amp;quot;overrideid&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;documentation&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;asynchronousdefinition&amp;quot;: &amp;quot;false&amp;quot;, &amp;quot;exclusivedefinition&amp;quot;: &amp;quot;false&amp;quot;, &amp;quot;executionlisteners&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;multiinstance_type&amp;quot;: &amp;quot;None&amp;quot;, &amp;quot;multiinstance_cardinality&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;multiinstance_collection&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;multiinstance_variable&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;multiinstance_condition&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;isforcompensation&amp;quot;: &amp;quot;false&amp;quot;, &amp;quot;usertaskassignment&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;formkeydefinition&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;duedatedefinition&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prioritydefinition&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;formproperties&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;tasklisteners&amp;quot;: &amp;quot;&amp;quot; }, &amp;quot;stencil&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;UserTask&amp;quot; }, &amp;quot;childShapes&amp;quot;: [], &amp;quot;outgoing&amp;quot;: [ { &amp;quot;resourceId&amp;quot;: &amp;quot;sid-4134C10E-B589-42FF-AACC-463D35D52016&amp;quot; } ], &amp;quot;bounds&amp;quot;: { &amp;quot;lowerRight&amp;quot;: { &amp;quot;x&amp;quot;: 746, &amp;quot;y&amp;quot;: 172 }, &amp;quot;upperLeft&amp;quot;: { &amp;quot;x&amp;quot;: 646, &amp;quot;y&amp;quot;: 92 } }, &amp;quot;dockers&amp;quot;: [] }, { &amp;quot;resourceId&amp;quot;: &amp;quot;sid-B22A5CAB-94D0-419E-BB1E-E8538C6A7283&amp;quot;, &amp;quot;properties&amp;quot;: { &amp;quot;overrideid&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;documentation&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;executionlisteners&amp;quot;: &amp;quot;&amp;quot; }, &amp;quot;stencil&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;EndNoneEvent&amp;quot; }, &amp;quot;childShapes&amp;quot;: [], &amp;quot;outgoing&amp;quot;: [], &amp;quot;bounds&amp;quot;: { &amp;quot;lowerRight&amp;quot;: { &amp;quot;x&amp;quot;: 1089, &amp;quot;y&amp;quot;: 138 }, &amp;quot;upperLeft&amp;quot;: { &amp;quot;x&amp;quot;: 1061, &amp;quot;y&amp;quot;: 110 } }, &amp;quot;dockers&amp;quot;: [] }, { &amp;quot;resourceId&amp;quot;: &amp;quot;sid-B589A0D9-FA79-4C12-95B7-253E72480384&amp;quot;, &amp;quot;properties&amp;quot;: { &amp;quot;overrideid&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;documentation&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;conditionsequenceflow&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;executionlisteners&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;defaultflow&amp;quot;: &amp;quot;false&amp;quot; }, &amp;quot;stencil&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;SequenceFlow&amp;quot; }, &amp;quot;childShapes&amp;quot;: [], &amp;quot;outgoing&amp;quot;: [ { &amp;quot;resourceId&amp;quot;: &amp;quot;sid-1A762474-62B9-4F3D-A81C-1ADD46AF7D2F&amp;quot; } ], &amp;quot;bounds&amp;quot;: { &amp;quot;lowerRight&amp;quot;: { &amp;quot;x&amp;quot;: 645.</description>
    </item>
    
    <item>
      <title>Activiti 5.17 JNDI数据源配置</title>
      <link>https://mryqu.github.io/post/activiti_5.17_jndi%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 12 Feb 2015 20:18:53 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/activiti_5.17_jndi%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</guid>
      <description>Activiti演示环境采用的是h2内存数据库。为了便于研究代码，所以将其迁移到我已有的MySQL/PostgreSQL数据库上去。
MySQL MySQL配置 activiti数据库DDL文件位于activiti-engine-5.17.0.jar\org\activiti\db\create\，MySQL 5.6.4及其之后版本与之前的版本使用的是不同的DDL文件。将下列用于MySQL5.6.4+的DDL文件提取保存到某一目录下。 - activiti.mysql.create.engine.sql - activiti.mysql.create.identity.sql - activiti.mysql.create.history.sql
MySQL命令如下：
create database ActivitiDB character set utf8 collate utf8_general_ci; use ActivitiDB; source c:/activiti.mysql.create.engine.sql; source c:/activiti.mysql.create.identity.sql; source c:/activiti.mysql.create.history.sql;  Tomcat配置 删除下列MyBatis配置文件： - apache-tomcat-7\webapps\activiti-explorer\WEB-INF\classes\db.properties - apache-tomcat-7\webapps\activiti-rest\WEB-INF\classes\db.properties
修改下列Spring配置文件： - apache-tomcat-7\webapps\activiti-explorer\WEB-INF\classes\activiti-custom-context.xml - apache-tomcat-7\webapps\activiti-rest\WEB-INF\classes\activiti-custom-context.xml
去掉XMl注释，删除&amp;rdquo;dbProperties&amp;rdquo;bean，将&amp;rdquo;dataSource&amp;rdquo;bean改成JNDI数据源。 修改下列Tomcat上下文，配置Tomcat JNDI资源： - apache-tomcat-7\webapps\activiti-explorer\META-INF\context.xml- apache-tomcat-7\webapps\activiti-rest\META-INF\context.xmlPostgreSQL PostgreSQL配置 activiti数据库DDL文件位于activiti-engine-5.17.0.jar\org\activiti\db\create\，将下列用于PostgreSQL的DDL文件提取保存到某一目录下。 - activiti.postgres.create.engine.sql - activiti.postgres.create.identity.sql - activiti.postgres.create.history.sql
PostgreSQL命令如下：
CREATE DATABASE ActivitiDB WITH ENCODING &#39;UTF8&#39; TEMPLATE=template0; \c ActivitiDB; \i c:/activiti.postgres.create.engine.sql; \i c:/activiti.postgres.create.identity.sql; \i c:/activiti.</description>
    </item>
    
    <item>
      <title>Activiti模型编辑器之前前身：Oryx editor</title>
      <link>https://mryqu.github.io/post/activiti%E6%A8%A1%E5%9E%8B%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E5%89%8D%E5%89%8D%E8%BA%ABoryx_editor/</link>
      <pubDate>Wed, 11 Feb 2015 21:57:18 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/activiti%E6%A8%A1%E5%9E%8B%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E5%89%8D%E5%89%8D%E8%BA%ABoryx_editor/</guid>
      <description>我的The history and commercial version of Activiti Modeler博文里提到Activiti建模器组件是由Signavio捐赠的Signavio Core Components project， 可以说Activiti模型组件的前身是Signavio Core Components project， 那么Signavio Core Components project的前身又是什么呢？ Signavio (wiki)里面提到了Signavio是德国波茨坦大学哈索普莱特纳研究院（HPI）毕业生团队创建的。在Signavio之前，Signavio的这些创始人在HPI从2006年开始开发了世界上第一个用于BPMN的web建模器Oryx，一个学术性开源项目。Oryx就是Signavio Core Components project开源版和Signavio Process Editor商业版的蓝图。随着Signavio公司的产生，Oryx项目被废弃了、不再进行维护。 Oryx开发团队
答案就是：Signavio Core Componentsproject的前身，即Activiti模型编辑器之前前身是Oryx。Oryx里面有一些设计文档，对学习Activiti建模器组件仍然有一定的帮助。
参考 http://en.wikipedia.org/wiki/Signavio
http://bpt.hpi.uni-potsdam.de/Oryx/News
https://github.com/Activiti
http://code.google.com/p/signavio-core-components/
https://code.google.com/p/oryx-editor/</description>
    </item>
    
    <item>
      <title>The history and commercial version of Activiti Modeler</title>
      <link>https://mryqu.github.io/post/the_history_and_commercial_version_of_activiti_modeler/</link>
      <pubDate>Wed, 11 Feb 2015 20:06:15 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/the_history_and_commercial_version_of_activiti_modeler/</guid>
      <description>The history of Activiti Modeler Activiti Modeler component is as part of the Activiti projectfrom the start. This Modeler was donated by Signavio as part of the Signavio Core Components project. This project was not maintained anymoresince 2011 (Activiti 5.7) and Activiti team no longer considered it‘core’ to Activiti. Tijs Rademakers (the author of Activiti in Action) has spentquite some in his spare time to master, enhance and tweak the ‘oldcode base’, fork the Signavio Core Components project and create acompletely new, maintainable codebase.</description>
    </item>
    
    <item>
      <title>业务流程建模标注工具比较</title>
      <link>https://mryqu.github.io/post/%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%BB%BA%E6%A8%A1%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83/</link>
      <pubDate>Tue, 10 Feb 2015 20:03:36 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%BB%BA%E6%A8%A1%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83/</guid>
      <description>原文http://en.wikipedia.org/wiki/Comparison_of_Business_Process_Modeling_Notation_tools ，留着学习参考、技术选型。
General NameCreatorPlatform / OSBPMN VersionFeaturesFirst ReleaseLatest ReleaseSoftware licenseActiviti ModelerAlfresco&amp;nbsp;and theActiviti communityCross-platformBPMN 2.0Modeler,&amp;nbsp;Simulation,&amp;nbsp;Execution2010-05-17[1]2014-10-16[2]Apache License&amp;nbsp;2.0[3]ActiveVOSInformaticaWindows,&amp;nbsp;LinuxBPMN 2.0Modeling, Testing and Execution with open standards.20052014ProprietaryADONIS (software)BOC Information Technologies Consulting AGWindowsBPMN 2.0Business Process Analysis (BPA) tool supporting businessprocess management allowing process modeling, analysis, simulation,evaluation, publishing and automation. Freeware Community Editionavailable.19952012Proprietary/FreewareAgiles BPMS &amp;amp; ECMIMAGE Technology S.A.Windows,&amp;nbsp;Linux,MacBPMN 2.0Modeler,&amp;nbsp;Execution,2003-Oct2013-SepProprietaryAltova&amp;nbsp;UModelAltovaWindowsBPMN&amp;nbsp;1.1, 2.0Includes BPMN,&amp;nbsp;UML,&amp;nbsp;SysML, C#and&amp;nbsp;Java&amp;nbsp;round trip code generation,documentation, collaboration (includingwith&amp;nbsp;MetaTeam) and database modeling20052013-06-12Proprietary[4]ARCWAY CockpitARCWAY AGWindows,&amp;nbsp;Mac&amp;nbsp;(Linuxunofficially)BPMN 2.0BPMN Collaboration Diagrams, EPC, Petri Nets, integratedwith&amp;nbsp;FMC&amp;nbsp;Blockdiagramsfor business and IT architecture,&amp;nbsp;UML&amp;nbsp;Class diagramsfor data models and&amp;nbsp;Requirements management20052014Proprietary, free single user (Designer) editionARIS ExpressSoftware AGWindows&amp;nbsp;(andLinux,&amp;nbsp;Macunofficially)BPMN 2.</description>
    </item>
    
    <item>
      <title>了解Activiti Explorer及其Vaadin实现方式</title>
      <link>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3activiti_explorer%E5%8F%8A%E5%85%B6vaadin%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 10 Feb 2015 16:04:06 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3activiti_explorer%E5%8F%8A%E5%85%B6vaadin%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</guid>
      <description>通过ActivitiModeler架构图可知，Activiti Explorer采用的是Vaadin框架。 Vaadin 是一种 Java Web 应用程序的开发框架, 其设计目标是便利地创建和维护高质量的 Web UI 应用程序.Vaadin 支持两种不同的开发模式: 服务器端开发和客户端开发. 服务器端开发方式是这二者中更为强大的一种. 它能帮助开发者忘记Web 程序的各种实现细节, 使得 Web 应用程序的开发变得就象过去使用便利的Java开发工具(如AWT, Swing,SWT)来开发桌面应用程序一样, 甚至更简单。 Vaadin 应用程序中基本上所有的逻辑都是运行在服务器端的 Java Servlet API 上的，如下图中Vaadin的运行时结构图所示，Vaadin运行时结构主要由服务器端框架和客户端引擎两部分构成。服务器端框架包含了用来与客户端引擎通讯的服务器端集成层以及一系列的 server端 UI 组件。客户端引擎则由 Google Web toolkit(GWT) 页面渲染模块和客户端集成层两部分组成。 ActivitiExplorer的代码位于Activiti\modules\activiti-explorer下： 参考资料 vaadin官方网站
book of vaadin 中文版
Vaadin - 来自北欧的 Web 应用开发利器，第 1 部分: Vaadin 的基本概况和基础开发
Vaadin - 来自北欧的 Web 应用开发利器，第 2 部分: Vaadin 的体系结构和功能扩展</description>
    </item>
    
    <item>
      <title>搭建Activiti的IntelliJ IDEA开发调试环境</title>
      <link>https://mryqu.github.io/post/%E6%90%AD%E5%BB%BAactiviti%E7%9A%84intellij_idea%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Mon, 09 Feb 2015 20:03:46 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E6%90%AD%E5%BB%BAactiviti%E7%9A%84intellij_idea%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid>
      <description> 准备工作 在搭建Activiti的IntelliJ IDEA开发调试环境前，确保下列软件已经安装： - JDK 1.6 - ant - Maven - IntelliJ IDEA
导入Activiti Import Project 通过Activiti的Maven pom.xml导入IntelliJ IDEA项目。 Import Modules 导入IntelliJ IDEA项目后，仅有几个Activiti模块变成了IntelliJIDEA项目中的模块。为了可以调试所有模块，通过ProjectStructure菜单简单粗暴地将剩余的Activiti模块导入IntelliJ模块。 对每个手工导入的模块设置源代码、资源、测试代码和测试资源。 Frameworks Dection 手工导入所有模块后，重启IntelliJ IDEA，它会自动检测所有模块的类型，例如Spring、WEB、JPA和GWT等。 构建Activiti Activiti项目可以通过下面的ant命令构建：
.....\wfgitws\Activiti\distro&amp;gt;ant -Dnodocs=true clean distro  也可以在IntelliJ IDEA IDE中构建： 本地调试 To make sure that the necessary application server plugin isenabled 本测试中使用Apache Tomcat服务器。 Defining application servers in IntelliJ IDEA Check and configure artifacts in IntelliJ IDEA Add run/local configuration in IntelliJ IDEA Run in IntelliJ IDEA Add Jetbrain IDE plugin in Chrome 远程调式 Remote Debugging Configuration 通过Run-Edit Configuration菜单命令，添加一个远程调试配置。 该调试配置需要同Tomcat保持一致 Remote Debugging 设置断点，在Activiti Explorer上的操作触发断点，该Activiti的IntelliJIDEA开发调试环境已经可以工作了。 </description>
    </item>
    
    <item>
      <title>了解Activiti组件</title>
      <link>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3activiti%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Sat, 07 Feb 2015 18:19:05 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BA%86%E8%A7%A3activiti%E7%BB%84%E4%BB%B6/</guid>
      <description>Activiti 简介 Activiti作为一个遵从 Apache许可的工作流和业务流程管理开源平台，其核心是基于 Java 的超快速、超稳定的 BPMN 2.0流程引擎，强调流程服务的可嵌入性和可扩展性，同时更加强调面向业务人员。Activiti可以运行在任何JAVA程序中：单机、服务器、集群或云上。
Activiti 组件 - Activiti Modeler—建模器Activiti建模器是基于开源的Signavio流程编辑器的一个定制版本，可以使用浏览器图形化地编辑BPMN2.0兼容流程，流程文件被存储在数据库模型仓库内。Activiti团队已经停止Activiti建模器的活跃开发，目前仍保留在ActivitiExplorer内。- Activiti Designer—设计器Activiti设计器是Eclipse插件形式的，除了可以建模BPMN2.0流程，还支持Activiti特定的扩展，可以发挥Activiti流程和引擎的全部潜能。- Activiti Kickstart—基于表格的流程设计在Activiti Explorer的Model workspace里新建模型时选择Table-drivendefination时就是所谓的ActivitiKickstart，现在Activiti Designer里也包含这一功能。 - Activiti ExplorerExplorer是流程引擎的Web用户控制台。使用它来进行任务管理、流程实例检查、管理和基于历史统计数据查看报表等等。它不是一个的最终客户可用的成熟监控和管理应用程序，仅用于演示Activiti如何用于用户的应用中。 - Activiti RestActiviti引擎的 REST API。此外，曾经存在过下面两个组件（至少 Activiti 5.0-alpha4版本）： - ActivitiProbe：一个对流程引擎运行期实例提供管理及监控的web应用程序。包含部署的管理、流程定义的管理、数据库表的检视、日志查看、事务的平均执行时间、失败多次的工作等功能。已经变成ActivitiExplorer的一部分 - Activiti Cycle：BPM协作用具，改用camunda Cycle了
参考 Activiti官方网站
Activiti用户指南
Activiti组件
Activiti开发指南
Activiti Javadoc
Activiti源代码(GitHub)
Adhoc workflow with Activiti: introducing Activiti KickStart
Activiti Cycle explained
Easy Workflows - Activiti Kickstart
Activiti - 新一代的开源 BPM 引擎</description>
    </item>
    
    <item>
      <title>Activiti相关帖子汇总</title>
      <link>https://mryqu.github.io/post/activiti%E7%9B%B8%E5%85%B3%E5%B8%96%E5%AD%90%E6%B1%87%E6%80%BB/</link>
      <pubDate>Thu, 05 Feb 2015 20:07:13 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/activiti%E7%9B%B8%E5%85%B3%E5%B8%96%E5%AD%90%E6%B1%87%E6%80%BB/</guid>
      <description> 咖啡兔 :《Activiti实战》作者闫洪磊Activiti相关博文 iteye - pyzheng的博客工作流相关博文 csdn - howareyoutodaysoft的博客Activiti相关博文 新浪博客 - 微笑浆糊-xerllentbpm工作流相关博文 网易博客 - homeland520工作流引擎相关博文 csdn - fanfan159357的专栏Activiti designer源码研究相关博文 csdn - 白乔专栏工作流activiti的一些概念Activiti源码浅析：Activity与TaskActiviti源码浅析：Activiti的活动授权机制activiti 源码笔记之startProcess[转]Activiti源码分析（框架、核心类。。。）[转]activiti源码解读之心得整编在Activiti官方源码上提交的两个bugfix csdn - 宋三丝的专栏Activiti相关博文 iteye - jhaij的博客集成activiti-modeler 到 自己的业务系统(集成流程跟踪-完美支持IE)activiti taskservice addComment Provided id is nullactiviti 用户任务 - - - iteye站内Activiti相关博文
csdn站内Activiti相关博文
开源中国社区（oschina.net）站内Activiti相关博文
  </description>
    </item>
    
  </channel>
</rss>