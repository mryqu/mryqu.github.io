<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vagrant on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/categories/vagrant/</link>
    <description>Recent content in Vagrant on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 26 Jul 2018 05:56:21 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/categories/vagrant/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Vagrant]学习VBoxManage定制</title>
      <link>https://mryqu.github.io/post/vagrant_%E5%AD%A6%E4%B9%A0vboxmanage%E5%AE%9A%E5%88%B6/</link>
      <pubDate>Thu, 26 Jul 2018 05:56:21 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/vagrant_%E5%AD%A6%E4%B9%A0vboxmanage%E5%AE%9A%E5%88%B6/</guid>
      <description>Vagrant Configuration - VBoxManage Customizations里面有讲到通过VBoxManage修改VirtualBox虚拟机。而VBoxManage modifyvm里面细致的介绍了所有设置。
VBoxManage modifyvm设置 接触过的VBoxManage modifyvm设置 下面就仔细研究一下我看到过的modifyvm设置：
# -*- mode: ruby -*- # vi: set ft=ruby : VAGRANTFILE_API_VERSION = &amp;quot;2&amp;quot; Vagrant.require_version &amp;quot;&amp;gt;= 1.6.3&amp;quot; Vagrant.configure(VAGRANTFILE_API_VERSION) do |config| config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb| # --memory设置用来指定分配的内存，单位为MB # 可简写为vb.memory=8192 vb.customize [&#39;modifyvm&#39;, :id, &#39;--memory&#39;, &#39;8192&#39;] # --cpus设置用来指定虚拟机的虚拟CPU个数 # 可简写为vb.cpus=3 vb.customize [&#39;modifyvm&#39;, :id, &#39;--cpus&#39;, &#39;3&#39;] # --cpuexecutioncap &amp;lt;1-100&amp;gt;设置用来指定虚拟CPU可用的CPU时间比例。 # 值50意味无论VM使用多少个虚拟虚拟CPU，都不会超过宿主机CPU时间的一半。 vb.customize [&#39;modifyvm&#39;, :id, &#39;--cpuexecutioncap&#39;, &#39;75&#39;] # --natdnshostresolver&amp;lt;1-N&amp;gt; on|off用来指定NAT使用宿主机的解析机制处理DNS请求。 vb.customize [&#39;modifyvm&#39;, :id, &#39;--natdnshostresolver1&#39;, &#39;on&#39;] # --natdnsproxy&amp;lt;1-N&amp;gt; on|off用来指定NAT将所有客户机DNS请求代理到宿主机的DNS服务器。 vb.</description>
    </item>
    
    <item>
      <title>[Vagrant] 学习一下Vagrant的Provider类型</title>
      <link>https://mryqu.github.io/post/vagrant_%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bvagrant%E7%9A%84provider%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 25 Jul 2018 06:05:44 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/vagrant_%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bvagrant%E7%9A%84provider%E7%B1%BB%E5%9E%8B/</guid>
      <description>偶尔动了心思，想自己装一个Wiki。就按照MediaWiki-Vagrant，装一个Vagrant版的MediaWiki玩玩。MediaWiki全球最著名的开源wiki程序，运行于PHP+MySQL环境。MediaWiki从2002年2月25日被作为维基百科全书的系统软件，并有大量其他应用实例。 顺手研究了一下mediawiki/vagrant项目的Vagrantfile文件，跟我们自己项目用的Vagrantfile仅仅配置了一个VirtualBox provider不同，它配置了VirtualBox、VMWare Fusion、Microsoft Hyper-V、LXC、Parallels和libvirt (KVM/QEMU)六种provider。 在Vagrant的网站上仅仅提及了默认的VirtualBox、VMware、Docker、Hyper-V四款provider。那到底Vagrant有多少provider类型呢？ 从Vagrant Cloud上可知有22种provider类型的Vagrant box镜像可供下载： - aws - cloudstack - digitalocean - docker - google - hyperv - libvirt - lxc - openstack - parallels - qemu - rackspace - softlayer - veertu - virtualbox - vmware - vmware_desktop - vmware_fusion - vmware_ovf - vmware_workstation - vsphere - xenserver</description>
    </item>
    
    <item>
      <title>Vagrant折腾记</title>
      <link>https://mryqu.github.io/post/vagrant%E6%8A%98%E8%85%BE%E8%AE%B0/</link>
      <pubDate>Tue, 19 Jun 2018 05:59:52 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/vagrant%E6%8A%98%E8%85%BE%E8%AE%B0/</guid>
      <description>自从用了OpenStack，真是很久没玩Vagrant。偶尔想用用，问题不断，废了一点功夫才解决。
遭遇VBoxManage.exe: error $ vagrant up Bringing machine &#39;xdevimg&#39; up with &#39;virtualbox&#39; provider... ==&amp;gt; xdevimg: Checking if box &#39;devimage-ubuntu&#39; is up to date... ==&amp;gt; xdevimg: A newer version of the box &#39;devimage-ubuntu&#39; is available! You currently ==&amp;gt; xdevimg: have version &#39;0.13.0&#39;. The latest is version &#39;0.13.2&#39;. Run ==&amp;gt; xdevimg: `vagrant box update` to update. ==&amp;gt; xdevimg: Clearing any previously set forwarded ports... ==&amp;gt; xdevimg: Clearing any previously set network interfaces.</description>
    </item>
    
    <item>
      <title>遇到&#34;vagrant up&#34;无法读取box元数据问题</title>
      <link>https://mryqu.github.io/post/%E9%81%87%E5%88%B0vagrant_up%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96box%E5%85%83%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 18 Mar 2016 06:46:16 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E9%81%87%E5%88%B0vagrant_up%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96box%E5%85%83%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</guid>
      <description>昨天在某个Windows Server2008上升级了Vagrant (1.8.1)和VitualBox(5.0.16)，然后vagrant up就开始出问题了。
C:\foo&amp;gt;vagrant up Bringing machine &#39;xfoo&#39; up with &#39;virtualbox&#39; provider... ==&amp;gt; xfoo: Box ‘foo-ubuntu‘ could not be found. Attempting to find and install... xfoo: Box Provider: virtualbox xfoo: Box Version: &amp;gt;= 0.12.0, &amp;lt; 1.0.0 ==&amp;gt; xfoo: Box file was not detected as metadata. Adding it directly... You specified a box version constraint with a direct box file path. Box version constraints only work with boxes from Vagrant Cloud or a custom box host.</description>
    </item>
    
    <item>
      <title>Vagrant运行Docker的几种方法</title>
      <link>https://mryqu.github.io/post/vagrant%E8%BF%90%E8%A1%8Cdocker%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 15 Jun 2015 06:15:31 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/vagrant%E8%BF%90%E8%A1%8Cdocker%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>Vagrant的docker provisioner能够自动安装Docker、下载Docker容器、随着vagrant up命令自动运行容器。 Vagrantfile Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.provision &amp;quot;docker&amp;quot; do |d| d.pull_images &amp;quot;consul&amp;quot; d.run &amp;quot;consul&amp;quot; d.pull_images &amp;quot;rabbitmq&amp;quot; d.run &amp;quot;rabbitmq&amp;quot; end end  仅使用Vagrant的docker provisioner安装Docker，使用脚本下载并运行Docker容器 Vagrantfile # Install Docker config.vm.provision &amp;quot;docker&amp;quot; # Download Docker images, create and start containers config.vm.provision :shell, :path =&amp;gt; &amp;quot;runMyDockers.sh&amp;quot;  runMyDockers.sh #!/bin/bash docker rm -f consul 2&amp;gt;/dev/null docker create --hostname consul --name consul -v /data/consul1:/data --dns 127.0.0.1 --restart always -p 8500:8500 --env CONSUL_OPTIONS=-bootstrap consul:dev docker start consul docker rm -f rabbitmq 2&amp;gt;/dev/null docker create --name rabbitmq --hostname rabbitmq -p 5672:5672 -v /data/rabbitmq:/data --dns 127.</description>
    </item>
    
    <item>
      <title>使用Vagrant创建开发环境</title>
      <link>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8vagrant%E5%88%9B%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Fri, 12 Jun 2015 22:46:10 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8vagrant%E5%88%9B%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>用思维导图写了一篇[Packt Publishing] Creating Development Environments with Vagrant读书笔记。 </description>
    </item>
    
    <item>
      <title>通过环境变量修改VAGRANT BOX参数</title>
      <link>https://mryqu.github.io/post/%E9%80%9A%E8%BF%87%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%BF%AE%E6%94%B9vagrant_box%E5%8F%82%E6%95%B0/</link>
      <pubDate>Fri, 12 Jun 2015 06:14:24 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E9%80%9A%E8%BF%87%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%BF%AE%E6%94%B9vagrant_box%E5%8F%82%E6%95%B0/</guid>
      <description>在如下示例Vagrantfile文件片段，VAGRANTBOX的内存和CPU核数首先查询环境变量，如果没有设相关环境变量的话则使用默认值。
config.vm.provider &amp;quot;virtualbox&amp;quot; do |v| v.memory = ENV.has_key?(&#39;VAGRANTBOX_MEM&#39;) ? ENV[&#39;VAGRANTBOX_MEM&#39;].to_i : 1024 v.cpus = ENV.has_key?(&#39;VAGRANTBOX_CPUS&#39;) ? ENV[&#39;VAGRANTBOX_CPUS&#39;].to_i : 2 v.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--natdnshostresolver1&amp;quot;, &amp;quot;on&amp;quot;] v.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--cpuexecutioncap&amp;quot;, &amp;quot;75&amp;quot;] end  参考 Vagrant VirtualBox Configuration</description>
    </item>
    
    <item>
      <title>Vagrant base box列表</title>
      <link>https://mryqu.github.io/post/vagrant_base_box%E5%88%97%E8%A1%A8/</link>
      <pubDate>Thu, 28 May 2015 05:28:59 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/vagrant_base_box%E5%88%97%E8%A1%A8/</guid>
      <description>Vagrant的basebox都是打包了最小安装版操作系统(仅有一些跟Vagrant通讯必需的工具)的虚拟机镜像。vagrantbox.es列出了很多Vagrant的basebox，其中既有官方的box也有很多非官方的box。 有的box名是lucid32.box、lucid64.box、precise32.box、precise64.box，一开始不明白怎么回事，后来知道用的是Ubuntu的英文代码。
Ubuntu各种版本的英文代码 |版本|英文代号|中译 |&amp;mdash;&amp;ndash; |Ubuntu 4.10|Warty Warthog|多疣的疣猪 |Ubuntu 5.04|Hoary Hedgehog|白发的刺猬 |Ubuntu 5.10|Breezy Badger|活泼的獾 |Ubuntu 6.06|Dapper Drake|整洁的公鸭 |Ubuntu 6.10|Edgy Eft|尖利的小蜥蜴 |Ubuntu 7.04|Feisty Fawn|烦躁不安的鹿 |Ubuntu 7.10|Gutsy Gibbon|胆大的长臂猿 |Ubuntu 8.04|Hardy Heron|坚强的鹭 |Ubuntu 8.10|Intrepid Ibex|无畏的羱羊 |Ubuntu 9.04|Jaunty Jackalope|活泼的鹿角兔 |Ubuntu 9.10|Karmic Koala|幸运的树袋熊 |Ubuntu 10.04|Lucid Lynx|清醒的猞猁 |Ubuntu 10.10|Maverick Meerkat|标新立异的的狐獴 |Ubuntu 11.04|Natty Narwhal|敏捷的独角鲸 |Ubuntu 11.10|Oneiric Ocelot|有梦的虎猫 |Ubuntu 12.04|Precise Pangolin|精准的穿山甲 |Ubuntu 12.10|Quantal Quetzal|量子的格查尔鸟 |Ubuntu 13.04|Raring Ringtail|铆足了劲的环尾猫熊 |Ubuntu 13.10|Saucy Salamander|活泼的蝾螈 |Ubuntu 14.04|Trusty Tahr|可靠的塔尔羊 |Ubuntu 14.10|Utopic Unicorn|乌托邦的独角兽 |Ubuntu 15.</description>
    </item>
    
    <item>
      <title>尝试boot2docker和Vagrant-boot2docker box</title>
      <link>https://mryqu.github.io/post/%E5%B0%9D%E8%AF%95boot2docker%E5%92%8Cvagrant-boot2docker_box/</link>
      <pubDate>Sun, 17 May 2015 20:40:31 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%B0%9D%E8%AF%95boot2docker%E5%92%8Cvagrant-boot2docker_box/</guid>
      <description>boot2docker boot2docker是基于Tiny Core Linux的轻量级Linux发布版本虚拟机，专用于运行Docker容器。 功能如下： - 3.18.5内核及AUFS文件系统、Docker 1.5.0 - 容器通过磁盘自动加载在/var/lib/docker目录持久化 - SSH密钥通过磁盘自动加载进行持久化 - 容易访问Docker映射端口的主机模式（Host-only）
Vagrant兼容的boot2docker box Vagrant创始人Mitchell Hashimoto使用boot2docker虚拟机创建了一个可被VirtualBox和VMware提供者支持的Vagrant box。当Vagrant被运行于Linux之外的操作系统时，Vagrant的Docker提供者默认使用boot2dockerbox提供Docker功能。 参考 boot2docker官网
GitHub:boot2docker
GitHub:boot2docker-cli
GitHub:mitchellh/boot2docker-vagrant-box
yungsang/boot2docker
GitHub:yungsang/boot2docker
Using Docker with Vagrant
Setting up a development environment using Docker and Vagrant
Docker in OSX via boot2docker or Vagrant: getting over the hump</description>
    </item>
    
    <item>
      <title>定制Vagrant box主机</title>
      <link>https://mryqu.github.io/post/%E5%AE%9A%E5%88%B6vagrant_box%E4%B8%BB%E6%9C%BA/</link>
      <pubDate>Thu, 07 May 2015 21:34:40 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%AE%9A%E5%88%B6vagrant_box%E4%B8%BB%E6%9C%BA/</guid>
      <description>做个笔记，记录一下如何定制Vagrant box主机。 - 在Vagrantfile中通过一个Vagrant基础box定制box。 - 启动该定制box后，通过Vagrant package命令输出box文件 - 编写JSON格式的box元数据文件 - 将定制box文件及其元数据文件放到web服务器中 - 将此定制box作为基础box的Vagrantfile中，设置如下 - config.vm.box用于匹配上述定制box的名称 - config.vm.box_url为box文件的URL或box元数据文件的URL当config.vm.box_url为box文件的URL，该box文件即为基础box；当config.vm.box_url为box元数据文件的URL，可以使用config.vm.box指定名称的某一版本box文件（有config.vm.box_version参数，即使用其约束的特定版本；否则，使用最新版本box文件）作为基础box。 - config.vm.box_version指定box的特定版本。
参考 Custom Vagrant Cloud Versioned Box Host
Vagrant: CREATING A BASE BOX
Vagrant: MACHINE SETTINGS</description>
    </item>
    
    <item>
      <title>找不到TTY而导致的Vagrant destroy失败</title>
      <link>https://mryqu.github.io/post/%E6%89%BE%E4%B8%8D%E5%88%B0tty%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84vagrant_destroy%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Wed, 06 May 2015 05:50:21 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E6%89%BE%E4%B8%8D%E5%88%B0tty%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84vagrant_destroy%E5%A4%B1%E8%B4%A5/</guid>
      <description>在Windows的Git Bash上想要够过vagrant destroy命令删除一个Vagrant虚拟机，结果碰到了这个错误：  Vagrant is attempting to interface with the UI in a way that requires a TTY. Most actions in Vagrant that require a TTY have configuration switches to disable this requirement. Please do that or run Vagrant with TTY. 
据说Windows上的Cygwin以一种奇怪的方式处理stdin导致Ruby以为没有TTY，没想到Git Bash所基于的MinGW也有这样的问题。 权变措施是使用vagrant destroy --force。
[](http://stackoverflow.com/questions/23633276/vagrant-is-attempting-to-interface-with-the-ui-in-a-way-that-requires-a-tty)
[](https://groups.google.com/forum/#!msg/vagrant-up/ExFet5jMomU/T9FiZluf4ggJ)</description>
    </item>
    
    <item>
      <title>遭遇由VT-x设置导致的vagrant up失败</title>
      <link>https://mryqu.github.io/post/%E9%81%AD%E9%81%87%E7%94%B1vt-x%E8%AE%BE%E7%BD%AE%E5%AF%BC%E8%87%B4%E7%9A%84vagrant_up%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Tue, 05 May 2015 06:06:28 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E9%81%AD%E9%81%87%E7%94%B1vt-x%E8%AE%BE%E7%BD%AE%E5%AF%BC%E8%87%B4%E7%9A%84vagrant_up%E5%A4%B1%E8%B4%A5/</guid>
      <description>我在同事申请的一台机器上安装Vagrant box，结果vagrant up失败，报如下错误：  The guest machine entered an invalid state while waiting for it to boot. Valid states are &amp;lsquo;starting, running&amp;rsquo;. The machine is in the &amp;lsquo;poweroff&amp;rsquo; state. Please verify everything is configured properly and try again. If the provider you&amp;rsquo;re using has a GUI that comes with it, it is often helpful to open that and watch the machine, since the GUI often has more helpful error messages than Vagrant can retrieve.</description>
    </item>
    
    <item>
      <title>使用Vagrant Box</title>
      <link>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8vagrant_box/</link>
      <pubDate>Mon, 20 Apr 2015 06:07:31 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E4%BD%BF%E7%94%A8vagrant_box/</guid>
      <description>//Download a box to local disk $ vagrant box add my-box /path/to/the/new.box ... $ vagrant init my-box ... $ vagrant up ...  </description>
    </item>
    
  </channel>
</rss>