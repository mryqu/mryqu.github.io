<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intellij on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/intellij/</link>
    <description>Recent content in Intellij on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 09 Feb 2015 20:03:46 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/intellij/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>搭建Activiti的IntelliJ IDEA开发调试环境</title>
      <link>https://mryqu.github.io/post/%E6%90%AD%E5%BB%BAactiviti%E7%9A%84intellij_idea%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Mon, 09 Feb 2015 20:03:46 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E6%90%AD%E5%BB%BAactiviti%E7%9A%84intellij_idea%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid>
      <description> 准备工作 在搭建Activiti的IntelliJ IDEA开发调试环境前，确保下列软件已经安装： - JDK 1.6 - ant - Maven - IntelliJ IDEA
导入Activiti Import Project 通过Activiti的Maven pom.xml导入IntelliJ IDEA项目。 Import Modules 导入IntelliJ IDEA项目后，仅有几个Activiti模块变成了IntelliJIDEA项目中的模块。为了可以调试所有模块，通过ProjectStructure菜单简单粗暴地将剩余的Activiti模块导入IntelliJ模块。 对每个手工导入的模块设置源代码、资源、测试代码和测试资源。 Frameworks Dection 手工导入所有模块后，重启IntelliJ IDEA，它会自动检测所有模块的类型，例如Spring、WEB、JPA和GWT等。 构建Activiti Activiti项目可以通过下面的ant命令构建：
.....\wfgitws\Activiti\distro&amp;gt;ant -Dnodocs=true clean distro  也可以在IntelliJ IDEA IDE中构建： 本地调试 To make sure that the necessary application server plugin isenabled 本测试中使用Apache Tomcat服务器。 Defining application servers in IntelliJ IDEA Check and configure artifacts in IntelliJ IDEA Add run/local configuration in IntelliJ IDEA Run in IntelliJ IDEA Add Jetbrain IDE plugin in Chrome 远程调式 Remote Debugging Configuration 通过Run-Edit Configuration菜单命令，添加一个远程调试配置。 该调试配置需要同Tomcat保持一致 Remote Debugging 设置断点，在Activiti Explorer上的操作触发断点，该Activiti的IntelliJIDEA开发调试环境已经可以工作了。 </description>
    </item>
    
    <item>
      <title>[IntelliJ] 与Eclipse的Back/Forward等同功能</title>
      <link>https://mryqu.github.io/post/intellij_%E4%B8%8Eeclipse%E7%9A%84back%E5%92%8Cforward%E7%AD%89%E5%90%8C%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Fri, 19 Dec 2014 05:55:55 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/intellij_%E4%B8%8Eeclipse%E7%9A%84back%E5%92%8Cforward%E7%AD%89%E5%90%8C%E5%8A%9F%E8%83%BD/</guid>
      <description>当查找一个方法的调用者后，可能还想退回到该方法进行研究，Eclipse的Back/Forward功能相应快捷键Alt + Left 和 Alt + Right是很便利的。
使用IntelliJ IDEA进行开发时，可以使用Navigate | Back和Navigate |Forward菜单或快捷键Ctrl + Alt + Left 和 Ctrl + Alt + Right实现相同的功能。 不过在我的机器中存在热键冲突，Intel显卡控制面板也使用相同的快捷键，禁掉Intel显卡控制面板的快捷键就好了。 </description>
    </item>
    
    <item>
      <title>[IntelliJ] 导入项目</title>
      <link>https://mryqu.github.io/post/intellij_%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Wed, 17 Dec 2014 06:15:40 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/intellij_%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE/</guid>
      <description>如果在IntelliJ IDEA没有打开任何项目的话，欢迎界面里有Import Project和Check out fromVersion Control两个菜单。
有一段时间为了导入新项目，我都老老实实关闭所有已打开的项目，去欢迎界面里操作。终于有一天觉得自己太老土，才搜了搜，发现原来这两个功能当有项目打开的时候是二级菜单而已。
 File | New | Project from Existing Sources File | New | Project from Version Control   </description>
    </item>
    
    <item>
      <title>[IntelliJ] 处理Unhandled Exception</title>
      <link>https://mryqu.github.io/post/intellij_%E5%A4%84%E7%90%86unhandled_exception/</link>
      <pubDate>Mon, 15 Dec 2014 05:23:32 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/intellij_%E5%A4%84%E7%90%86unhandled_exception/</guid>
      <description>当在IntelliJ IDEA出现&amp;rdquo;Unhandled Exception&amp;rdquo;时，处理方法很简单。在有问题的代码行按下快捷键Ctrl+ ANTER即会出现下列处理选项： - Add exception to method signature - Surround with try/catch</description>
    </item>
    
    <item>
      <title>[IntelljJ] 文件修改提示和自动保存功能</title>
      <link>https://mryqu.github.io/post/intelljj_%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9%E6%8F%90%E7%A4%BA%E5%92%8C%E8%87%AA%E5%8A%A8%E4%BF%9D%E5%AD%98%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sun, 14 Dec 2014 15:22:51 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/intelljj_%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9%E6%8F%90%E7%A4%BA%E5%92%8C%E8%87%AA%E5%8A%A8%E4%BF%9D%E5%AD%98%E5%8A%9F%E8%83%BD/</guid>
      <description>Eclipse中文件修改后没有保存前文件都会有星号提示，IntelljJ IDEA默认没有提示，但是可以通过如下设置完成：Settings -&amp;gt; Editor -&amp;gt; General -&amp;gt; Editor Tabs: Check &amp;ldquo;Markmodified tabs with asterisk&amp;rdquo;IntelljJ IDEA关于文件自动保存功能主要有两种方式： - 切换到其他应用时保存变化（默认使能）设置路径：Settings -&amp;gt; Apperance &amp;amp; Behavior -&amp;gt; Save files onframe deactivation - 如果应用空闲则自动保存变化（默认禁止）设置路径：Settings -&amp;gt; Apperance &amp;amp; Behavior -&amp;gt; Save filesautomatically if application is idle for &amp;hellip; sec.</description>
    </item>
    
    <item>
      <title>[IntelliJ] 与Eclipse工作集近似的功能</title>
      <link>https://mryqu.github.io/post/intellij_%E4%B8%8Eeclipse%E5%B7%A5%E4%BD%9C%E9%9B%86%E8%BF%91%E4%BC%BC%E7%9A%84%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sat, 13 Dec 2014 12:02:21 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/intellij_%E4%B8%8Eeclipse%E5%B7%A5%E4%BD%9C%E9%9B%86%E8%BF%91%E4%BC%BC%E7%9A%84%E5%8A%9F%E8%83%BD/</guid>
      <description>Eclipse鼓励将不同的功能模块划分为独立的项目存在，这样不但结构清晰，组织起来还非常灵活，因为我们可以用feature对这些项目进行不同的组合，输出后得到具有不同功能的产品。 不过这样一来项目浏览器里的项目会以更快的速度增加，当你面对几十上百个项目时，工作效率必然大打折扣。幸好Eclipse提供了工作集（WorkingSet）的功能，它可以用来对项目进行分组，并且可以项目浏览器里指定显示所有项目或者特定工作集下的项目。 具体操作可以参考Eclipse帮助文档工作集概念和项目浏览器显示/隐藏文件。
IntelliJ IDEA与Eclipse术语对比如下：
|Eclipse|IntelliJ IDEA |&amp;mdash;&amp;ndash; |A number of projects, a workspace|Project |Project|Module |Project-specific JRE|Module SDK |User library|Global library |Classpath variable|Path variable |Project dependency|Module dependency |Library|Module library
由此可知在IntelliJ IDEA中近似功能应该在module一层，就我查找的资料来看最近似的功能就是模块组（modulegroup）了。 具体操作可以参考IntelliJ IDEA帮助文档对模块分组。Eclipse可选择对某个工作集下的所有项目进行集中编译；同样IntelliJ IDEA也可选择对模块组下的所有模块集中编译。Eclipse可以显示工作空间下所有项目，或仅显示某个工作集下的项目以隐藏其他项目；IntelliJIDEA只能对模块组进行折叠来隐藏其下的模块。这一点两者的行为有一定差异。</description>
    </item>
    
    <item>
      <title>[IntelliJ] Javascript code inspection</title>
      <link>https://mryqu.github.io/post/intellij_javascript_code_inspection/</link>
      <pubDate>Wed, 10 Dec 2014 19:34:48 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/intellij_javascript_code_inspection/</guid>
      <description></description>
    </item>
    
    <item>
      <title>WebStorm与IntelliJ IDEA的区别</title>
      <link>https://mryqu.github.io/post/webstorm%E4%B8%8Eintellij_idea%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 06 Dec 2014 16:35:23 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/webstorm%E4%B8%8Eintellij_idea%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>WebStorm与IntelliJ IDEA都被很多JS开发者誉为“Web前端开发神器”、“最强大的HTML5编辑器”、“最智能的JavaScriptIDE”等，用了一点IntelliJ IDEA，还真不知道两者有什么联系和区别。网上搜了一下，WebStorm FAQ和PhpStorm FAQ解答了我的疑问。JetBrains旗下的产品： - IntelliJ IDEA偏重于Java开发，旗舰产品，它可以通过（捆绑的或可下载的）插件的方式提供WebStorm和PhpStorm所有的功能。支持Scala和Groovy开发，也可以通过插件支持Ruby和Python语言。 - PhpStorm侧重于PHP开发 - WebStorm侧重于JS开发 - RubyMine侧重于Ruby和Rails开发 - PyCharm侧重于Python和Djanjo开发WebStorm与IntelliJ IDEA相比，功能少，集中于JS开发这一块，更加轻量级，新项目配置起来更简单。
下面两个链接是WebStorm和IntelliJ IDEA的官方报价，WebStorm的价格大概是IntelliJIDEA的五分之一。 - https://www.jetbrains.com/webstorm/buy/ - https://www.jetbrains.com/idea/buy/</description>
    </item>
    
    <item>
      <title>[IntelliJ] 添加Plugin更新URL并安装</title>
      <link>https://mryqu.github.io/post/intellij_%E6%B7%BB%E5%8A%A0plugin%E6%9B%B4%E6%96%B0url%E5%B9%B6%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 05 Dec 2014 18:50:54 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/intellij_%E6%B7%BB%E5%8A%A0plugin%E6%9B%B4%E6%96%B0url%E5%B9%B6%E5%AE%89%E8%A3%85/</guid>
      <description>1) 选择菜单 File -&amp;gt; Setting2) Setting对话框内选择plugins，点击Browse Repositories -&amp;gt; ManageRepositories -&amp;gt; Add Repository添加完所要安装的插件更新URL，然后就可以安装了。</description>
    </item>
    
    <item>
      <title>[IntelliJ] 格式化代码</title>
      <link>https://mryqu.github.io/post/intellij_%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 03 Dec 2014 19:52:39 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/intellij_%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</guid>
      <description>用了多年的Eclipse后，转而用IntelliJ IDEA，觉得很多简单的功能都不会了，感觉是一个囧呀。 刚碰到的就是不知道如何去格式化代码。
作为一个非快捷键达人的码农，在Eclipse中都是右键菜单，然后找Source-&amp;gt;Format。
但是在IntelliJ中，右键菜单里面真没这功能。后来还是找了一会，终于在菜单里发现了！</description>
    </item>
    
    <item>
      <title>我的IntelliJ IDEA配置</title>
      <link>https://mryqu.github.io/post/%E6%88%91%E7%9A%84intellij_idea%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 29 Nov 2014 20:19:20 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E6%88%91%E7%9A%84intellij_idea%E9%85%8D%E7%BD%AE/</guid>
      <description> 安装完IntelliJIDEA，我首先切换到64位模式： 安装文件生成的快捷方式默认指向的是idea.exe，更改为idea64.exe。 更改默认内存配置：修改IntelliJ&amp;rdquo;bin&amp;rdquo;目录下的idea64.exe.vmoptions文件。 &amp;ldquo;-Xms&amp;rdquo;和&amp;rdquo;-Xmx&amp;rdquo;定义了Java分配给IntelliJ的最小和最大堆空间，将其更改为&amp;rdquo;-Xms256m&amp;rdquo;和&amp;rdquo;-Xmx1600m&amp;rdquo; 启动IntelliJ IDEA，通过File-&amp;gt;Setting菜单做如下修改：  更改编译器的构建过程堆大小为1024 设置代理为总动检测   </description>
    </item>
    
    <item>
      <title>Eclipse用户IntelliJ IDEA入门指南</title>
      <link>https://mryqu.github.io/post/eclipse%E7%94%A8%E6%88%B7intellij_idea%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 29 Nov 2014 10:50:26 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/eclipse%E7%94%A8%E6%88%B7intellij_idea%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</guid>
      <description>除了IntelliJ IDEA帮助文档 （https://www.jetbrains.com/idea/help/intellij-idea.html），发现一个IntelliJIDEA不错的入门教程： Getting Started with IntelliJ IDEA as an Eclipse User（http://zeroturnaround.com/rebellabs/getting-started-with-intellij-idea-as-an-eclipse-user/） - Introduction: Why IntelliJ IDEA? - Chapter I: Getting your first IntelliJ IDEA project set up - Chapter II: Getting comfortable with IDEA’s Keymap, Navigation and Settings - Chapter III: Getting productive with Tests, Deployments and Artifacts - Chapter IV: Summary, Conclusion and Goodbye Comic ;-)
其他参考: IntelliJ Idea 常用快捷键列表</description>
    </item>
    
  </channel>
</rss>