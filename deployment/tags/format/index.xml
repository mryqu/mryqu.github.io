<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Format on Mryqu&#39;s Notes</title>
    <link>https://mryqu.github.io/tags/format/</link>
    <description>Recent content in Format on Mryqu&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 17 Apr 2017 05:50:50 +0000</lastBuildDate>
    
	<atom:link href="https://mryqu.github.io/tags/format/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>处理Google Analytics数据类型</title>
      <link>https://mryqu.github.io/post/%E5%A4%84%E7%90%86google_analytics%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 17 Apr 2017 05:50:50 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/%E5%A4%84%E7%90%86google_analytics%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>发送一个Google Analytics请求 分析响应中的columnHeaders 响应中每一列头都包含数据类型信息，大致包含STRING、INTEGER、FLOAT、DATE、TIME、PERCENT、CURRENCY等。
{ &amp;quot;kind&amp;quot;: &amp;quot;analytics#gaData&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;https://www.googleapis.com/analytics/v3/data/ga?ids=ga:1XXXXX0&amp;amp;dimensions=ga:campaign,ga:source,ga:medium,ga:date&amp;amp;metrics=ga:users,ga:newUsers,ga:percentNewSessions,ga:sessions,ga:bounceRate,ga:avgSessionDuration,ga:pageviewsPerSession&amp;amp;start-date=30daysAgo&amp;amp;end-date=yesterday&amp;amp;max-results=0&amp;quot;, &amp;quot;query&amp;quot;: { &amp;quot;start-date&amp;quot;: &amp;quot;30daysAgo&amp;quot;, &amp;quot;end-date&amp;quot;: &amp;quot;yesterday&amp;quot;, &amp;quot;ids&amp;quot;: &amp;quot;ga:1XXXXX0&amp;quot;, &amp;quot;dimensions&amp;quot;: &amp;quot;ga:campaign,ga:source,ga:medium,ga:date&amp;quot;, &amp;quot;metrics&amp;quot;: [ &amp;quot;ga:users&amp;quot;, &amp;quot;ga:newUsers&amp;quot;, &amp;quot;ga:percentNewSessions&amp;quot;, &amp;quot;ga:sessions&amp;quot;, &amp;quot;ga:bounceRate&amp;quot;, &amp;quot;ga:avgSessionDuration&amp;quot;, &amp;quot;ga:pageviewsPerSession&amp;quot; ], &amp;quot;start-index&amp;quot;: 1, &amp;quot;max-results&amp;quot;: 0 }, &amp;quot;itemsPerPage&amp;quot;: 0, &amp;quot;totalResults&amp;quot;: 27400, &amp;quot;selfLink&amp;quot;: &amp;quot;https://www.googleapis.com/analytics/v3/data/ga?ids=ga:1XXXXX0&amp;amp;dimensions=ga:campaign,ga:source,ga:medium,ga:date&amp;amp;metrics=ga:users,ga:newUsers,ga:percentNewSessions,ga:sessions,ga:bounceRate,ga:avgSessionDuration,ga:pageviewsPerSession&amp;amp;start-date=30daysAgo&amp;amp;end-date=yesterday&amp;amp;max-results=0&amp;quot;, &amp;quot;nextLink&amp;quot;: &amp;quot;https://www.googleapis.com/analytics/v3/data/ga?ids=ga:1XXXXX0&amp;amp;dimensions=ga:campaign,ga:source,ga:medium,ga:date&amp;amp;metrics=ga:users,ga:newUsers,ga:percentNewSessions,ga:sessions,ga:bounceRate,ga:avgSessionDuration,ga:pageviewsPerSession&amp;amp;start-date=30daysAgo&amp;amp;end-date=yesterday&amp;amp;start-index=1&amp;amp;max-results=0&amp;quot;, &amp;quot;profileInfo&amp;quot;: { &amp;quot;profileId&amp;quot;: &amp;quot;1XXXXX0&amp;quot;, &amp;quot;accountId&amp;quot;: &amp;quot;1XXXXX8&amp;quot;, &amp;quot;webPropertyId&amp;quot;: &amp;quot;UA-XXXXXXX-1&amp;quot;, &amp;quot;internalWebPropertyId&amp;quot;: &amp;quot;1XXXX1&amp;quot;, &amp;quot;profileName&amp;quot;: &amp;quot;Corporate Site (Master Profile)&amp;quot;, &amp;quot;tableId&amp;quot;: &amp;quot;ga:1XXXXX0&amp;quot; }, &amp;quot;containsSampledData&amp;quot;: true, &amp;quot;sampleSize&amp;quot;: &amp;quot;999951&amp;quot;, &amp;quot;sampleSpace&amp;quot;: &amp;quot;3174334&amp;quot;, &amp;quot;columnHeaders&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;ga:campaign&amp;quot;, &amp;quot;columnType&amp;quot;: &amp;quot;DIMENSION&amp;quot;, &amp;quot;dataType&amp;quot;: &amp;quot;STRING&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;ga:source&amp;quot;, &amp;quot;columnType&amp;quot;: &amp;quot;DIMENSION&amp;quot;, &amp;quot;dataType&amp;quot;: &amp;quot;STRING&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;ga:medium&amp;quot;, &amp;quot;columnType&amp;quot;: &amp;quot;DIMENSION&amp;quot;, &amp;quot;dataType&amp;quot;: &amp;quot;STRING&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;ga:date&amp;quot;, &amp;quot;columnType&amp;quot;: &amp;quot;DIMENSION&amp;quot;, &amp;quot;dataType&amp;quot;: &amp;quot;STRING&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;ga:users&amp;quot;, &amp;quot;columnType&amp;quot;: &amp;quot;METRIC&amp;quot;, &amp;quot;dataType&amp;quot;: &amp;quot;INTEGER&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;ga:newUsers&amp;quot;, &amp;quot;columnType&amp;quot;: &amp;quot;METRIC&amp;quot;, &amp;quot;dataType&amp;quot;: &amp;quot;INTEGER&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;ga:percentNewSessions&amp;quot;, &amp;quot;columnType&amp;quot;: &amp;quot;METRIC&amp;quot;, &amp;quot;dataType&amp;quot;: &amp;quot;PERCENT&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;ga:sessions&amp;quot;, &amp;quot;columnType&amp;quot;: &amp;quot;METRIC&amp;quot;, &amp;quot;dataType&amp;quot;: &amp;quot;INTEGER&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;ga:bounceRate&amp;quot;, &amp;quot;columnType&amp;quot;: &amp;quot;METRIC&amp;quot;, &amp;quot;dataType&amp;quot;: &amp;quot;PERCENT&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;ga:avgSessionDuration&amp;quot;, &amp;quot;columnType&amp;quot;: &amp;quot;METRIC&amp;quot;, &amp;quot;dataType&amp;quot;: &amp;quot;TIME&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;ga:pageviewsPerSession&amp;quot;, &amp;quot;columnType&amp;quot;: &amp;quot;METRIC&amp;quot;, &amp;quot;dataType&amp;quot;: &amp;quot;FLOAT&amp;quot; } ], &amp;quot;totalsForAllResults&amp;quot;: { &amp;quot;ga:users&amp;quot;: &amp;quot;2648520&amp;quot;, &amp;quot;ga:newUsers&amp;quot;: &amp;quot;1488536&amp;quot;, &amp;quot;ga:percentNewSessions&amp;quot;: &amp;quot;46.</description>
    </item>
    
    <item>
      <title>[Hive] Hive表文件存储格式</title>
      <link>https://mryqu.github.io/post/hive_hive%E8%A1%A8%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Fri, 14 Aug 2015 06:25:23 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/hive_hive%E8%A1%A8%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/</guid>
      <description>Hive支持的内建表文件存储格式如下：
|存储格式|介绍 |&amp;mdash;&amp;ndash; |TEXTFILE|按照纯文本文件格式存储。如果配置hive.default.fileformat没有设置的话，TEXTFILE是默认文件格式。
此存储格式下，数据不做压缩的话，磁盘开销大，数据解析开销大。使用Gzip、Bzip2、Snappy等进行压缩使用（系统自动检查，执行查询时自动解压）的话，Hive不能对数据进行切分，从而无法对数据进行并行操作。 |SEQUENCEFILE|按照压缩的Sequence File格式存储。
SequenceFile一般是在HDFS FileSystem中生成，供map调用的原始文件。Hive中的SequenceFile继承自Hadoop API 的SequenceFile，不过它的key为空，使用value存放实际的值，这样是为了避免MR在运行map阶段的排序过程。 |RCFILE|按照RCFile (Record Columnar File)格式存储。
在Hive0.6.0引入。RCFile是在计算机集群中判断如何存储关系型表的数据存放结构，是Facebook、俄亥俄州立大学、中科院计算所联合研究成果。FCFile结构是由数据存储格式、数据压缩方式、数据读取优化技术等多种模块的系统组合，可以实现数据存放的四个要求：(1)快速加载，(2) 快速处理查询，(3) 高效利用存储空间 (4) 非常适用于动态数据访问模式。
它遵循“先按行划分，再垂直划分”的设计理念。当查询过程中，针对它并不关心的列时，它会在IO上跳过这些列。需要说明的是，RCFile在map阶段从远端拷贝仍然是拷贝整个数据块，并且拷贝到本地目录后RCFile并不是真正直接跳过不需要的列，并跳到需要读取的列，而是通过扫描每一个row group的头部定义来实现的，但是在整个HDFS Block 级别的头部并没有定义每个列从哪个rowgroup起始到哪个row group结束。所以在读取所有列的情况下，RCFile的性能反而没有SequenceFile高。 |ORC|在Hive 0.11.0引入。ORC(Optimized RowColumnar)存储源自于RCFile。FCFile把每列都当作二进制blob处理，而ORC存储列元数据，针对列类型使用特定的读写器。ORC支持ACID、内建索引和复杂类型。官网上介绍“其性能显著快于RCFile或Parquet”。Facebook和Yahoo等大公司都在使用。 |PARQUET|在Hive 0.13.0引入。Parquet源自于google Dremel系统。Parquet最初的设计动机是存储嵌套式数据，将这类数据存储成列式格式，以方便对其高效压缩和编码，且使用更少的IO操作取出需要的数据，这也是Parquet相比于ORC的优势，它能够透明地将Protobuf和thrift类型的数据进行列式存储，在Protobuf和thrift被广泛使用的今天，与parquet进行集成，是一件非容易和自然的事情。除了上述优势外，相比于ORC,Parquet没有太多其他可圈可点的地方，比如它不支持update操作（数据写成后不可修改），不支持ACID等。 |AVRO|在Hive 0.13.0引入。Avro是数据序列化系统，由Hadoop项目开发的。
测试 $ echo -e &#39;1\x01foo&#39; &amp;gt; tabft.txt $ echo -e &#39;2\x01bar&#39; &amp;gt;&amp;gt; tabft.txt $ hive hive&amp;gt; create table tabft (id int, name string); hive&amp;gt; quit; $ hadoop fs -put tabft.txt /user/hive/warehouse/tabft $ hive hive&amp;gt; create table tabft_txt (id int, name string) STORED AS TEXTFILE; hive&amp;gt; insert into table tabft_txt select * from tabft; hive&amp;gt; create table tabft_seq (id int, name string) STORED AS SEQUENCEFILE; hive&amp;gt; insert into table tabft_seq select * from tabft; hive&amp;gt; create table tabft_rc (id int, name string) STORED AS RCFILE; hive&amp;gt; insert into table tabft_rc select * from tabft; hive&amp;gt; create table tabft_orc (id int, name string) STORED AS ORC; hive&amp;gt; insert into table tabft_orc select * from tabft; hive&amp;gt; create table tabft_parq (id int, name string) STORED AS PARQUET; hive&amp;gt; insert into table tabft_parq select * from tabft; hive&amp;gt; create table tabft_avro (id int, name string) STORED AS AVRO; hive&amp;gt; insert into table tabft_avro select * from tabft;  获取Sequence文件信息 在我的环境下，按照压缩的Sequence File格式存储后的文件是非压缩的。 获取ORC文件信息 参考 Hive 语言手册 - DDL</description>
    </item>
    
    <item>
      <title>[OpenUI5] sap.ui.core.format.DateFormat使用</title>
      <link>https://mryqu.github.io/post/openui5_sap.ui.core.format.dateformat%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 15 Mar 2015 17:02:46 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/openui5_sap.ui.core.format.dateformat%E4%BD%BF%E7%94%A8/</guid>
      <description>使用javascript的Date类型，想要输出国际化的字符串，可以使用toLocaleString函数，但是需要自己往里设locale，并且输出结果随操作系统和浏览器不同而变化。
最后还是用OpenUI5的DateFormat，既可以固定格式有可以自动国际化。
var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({ pattern: &amp;quot;EEEE, MMMM d, yyyy HH:mm:ss a z&amp;quot; }); oDateFormat.format(new Date());  </description>
    </item>
    
    <item>
      <title>[IntelliJ] 格式化代码</title>
      <link>https://mryqu.github.io/post/intellij_%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 03 Dec 2014 19:52:39 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/intellij_%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</guid>
      <description>用了多年的Eclipse后，转而用IntelliJ IDEA，觉得很多简单的功能都不会了，感觉是一个囧呀。 刚碰到的就是不知道如何去格式化代码。
作为一个非快捷键达人的码农，在Eclipse中都是右键菜单，然后找Source-&amp;gt;Format。
但是在IntelliJ中，右键菜单里面真没这功能。后来还是找了一会，终于在菜单里发现了！</description>
    </item>
    
    <item>
      <title>[Hadoop] MapReduce输出SequenceFile实践</title>
      <link>https://mryqu.github.io/post/hadoop_mapreduce%E8%BE%93%E5%87%BAsequencefile%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 01 Jan 2014 23:19:23 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/hadoop_mapreduce%E8%BE%93%E5%87%BAsequencefile%E5%AE%9E%E8%B7%B5/</guid>
      <description> Hadoop的Mapper输出默认格式为SequenceFile，而Reducer默认输出则为TextFile。在一个MapReduce工作流中，经常有多个MapReduce作业级联完成应用功能。如果中间MapReduce是输入输出都为SequenceFile，则性能很可能获得很大提升。 SequenceFile文件是Hadoop用来存储二进制形式的键值对而设计的一种平面文件(FlatFile)。SequenceFile可压缩可切分,非常适合Hadoop文件存储特性，SequenceFile的写入由org.apache.hadoop.io.SequenceFile.Writer来实现，根据压缩类型Writer又派生出两个子类BlockCompressWriter和RecordCompressWriter，压缩方式由SequenceFile类的内部枚举类CompressionType来表示： - NONE: 对记录不进行压缩; - RECORD: 仅压缩每一个记录中的值; - BLOCK: 将一个块中的所有记录压缩在一起;
输入SequenceFile示例 job.setInputFormatClass(SequenceFileInputFormat.class);  输出SequenceFile示例 </description>
    </item>
    
    <item>
      <title>[C] Exec format error</title>
      <link>https://mryqu.github.io/post/c_exec_format_error/</link>
      <pubDate>Sun, 20 Oct 2013 17:28:57 +0000</pubDate>
      
      <guid>https://mryqu.github.io/post/c_exec_format_error/</guid>
      <description>很久没用g++了，结果编个小程序还出错。
mryqu:~/ctest$ g++ -g -c wvc.cpp -o wvc mryqu:~/ctest$ chmod a+x wvc mryqu:~/ctest$ ./wvc -bash: ./wvc: cannot execute binary file: Exec format error mryqu:~/ctest$ file wvc wvc: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped  查了查gcc的帮助，才发现用了-c选项后其实是只编译不链接的：
-c Compile or assemble the source files, but do not link. The linking stage simply is not done. The ultimate output is in the form of an object file for each source file.</description>
    </item>
    
  </channel>
</rss>